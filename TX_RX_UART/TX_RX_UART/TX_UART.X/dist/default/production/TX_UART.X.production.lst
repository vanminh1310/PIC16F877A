

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Dec 03 16:52:53 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.31
    20                           ; Generated 13/10/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0006                     _PORTBbits	set	6
   175  0006                     _PORTB	set	6
   176  0019                     _TXREG	set	25
   177  001A                     _RCREG	set	26
   178  000C                     _PIR1bits	set	12
   179  0018                     _RCSTAbits	set	24
   180  0039                     _RC1	set	57
   181  0038                     _RC0	set	56
   182  0086                     _TRISB	set	134
   183  0086                     _TRISBbits	set	134
   184  0099                     _SPBRG	set	153
   185  0098                     _TXSTAbits	set	152
   186  0087                     _TRISCbits	set	135
   187  0439                     _TRISC1	set	1081
   188  0438                     _TRISC0	set	1080
   189  0430                     _TRISB0	set	1072
   190                           
   191                           	psect	strings
   192  0003                     __pstrings:
   193  0003                     stringtab:
   194  0003                     __stringtab:
   195                           
   196                           ;	String table - string pointers are 1 byte each
   197  0003  1BFF               	btfsc	btemp+1,7
   198  0004  280D               	ljmp	stringcode
   199  0005  1383               	bcf	3,7
   200  0006  187F               	btfsc	btemp+1,0
   201  0007  1783               	bsf	3,7
   202  0008  0800               	movf	0,w
   203  0009  0A84               	incf	4,f
   204  000A  1903               	skipnz
   205  000B  0AFF               	incf	btemp+1,f
   206  000C  0008               	return
   207  000D                     stringcode:
   208  000D                     stringdir:
   209  000D  3000               	movlw	high stringdir
   210  000E  008A               	movwf	10
   211  000F  0804               	movf	4,w
   212  0010  0A84               	incf	4,f
   213  0011  0782               	addwf	2,f
   214  0012                     __stringbase:
   215  0012  3400               	retlw	0
   216  0013                     __end_of__stringtab:
   217  0013                     STR_3:
   218  0013  346C               	retlw	108	;'l'
   219  0014  3465               	retlw	101	;'e'
   220  0015  3464               	retlw	100	;'d'
   221  0016  3420               	retlw	32	;' '
   222  0017  3465               	retlw	101	;'e'
   223  0018  346E               	retlw	110	;'n'
   224  0019  3463               	retlw	99	;'c'
   225  001A  3465               	retlw	101	;'e'
   226  001B  346E               	retlw	110	;'n'
   227  001C  3464               	retlw	100	;'d'
   228  001D  3469               	retlw	105	;'i'
   229  001E  3464               	retlw	100	;'d'
   230  001F  346F               	retlw	111	;'o'
   231  0020  3420               	retlw	32	;' '
   232  0021  3400               	retlw	0
   233  0022                     STR_4:
   234  0022  346C               	retlw	108	;'l'
   235  0023  3465               	retlw	101	;'e'
   236  0024  3464               	retlw	100	;'d'
   237  0025  3420               	retlw	32	;' '
   238  0026  3461               	retlw	97	;'a'
   239  0027  3470               	retlw	112	;'p'
   240  0028  3461               	retlw	97	;'a'
   241  0029  3467               	retlw	103	;'g'
   242  002A  3461               	retlw	97	;'a'
   243  002B  3464               	retlw	100	;'d'
   244  002C  346F               	retlw	111	;'o'
   245  002D  3420               	retlw	32	;' '
   246  002E  3400               	retlw	0
   247  002F                     STR_1:
   248  002F  344B               	retlw	75	;'K'
   249  0030  3465               	retlw	101	;'e'
   250  0031  3479               	retlw	121	;'y'
   251  0032  3420               	retlw	32	;' '
   252  0033  343A               	retlw	58	;':'
   253  0034  3420               	retlw	32	;' '
   254  0035  3400               	retlw	0
   255  0036                     STR_2:
   256  0036  3442               	retlw	66	;'B'
   257  0037  3454               	retlw	84	;'T'
   258  0038  344C               	retlw	76	;'L'
   259  0039  3400               	retlw	0
   260                           
   261                           	psect	cinit
   262  07FC                     start_initialization:	
   263                           ; #config settings
   264                           
   265  07FC                     __initialization:
   266  07FC                     end_of_initialization:	
   267                           ;End of C runtime variable initialization code
   268                           
   269  07FC                     __end_of__initialization:
   270  07FC  0183               	clrf	3
   271  07FD  120A  118A  2F96   	ljmp	_main	;jump to C main() function
   272                           
   273                           	psect	cstackCOMMON
   274  0070                     __pcstackCOMMON:
   275  0070                     ?_cmd:
   276  0070                     ?_lcd_delay:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ??_lcd_delay:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_UART_init:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ??_UART_init:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_UART_read:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ??_UART_read:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_UART_write:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??_UART_write:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_UART_printf:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_lcd_init:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_dat:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_main:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     UART_write@dato:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     lcd_delay@lcd_delay:	
   316                           ; 1 bytes @ 0x0
   317                           
   318                           
   319                           ; 2 bytes @ 0x0
   320  0070                     	ds	1
   321  0071                     ??_UART_printf:
   322                           
   323                           ; 1 bytes @ 0x1
   324  0071                     	ds	1
   325  0072                     ??_cmd:
   326  0072                     ??_dat:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0072                     UART_printf@cadena:	
   330                           ; 1 bytes @ 0x2
   331                           
   332                           
   333                           ; 1 bytes @ 0x2
   334  0072                     	ds	2
   335  0074                     cmd@a:
   336  0074                     dat@b:	
   337                           ; 1 bytes @ 0x4
   338                           
   339                           
   340                           ; 1 bytes @ 0x4
   341  0074                     	ds	1
   342  0075                     ??_lcd_init:
   343  0075                     ?_show:	
   344                           ; 1 bytes @ 0x5
   345                           
   346  0075                     show@s:	
   347                           ; 1 bytes @ 0x5
   348                           
   349                           
   350                           ; 2 bytes @ 0x5
   351  0075                     	ds	2
   352  0077                     ??_show:
   353  0077                     ??_main:	
   354                           ; 1 bytes @ 0x7
   355                           
   356                           
   357                           ; 1 bytes @ 0x7
   358  0077                     	ds	2
   359  0079                     main@dato_rx:
   360                           
   361                           ; 1 bytes @ 0x9
   362  0079                     	ds	1
   363                           
   364                           	psect	maintext
   365  0796                     __pmaintext:	
   366 ;;
   367 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   368 ;;
   369 ;; *************** function _main *****************
   370 ;; Defined at:
   371 ;;		line 14 in file "main.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;  dato_rx         1    9[COMMON] unsigned char 
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : B00/0
   382 ;;		On exit  : 300/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   385 ;;      Params:         0       0       0       0       0
   386 ;;      Locals:         1       0       0       0       0
   387 ;;      Temps:          2       0       0       0       0
   388 ;;      Totals:         3       0       0       0       0
   389 ;;Total ram usage:        3 bytes
   390 ;; Hardware stack levels required when called:    3
   391 ;; This function calls:
   392 ;;		_UART_init
   393 ;;		_UART_printf
   394 ;;		_UART_read
   395 ;;		_cmd
   396 ;;		_lcd_init
   397 ;;		_show
   398 ;; This function is called by:
   399 ;;		Startup code after reset
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           
   404                           ;psect for function _main
   405  0796                     _main:
   406                           
   407                           ;main.c: 16: char dato_rx;;main.c: 17: TRISBbits.TRISB0 = 0;
   408                           
   409                           ;incstack = 0
   410                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   411  0796  1683               	bsf	3,5	;RP0=1, select bank1
   412  0797  1006               	bcf	6,0	;volatile
   413                           
   414                           ;main.c: 18: TRISB0=0;
   415  0798  1006               	bcf	6,0	;volatile
   416                           
   417                           ;main.c: 19: TRISB = TRISC0 = TRISC1 = 0;
   418  0799  1087               	bcf	7,1	;volatile
   419  079A  1007               	bcf	7,0	;volatile
   420  079B  3000               	movlw	0
   421  079C  1807               	btfsc	7,0	;volatile
   422  079D  3001               	movlw	1
   423  079E  0086               	movwf	6	;volatile
   424                           
   425                           ;main.c: 20: UART_init();
   426  079F  120A  118A  26B5  120A  118A  	fcall	_UART_init
   427                           
   428                           ;main.c: 21: lcd_init();
   429  07A4  120A  118A  26EF  120A  118A  	fcall	_lcd_init
   430                           
   431                           ;main.c: 22: cmd(0x80);
   432  07A9  3080               	movlw	128
   433  07AA  120A  118A  272E  120A  118A  	fcall	_cmd
   434                           
   435                           ;main.c: 23: show("Key : ");
   436  07AF  301D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   437  07B0  00F5               	movwf	show@s
   438  07B1  3080               	movlw	128
   439  07B2  00F6               	movwf	show@s+1
   440  07B3  120A  118A  270C  120A  118A  	fcall	_show
   441                           
   442                           ;main.c: 24: UART_printf("BTL");
   443  07B8  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   444  07B9  120A  118A  26D3  120A  118A  	fcall	_UART_printf
   445  07BE                     l771:
   446                           
   447                           ;main.c: 27: {;main.c: 28: dato_rx = UART_read();
   448  07BE  120A  118A  26A6  120A  118A  	fcall	_UART_read
   449  07C3  00F7               	movwf	??_main
   450  07C4  0877               	movf	??_main,w
   451  07C5  00F9               	movwf	main@dato_rx
   452                           
   453                           ;main.c: 30: cmd(0xc8);
   454  07C6  30C8               	movlw	200
   455  07C7  120A  118A  272E  120A  118A  	fcall	_cmd
   456                           
   457                           ;main.c: 31: show(dato_rx);
   458  07CC  0879               	movf	main@dato_rx,w
   459  07CD  00F7               	movwf	??_main
   460  07CE  01F8               	clrf	??_main+1
   461  07CF  0877               	movf	??_main,w
   462  07D0  00F5               	movwf	show@s
   463  07D1  0878               	movf	??_main+1,w
   464  07D2  00F6               	movwf	show@s+1
   465  07D3  120A  118A  270C  120A  118A  	fcall	_show
   466                           
   467                           ;main.c: 32: if(dato_rx == 'A'){
   468  07D8  3041               	movlw	65
   469  07D9  0679               	xorwf	main@dato_rx,w
   470  07DA  1D03               	btfss	3,2
   471  07DB  2FEF               	goto	l785
   472                           
   473                           ;main.c: 33: UART_printf("led encendido ");
   474  07DC  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   475  07DD  120A  118A  26D3  120A  118A  	fcall	_UART_printf
   476                           
   477                           ;main.c: 34: show(dato_rx);
   478  07E2  0879               	movf	main@dato_rx,w
   479  07E3  00F7               	movwf	??_main
   480  07E4  01F8               	clrf	??_main+1
   481  07E5  0877               	movf	??_main,w
   482  07E6  00F5               	movwf	show@s
   483  07E7  0878               	movf	??_main+1,w
   484  07E8  00F6               	movwf	show@s+1
   485  07E9  120A  118A  270C  120A  118A  	fcall	_show
   486                           
   487                           ;main.c: 35: PORTBbits.RB0 = 1;
   488  07EE  1406               	bsf	6,0	;volatile
   489  07EF                     l785:
   490                           
   491                           ;main.c: 36: };main.c: 38: if(dato_rx == '0'){
   492  07EF  3030               	movlw	48
   493  07F0  0679               	xorwf	main@dato_rx,w
   494  07F1  1D03               	btfss	3,2
   495  07F2  2FBE               	goto	l771
   496                           
   497                           ;main.c: 39: UART_printf("led apagado ");
   498  07F3  3010               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   499  07F4  120A  118A  26D3  120A  118A  	fcall	_UART_printf
   500                           
   501                           ;main.c: 40: PORTBbits.RB0 = 0;
   502  07F9  1283               	bcf	3,5	;RP0=0, select bank0
   503  07FA  1006               	bcf	6,0	;volatile
   504  07FB  2FBE               	goto	l771
   505  07FC                     __end_of_main:
   506                           
   507                           	psect	text1
   508  070C                     __ptext1:	
   509 ;; *************** function _show *****************
   510 ;; Defined at:
   511 ;;		line 113 in file "lcd4.h"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  s               2    5[COMMON] PTR unsigned char 
   514 ;;		 -> RAM(512), STR_1(7), 
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : 200/0
   523 ;;		On exit  : 300/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   526 ;;      Params:         2       0       0       0       0
   527 ;;      Locals:         0       0       0       0       0
   528 ;;      Temps:          0       0       0       0       0
   529 ;;      Totals:         2       0       0       0       0
   530 ;;Total ram usage:        2 bytes
   531 ;; Hardware stack levels used:    1
   532 ;; Hardware stack levels required when called:    2
   533 ;; This function calls:
   534 ;;		_dat
   535 ;; This function is called by:
   536 ;;		_main
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           
   541                           ;psect for function _show
   542  070C                     _show:
   543  070C                     l755:	
   544                           ;lcd4.h: 116: while (*s) {
   545                           
   546                           ;incstack = 0
   547                           ; Regs used in _show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   548                           
   549  070C  0876               	movf	show@s+1,w
   550  070D  1283               	bcf	3,5	;RP0=0, select bank0
   551  070E  00FF               	movwf	127
   552  070F  0875               	movf	show@s,w
   553  0710  0084               	movwf	4
   554  0711  120A  118A  2003  120A  118A  	fcall	stringtab
   555  0716  3A00               	xorlw	0
   556  0717  1903               	btfsc	3,2
   557  0718  0008               	return
   558                           
   559                           ;lcd4.h: 118: dat(*s++);
   560  0719  0876               	movf	show@s+1,w
   561  071A  00FF               	movwf	127
   562  071B  0875               	movf	show@s,w
   563  071C  0084               	movwf	4
   564  071D  120A  118A  2003  120A  118A  	fcall	stringtab
   565  0722  120A  118A  2762  120A  118A  	fcall	_dat
   566  0727  3001               	movlw	1
   567  0728  07F5               	addwf	show@s,f
   568  0729  1803               	skipnc
   569  072A  0AF6               	incf	show@s+1,f
   570  072B  3000               	movlw	0
   571  072C  07F6               	addwf	show@s+1,f
   572  072D  2F0C               	goto	l755
   573  072E                     __end_of_show:
   574                           
   575                           	psect	text2
   576  0762                     __ptext2:	
   577 ;; *************** function _dat *****************
   578 ;; Defined at:
   579 ;;		line 82 in file "lcd4.h"
   580 ;; Parameters:    Size  Location     Type
   581 ;;  b               1    wreg     unsigned char 
   582 ;; Auto vars:     Size  Location     Type
   583 ;;  b               1    4[COMMON] unsigned char 
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, status,2, status,0, pclath, cstack
   588 ;; Tracked objects:
   589 ;;		On entry : 300/0
   590 ;;		On exit  : 300/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   593 ;;      Params:         0       0       0       0       0
   594 ;;      Locals:         1       0       0       0       0
   595 ;;      Temps:          2       0       0       0       0
   596 ;;      Totals:         3       0       0       0       0
   597 ;;Total ram usage:        3 bytes
   598 ;; Hardware stack levels used:    1
   599 ;; Hardware stack levels required when called:    1
   600 ;; This function calls:
   601 ;;		_lcd_delay
   602 ;; This function is called by:
   603 ;;		_show
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           
   608                           ;psect for function _dat
   609  0762                     _dat:
   610                           
   611                           ;incstack = 0
   612                           ; Regs used in _dat: [wreg+status,2+status,0+pclath+cstack]
   613                           ;dat@b stored from wreg
   614  0762  00F4               	movwf	dat@b
   615                           
   616                           ;lcd4.h: 85: RC0 = 1;
   617  0763  1407               	bsf	7,0	;volatile
   618                           
   619                           ;lcd4.h: 87: PORTB &= 0x0F;
   620  0764  300F               	movlw	15
   621  0765  00F2               	movwf	??_dat
   622  0766  0872               	movf	??_dat,w
   623  0767  0586               	andwf	6,f	;volatile
   624                           
   625                           ;lcd4.h: 89: PORTB |= (b & 0xf0);
   626  0768  0874               	movf	dat@b,w
   627  0769  39F0               	andlw	240
   628  076A  00F2               	movwf	??_dat
   629  076B  0872               	movf	??_dat,w
   630  076C  0486               	iorwf	6,f	;volatile
   631                           
   632                           ;lcd4.h: 91: RC1 = 1;
   633  076D  1487               	bsf	7,1	;volatile
   634                           
   635                           ;lcd4.h: 93: lcd_delay();
   636  076E  120A  118A  26C3  120A  118A  	fcall	_lcd_delay
   637                           
   638                           ;lcd4.h: 95: RC1 = 0;
   639  0773  1087               	bcf	7,1	;volatile
   640                           
   641                           ;lcd4.h: 97: lcd_delay();
   642  0774  120A  118A  26C3  120A  118A  	fcall	_lcd_delay
   643                           
   644                           ;lcd4.h: 99: PORTB &= 0x0f;
   645  0779  300F               	movlw	15
   646  077A  00F2               	movwf	??_dat
   647  077B  0872               	movf	??_dat,w
   648  077C  0586               	andwf	6,f	;volatile
   649                           
   650                           ;lcd4.h: 101: PORTB |= (b << 4 & 0xf0);
   651  077D  0874               	movf	dat@b,w
   652  077E  00F2               	movwf	??_dat
   653  077F  3003               	movlw	3
   654  0780                     u45:
   655  0780  1003               	clrc
   656  0781  0DF2               	rlf	??_dat,f
   657  0782  3EFF               	addlw	-1
   658  0783  1D03               	skipz
   659  0784  2F80               	goto	u45
   660  0785  1003               	clrc
   661  0786  0D72               	rlf	??_dat,w
   662  0787  39F0               	andlw	240
   663  0788  00F3               	movwf	??_dat+1
   664  0789  0873               	movf	??_dat+1,w
   665  078A  0486               	iorwf	6,f	;volatile
   666                           
   667                           ;lcd4.h: 103: RC1 = 1;
   668  078B  1487               	bsf	7,1	;volatile
   669                           
   670                           ;lcd4.h: 105: lcd_delay();
   671  078C  120A  118A  26C3  120A  118A  	fcall	_lcd_delay
   672                           
   673                           ;lcd4.h: 107: RC1 = 0;
   674  0791  1087               	bcf	7,1	;volatile
   675                           
   676                           ;lcd4.h: 109: lcd_delay();
   677  0792  120A  118A  26C3   	fcall	_lcd_delay
   678  0795  0008               	return
   679  0796                     __end_of_dat:
   680                           
   681                           	psect	text3
   682  06EF                     __ptext3:	
   683 ;; *************** function _lcd_init *****************
   684 ;; Defined at:
   685 ;;		line 37 in file "lcd4.h"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, status,2, status,0, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : B00/0
   696 ;;		On exit  : 300/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   699 ;;      Params:         0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0
   702 ;;      Totals:         0       0       0       0       0
   703 ;;Total ram usage:        0 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    2
   706 ;; This function calls:
   707 ;;		_cmd
   708 ;; This function is called by:
   709 ;;		_main
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           
   714                           ;psect for function _lcd_init
   715  06EF                     _lcd_init:
   716                           
   717                           ;lcd4.h: 40: cmd(0x02);
   718                           
   719                           ;incstack = 0
   720                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   721  06EF  3002               	movlw	2
   722  06F0  120A  118A  272E  120A  118A  	fcall	_cmd
   723                           
   724                           ;lcd4.h: 42: cmd(0x28);
   725  06F5  3028               	movlw	40
   726  06F6  120A  118A  272E  120A  118A  	fcall	_cmd
   727                           
   728                           ;lcd4.h: 44: cmd(0x0e);
   729  06FB  300E               	movlw	14
   730  06FC  120A  118A  272E  120A  118A  	fcall	_cmd
   731                           
   732                           ;lcd4.h: 46: cmd(0x06);
   733  0701  3006               	movlw	6
   734  0702  120A  118A  272E  120A  118A  	fcall	_cmd
   735                           
   736                           ;lcd4.h: 48: cmd(0x80);
   737  0707  3080               	movlw	128
   738  0708  120A  118A  272E   	fcall	_cmd
   739  070B  0008               	return
   740  070C                     __end_of_lcd_init:
   741                           
   742                           	psect	text4
   743  072E                     __ptext4:	
   744 ;; *************** function _cmd *****************
   745 ;; Defined at:
   746 ;;		line 52 in file "lcd4.h"
   747 ;; Parameters:    Size  Location     Type
   748 ;;  a               1    wreg     unsigned char 
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  a               1    4[COMMON] unsigned char 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0, pclath, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 300/0
   757 ;;		On exit  : 300/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         0       0       0       0       0
   761 ;;      Locals:         1       0       0       0       0
   762 ;;      Temps:          2       0       0       0       0
   763 ;;      Totals:         3       0       0       0       0
   764 ;;Total ram usage:        3 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    1
   767 ;; This function calls:
   768 ;;		_lcd_delay
   769 ;; This function is called by:
   770 ;;		_lcd_init
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _cmd
   777  072E                     _cmd:
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _cmd: [wreg+status,2+status,0+pclath+cstack]
   781                           ;cmd@a stored from wreg
   782  072E  00F4               	movwf	cmd@a
   783                           
   784                           ;lcd4.h: 55: RC0 = 0;
   785  072F  1007               	bcf	7,0	;volatile
   786                           
   787                           ;lcd4.h: 57: PORTB &= 0x0F;
   788  0730  300F               	movlw	15
   789  0731  00F2               	movwf	??_cmd
   790  0732  0872               	movf	??_cmd,w
   791  0733  0586               	andwf	6,f	;volatile
   792                           
   793                           ;lcd4.h: 59: PORTB |= (a & 0xf0);
   794  0734  0874               	movf	cmd@a,w
   795  0735  39F0               	andlw	240
   796  0736  00F2               	movwf	??_cmd
   797  0737  0872               	movf	??_cmd,w
   798  0738  0486               	iorwf	6,f	;volatile
   799                           
   800                           ;lcd4.h: 61: RC1 = 1;
   801  0739  1487               	bsf	7,1	;volatile
   802                           
   803                           ;lcd4.h: 63: lcd_delay();
   804  073A  120A  118A  26C3  120A  118A  	fcall	_lcd_delay
   805                           
   806                           ;lcd4.h: 65: RC1 = 0;
   807  073F  1087               	bcf	7,1	;volatile
   808                           
   809                           ;lcd4.h: 66: lcd_delay();
   810  0740  120A  118A  26C3  120A  118A  	fcall	_lcd_delay
   811                           
   812                           ;lcd4.h: 68: PORTB &= 0x0f;
   813  0745  300F               	movlw	15
   814  0746  00F2               	movwf	??_cmd
   815  0747  0872               	movf	??_cmd,w
   816  0748  0586               	andwf	6,f	;volatile
   817                           
   818                           ;lcd4.h: 70: PORTB |= (a << 4 & 0xf0);
   819  0749  0874               	movf	cmd@a,w
   820  074A  00F2               	movwf	??_cmd
   821  074B  3003               	movlw	3
   822  074C                     u35:
   823  074C  1003               	clrc
   824  074D  0DF2               	rlf	??_cmd,f
   825  074E  3EFF               	addlw	-1
   826  074F  1D03               	skipz
   827  0750  2F4C               	goto	u35
   828  0751  1003               	clrc
   829  0752  0D72               	rlf	??_cmd,w
   830  0753  39F0               	andlw	240
   831  0754  00F3               	movwf	??_cmd+1
   832  0755  0873               	movf	??_cmd+1,w
   833  0756  0486               	iorwf	6,f	;volatile
   834                           
   835                           ;lcd4.h: 72: RC1 = 1;
   836  0757  1487               	bsf	7,1	;volatile
   837                           
   838                           ;lcd4.h: 74: lcd_delay();
   839  0758  120A  118A  26C3  120A  118A  	fcall	_lcd_delay
   840                           
   841                           ;lcd4.h: 76: RC1 = 0;
   842  075D  1087               	bcf	7,1	;volatile
   843                           
   844                           ;lcd4.h: 78: lcd_delay();
   845  075E  120A  118A  26C3   	fcall	_lcd_delay
   846  0761  0008               	return
   847  0762                     __end_of_cmd:
   848                           
   849                           	psect	text5
   850  06C3                     __ptext5:	
   851 ;; *************** function _lcd_delay *****************
   852 ;; Defined at:
   853 ;;		line 124 in file "lcd4.h"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  lcd_delay       2    0[COMMON] unsigned int 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, status,2
   862 ;; Tracked objects:
   863 ;;		On entry : 300/0
   864 ;;		On exit  : 300/0
   865 ;;		Unchanged: 300/0
   866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   867 ;;      Params:         0       0       0       0       0
   868 ;;      Locals:         2       0       0       0       0
   869 ;;      Temps:          0       0       0       0       0
   870 ;;      Totals:         2       0       0       0       0
   871 ;;Total ram usage:        2 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_cmd
   877 ;;		_dat
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           
   882                           ;psect for function _lcd_delay
   883  06C3                     _lcd_delay:
   884                           
   885                           ;lcd4.h: 127: unsigned int lcd_delay;;lcd4.h: 129: for (lcd_delay = 0; lcd_delay <= 1000
      +                          ; lcd_delay++);
   886                           
   887                           ;incstack = 0
   888                           ; Regs used in _lcd_delay: [wreg+status,2]
   889  06C3  01F0               	clrf	lcd_delay@lcd_delay
   890  06C4  01F1               	clrf	lcd_delay@lcd_delay+1
   891  06C5                     l623:
   892  06C5  3001               	movlw	1
   893  06C6  07F0               	addwf	lcd_delay@lcd_delay,f
   894  06C7  1803               	skipnc
   895  06C8  0AF1               	incf	lcd_delay@lcd_delay+1,f
   896  06C9  3000               	movlw	0
   897  06CA  07F1               	addwf	lcd_delay@lcd_delay+1,f
   898  06CB  3003               	movlw	3
   899  06CC  0271               	subwf	lcd_delay@lcd_delay+1,w
   900  06CD  30E9               	movlw	233
   901  06CE  1903               	skipnz
   902  06CF  0270               	subwf	lcd_delay@lcd_delay,w
   903  06D0  1803               	btfsc	3,0
   904  06D1  0008               	return
   905  06D2  2EC5               	goto	l623
   906  06D3                     __end_of_lcd_delay:
   907                           
   908                           	psect	text6
   909  06A6                     __ptext6:	
   910 ;; *************** function _UART_read *****************
   911 ;; Defined at:
   912 ;;		line 22 in file "UART.h"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      unsigned char 
   919 ;; Registers used:
   920 ;;		wreg
   921 ;; Tracked objects:
   922 ;;		On entry : 200/0
   923 ;;		On exit  : 300/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   926 ;;      Params:         0       0       0       0       0
   927 ;;      Locals:         0       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0
   929 ;;      Totals:         0       0       0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_main
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           
   940                           ;psect for function _UART_read
   941  06A6                     _UART_read:
   942                           
   943                           ;UART.h: 24: if (PIR1bits.RCIF == 1)
   944                           
   945                           ;incstack = 0
   946                           ; Regs used in _UART_read: [wreg]
   947  06A6  1283               	bcf	3,5	;RP0=0, select bank0
   948  06A7  1E8C               	btfss	12,5	;volatile
   949  06A8  2EAB               	goto	l685
   950                           
   951                           ;UART.h: 25: return RCREG;
   952  06A9  081A               	movf	26,w	;volatile
   953  06AA  0008               	return
   954  06AB                     l685:
   955                           
   956                           ;UART.h: 26: else;UART.h: 27: return 0;
   957  06AB  3000               	movlw	0
   958  06AC  0008               	return
   959  06AD                     __end_of_UART_read:
   960                           
   961                           	psect	text7
   962  06D3                     __ptext7:	
   963 ;; *************** function _UART_printf *****************
   964 ;; Defined at:
   965 ;;		line 36 in file "UART.h"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  cadena          1    wreg     PTR unsigned char 
   968 ;;		 -> STR_4(13), STR_3(15), STR_2(4), 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  cadena          1    2[COMMON] PTR unsigned char 
   971 ;;		 -> STR_4(13), STR_3(15), STR_2(4), 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 300/0
   978 ;;		On exit  : 200/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   981 ;;      Params:         0       0       0       0       0
   982 ;;      Locals:         1       0       0       0       0
   983 ;;      Temps:          1       0       0       0       0
   984 ;;      Totals:         2       0       0       0       0
   985 ;;Total ram usage:        2 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    1
   988 ;; This function calls:
   989 ;;		_UART_write
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           
   996                           ;psect for function _UART_printf
   997  06D3                     _UART_printf:
   998                           
   999                           ;incstack = 0
  1000                           ; Regs used in _UART_printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1001                           ;UART_printf@cadena stored from wreg
  1002  06D3  00F2               	movwf	UART_printf@cadena
  1003  06D4                     l747:	
  1004                           ;UART.h: 38: while(*cadena !=0x00){
  1005                           
  1006  06D4  0872               	movf	UART_printf@cadena,w
  1007  06D5  0084               	movwf	4
  1008  06D6  120A  118A  200D  120A  118A  	fcall	stringdir
  1009  06DB  3A00               	xorlw	0
  1010  06DC  1903               	btfsc	3,2
  1011  06DD  0008               	return
  1012                           
  1013                           ;UART.h: 39: UART_write(*cadena);
  1014  06DE  0872               	movf	UART_printf@cadena,w
  1015  06DF  0084               	movwf	4
  1016  06E0  120A  118A  200D  120A  118A  	fcall	stringdir
  1017  06E5  120A  118A  26AD  120A  118A  	fcall	_UART_write
  1018                           
  1019                           ;UART.h: 40: cadena++;
  1020  06EA  3001               	movlw	1
  1021  06EB  00F1               	movwf	??_UART_printf
  1022  06EC  0871               	movf	??_UART_printf,w
  1023  06ED  07F2               	addwf	UART_printf@cadena,f
  1024  06EE  2ED4               	goto	l747
  1025  06EF                     __end_of_UART_printf:
  1026                           
  1027                           	psect	text8
  1028  06AD                     __ptext8:	
  1029 ;; *************** function _UART_write *****************
  1030 ;; Defined at:
  1031 ;;		line 30 in file "UART.h"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  dato            1    wreg     unsigned char 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  dato            1    0[COMMON] unsigned char 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg
  1040 ;; Tracked objects:
  1041 ;;		On entry : 200/0
  1042 ;;		On exit  : 300/100
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1045 ;;      Params:         0       0       0       0       0
  1046 ;;      Locals:         1       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0
  1048 ;;      Totals:         1       0       0       0       0
  1049 ;;Total ram usage:        1 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_UART_printf
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           
  1059                           ;psect for function _UART_write
  1060  06AD                     _UART_write:
  1061                           
  1062                           ;incstack = 0
  1063                           ; Regs used in _UART_write: [wreg]
  1064                           ;UART_write@dato stored from wreg
  1065  06AD  00F0               	movwf	UART_write@dato
  1066                           
  1067                           ;UART.h: 32: TXREG = dato;
  1068  06AE  0870               	movf	UART_write@dato,w
  1069  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  1070  06B0  0099               	movwf	25	;volatile
  1071  06B1                     l47:	
  1072                           ;UART.h: 33: while(TXSTAbits.TRMT == 0);
  1073                           
  1074  06B1  1683               	bsf	3,5	;RP0=1, select bank1
  1075  06B2  1898               	btfsc	24,1	;volatile
  1076  06B3  0008               	return
  1077  06B4  2EB1               	goto	l47
  1078  06B5                     __end_of_UART_write:
  1079                           
  1080                           	psect	text9
  1081  06B5                     __ptext9:	
  1082 ;; *************** function _UART_init *****************
  1083 ;; Defined at:
  1084 ;;		line 8 in file "UART.h"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;		None
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg
  1093 ;; Tracked objects:
  1094 ;;		On entry : B00/100
  1095 ;;		On exit  : B00/0
  1096 ;;		Unchanged: 800/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1098 ;;      Params:         0       0       0       0       0
  1099 ;;      Locals:         0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0
  1101 ;;      Totals:         0       0       0       0       0
  1102 ;;Total ram usage:        0 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_main
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           
  1112                           ;psect for function _UART_init
  1113  06B5                     _UART_init:
  1114                           
  1115                           ;UART.h: 10: TRISCbits.TRISC7 = 1;
  1116                           
  1117                           ;incstack = 0
  1118                           ; Regs used in _UART_init: [wreg]
  1119  06B5  1787               	bsf	7,7	;volatile
  1120                           
  1121                           ;UART.h: 11: TRISCbits.TRISC6 = 0;
  1122  06B6  1307               	bcf	7,6	;volatile
  1123                           
  1124                           ;UART.h: 13: TXSTAbits.SYNC = 0;
  1125  06B7  1218               	bcf	24,4	;volatile
  1126                           
  1127                           ;UART.h: 14: TXSTAbits.TX9 = 0;
  1128  06B8  1318               	bcf	24,6	;volatile
  1129                           
  1130                           ;UART.h: 15: TXSTAbits.BRGH = 1;
  1131  06B9  1518               	bsf	24,2	;volatile
  1132                           
  1133                           ;UART.h: 16: SPBRG = 129;
  1134  06BA  3081               	movlw	129
  1135  06BB  0099               	movwf	25	;volatile
  1136                           
  1137                           ;UART.h: 17: RCSTAbits.SPEN = 1;
  1138  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1139  06BD  1798               	bsf	24,7	;volatile
  1140                           
  1141                           ;UART.h: 18: TXSTAbits.TXEN = 1;
  1142  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  1143  06BF  1698               	bsf	24,5	;volatile
  1144                           
  1145                           ;UART.h: 19: RCSTAbits.CREN = 1;
  1146  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1147  06C1  1618               	bsf	24,4	;volatile
  1148  06C2  0008               	return
  1149  06C3                     __end_of_UART_init:
  1150  007E                     btemp	set	126	;btemp
  1151  007E                     wtemp0	set	126

Data Sizes:
    Strings     39
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    show@s	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), STR_1(CODE[7]), 

    UART_printf@cadena	PTR unsigned char  size(1) Largest target is 15
		 -> STR_4(CODE[13]), STR_3(CODE[15]), STR_2(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_show
    _show->_dat
    _dat->_lcd_delay
    _lcd_init->_cmd
    _cmd->_lcd_delay
    _UART_printf->_UART_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     614
                                              7 COMMON     3     3      0
                          _UART_init
                        _UART_printf
                          _UART_read
                                _cmd
                           _lcd_init
                               _show
 ---------------------------------------------------------------------------------
 (1) _show                                                 2     0      2     264
                                              5 COMMON     2     0      2
                                _dat
 ---------------------------------------------------------------------------------
 (2) _dat                                                  3     3      0      60
                                              2 COMMON     3     3      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      60
                                _cmd
 ---------------------------------------------------------------------------------
 (2) _cmd                                                  3     3      0      60
                                              2 COMMON     3     3      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (3) _lcd_delay                                            2     2      0      30
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_printf                                          2     2      0     141
                                              1 COMMON     2     2      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
   _UART_printf
     _UART_write
   _UART_read
   _cmd
     _lcd_delay
   _lcd_init
     _cmd
       _lcd_delay
   _show
     _dat
       _lcd_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Dec 03 16:52:53 2020

                      pc 0002                       l47 06B1                       u35 074C  
                     u45 0780                       fsr 0004                      l623 06C5  
                    l747 06D4                      l755 070C                      l771 07BE  
                    l685 06AB                      l785 07EF                      _RC0 0038  
                    _RC1 0039                      _dat 0762                      _cmd 072E  
                    fsr0 0004                      indf 0000              main@dato_rx 0079  
                   ?_dat 0070                     ?_cmd 0070                     STR_1 002F  
                   STR_2 0036                     STR_3 0013                     STR_4 0022  
                   dat@b 0074                     cmd@a 0074                     _main 0796  
                   _show 070C                     btemp 007E                     start 0000  
                  ??_dat 0072                    ??_cmd 0072                    ?_main 0070  
                  ?_show 0075                    _RCREG 001A                    _SPBRG 0099  
                  _PORTB 0006                    _TRISB 0086                    _TXREG 0019  
     __size_of_UART_init 000E       __size_of_UART_read 0007              ?_UART_write 0070  
                  pclath 000A                    show@s 0075                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
           __end_of_show 072E       lcd_delay@lcd_delay 0070                   ??_main 0077  
                 ??_show 0077                   _TRISB0 0430                   _TRISC0 0438  
                 _TRISC1 0439         __end_of_lcd_init 070C        __end_of_UART_init 06C3  
      __end_of_UART_read 06AD      __size_of_UART_write 0008             ?_UART_printf 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070       __size_of_lcd_delay 0010  
             __pmaintext 0796             ??_UART_write 0070                ?_lcd_init 0070  
             __stringtab 0003        __end_of_lcd_delay 06D3       __end_of_UART_write 06B5  
                __ptext1 070C                  __ptext2 0762                  __ptext3 06EF  
                __ptext4 072E                  __ptext5 06C3                  __ptext6 06A6  
                __ptext7 06D3                  __ptext8 06AD                  __ptext9 06B5  
   __size_of_UART_printf 001C             __size_of_dat 0034             __size_of_cmd 0034  
             ??_lcd_init 0075     end_of_initialization 07FC                _RCSTAbits 0018  
              _PORTBbits 0006                _UART_init 06B5                _UART_read 06A6  
              _TRISBbits 0086                _TRISCbits 0087                _TXSTAbits 0098  
             ?_UART_init 0070               ?_UART_read 0070      start_initialization 07FC  
            __end_of_dat 0796              __end_of_cmd 0762                ___latbits 0002  
      __size_of_lcd_init 001D        UART_printf@cadena 0072                _lcd_delay 06C3  
              __pstrings 0003              ??_UART_init 0070              ??_UART_read 0070  
               _PIR1bits 000C            ??_UART_printf 0071               ?_lcd_delay 0070  
            __stringbase 0012           UART_write@dato 0070       __end_of__stringtab 0013  
    __end_of_UART_printf 06EF                 _lcd_init 06EF            __size_of_main 0066  
          __size_of_show 0022              ??_lcd_delay 0070                stringcode 000D  
            _UART_printf 06D3                 stringdir 000D                 stringtab 0003  
             _UART_write 06AD  
