CCS PCM C Compiler, Version 4.107, 25533               27-Oct-15 22:51

               Filename: D:\Project CCS\lm335_7seg\main.lst

               ROM used: 1077 words (13%)
                         Largest free fragment is 2048
               RAM used: 25 (7%) at main() level
                         41 (11%) worst case
               Stack:    4 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3A1
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device 16f877a*16ADC=10 
.................... #include <def_877a.h> 
.................... #define W 0 
.................... #define F 1 
....................  
.................... //----- Register Files------------------------------------------------------ 
....................  
.................... #byte INDF =0x00 
.................... #byte TMR0 =0x01  
.................... #byte PCL =0x02  
.................... #byte STATUS =0x03  
.................... #byte FSR =0x04  
.................... #byte PORTA =0x05  
.................... #byte PORTB =0x06  
.................... #byte PORTC =0x07 
....................  
.................... #byte PCLATH =0x0A  
.................... #byte PIR1 =0x0C 
.................... #byte PIR2 =0x0D 
....................  
.................... #byte TMR1L =0x0E 
.................... #byte TMR1H =0x0F 
.................... #byte T1CON =0x10 
.................... #byte TMR2 =0x11 
.................... #byte T2CON =0x12 
....................  
.................... #byte SSPCON =0x14 
.................... #byte CCPR1L =0x15 
.................... #byte CCPR1H =0x16 
.................... #byte CCP1CON =0x17 
.................... #byte RCSTA =0x18 
.................... #byte TXREG =0x19 
.................... #byte RCREG =0x1A 
.................... #byte CCPR2L =0x1B 
.................... #byte CCPR2H =0x1C 
.................... #byte CCP2CON =0x1D  
....................  
.................... #byte ADRESH =0x1E 
.................... #byte ADCON0 =0x1F 
....................  
.................... /* bank 1 registers */ 
....................  
.................... #byte OPTION_REG =0x81 
....................  
.................... #byte TRISA =0x85 
.................... #byte TRISB =0x86 
.................... #byte TRISC =0x87 
....................  
.................... #byte PIE1 =0x8C 
.................... #byte PIE2 =0x8D 
.................... #byte PCON =0x8E 
....................  
.................... #byte SSPCON2 =0x91 
.................... #byte PR2 =0x92 
.................... #byte SSPADD =0x93 
.................... #byte SSPSTAT =0x94 
....................  
.................... #byte TXSTA =0x98 
.................... #byte SPBRG =0x99 
....................  
.................... #byte ADRESL =0x9E 
.................... #byte ADCON1 =0x9F 
....................  
.................... /* bank 2 registers */ 
....................  
.................... #byte EEDATA =0x010C 
.................... #byte EEADR =0x010D 
.................... #byte EEDATH =0x010E 
.................... #byte EEADRH =0x010F 
....................  
.................... /* bank 3 registers */ 
....................  
.................... #byte EECON1 =0x018C 
.................... #byte EECON2 =0x018D 
....................  
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 7 
.................... #define RP1 6 
.................... #define RP0 5 
.................... #define NOT_TO 4 
.................... #define NOT_PD 3 
.................... #define Z 2 
.................... #define DC 1 
.................... #define C 0 
....................  
.................... //----- INTCON Bits for c -------------------------------------------------------- 
....................  
.................... #bit gie = 0x0b.7 
.................... #bit eeie = 0x0b.6 
.................... #bit t0ie = 0x0b.5 
.................... #bit inte = 0x0b.4 
.................... #bit rbie = 0x0b.3 
.................... #bit t0if = 0x0b.2 
.................... #bit intf = 0x0b.1 
.................... #bit rbif = 0x0b.0 
....................  
.................... //---------PORTA bits------------------ 
.................... #bit ra5 =0x05.5 
.................... #bit ra4 =0x05.4 
.................... #bit ra3 =0x05.3 
.................... #bit ra2 =0x05.2 
.................... #bit ra1 =0x05.1 
.................... #bit ra0 =0x05.0 
....................  
.................... //---------PORTB bits------------------ 
.................... #bit rb7 =0x06.7 
.................... #bit rb6 =0x06.6 
.................... #bit rb5 =0x06.5 
.................... #bit rb4 =0x06.4 
.................... #bit rb3 =0x06.3 
.................... #bit rb2 =0x06.2 
.................... #bit rb1 =0x06.1 
.................... #bit rb0 =0x06.0 
....................  
.................... //---------PORTC bits------------------ 
.................... #bit rc7 =0x07.7 
.................... #bit rc6 =0x07.6 
.................... #bit rc5 =0x07.5 
.................... #bit rc4 =0x07.4 
.................... #bit rc3 =0x07.3 
.................... #bit rc2 =0x07.2 
.................... #bit rc1 =0x07.1 
.................... #bit rc0 =0x07.0 
....................  
.................... //----- PIR1 Bits ---------------------------------------------------------- 
.................... #bit PSPIF =0x0C.7 
.................... #bit ADIF =0x0C.6 
.................... #bit RCIF =0x0C.5 
.................... #bit TXIF =0x0C.4 
.................... #bit SSPIF =0x0C.3 
.................... #bit CCP1IF =0x0C.2 
.................... #bit TMR2IF =0x0C.1 
.................... #bit TMR1IF =0x0C.0 
....................  
.................... //----- PIR2 Bits ---------------------------------------------------------- 
.................... #bit CMIF =0x0D.6 
.................... #bit EEIF =0x0D.4 
.................... #bit BCLIF =0x0D.3 
.................... #bit CCP2IF =0x0D.0 
....................  
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1 =0x10.5 
.................... #bit T1CKPS0 =0x10.4 
.................... #bit T1OSCEN =0x10.3 
.................... #bit T1SYNC =0x10.2 
.................... #bit TMR1CS =0x10.1 
.................... #bit TMR1ON =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3 =0x12.6 
.................... #bit TOUTPS2 =0x12.5 
.................... #bit TOUTPS1 =0x12.4 
.................... #bit TOUTPS0 =0x12.3 
.................... #bit TMR2ON =0x12.2 
.................... #bit T2CKPS1 =0x12.1 
.................... #bit T2CKPS0 =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL =0x14.7 
.................... #bit SSPOV =0x14.6 
.................... #bit SSPEN =0x14.5  
.................... #bit CKP =0x14.4 
.................... #bit SSPM3 =0x14.3 
.................... #bit SSPM2 =0x14.2 
.................... #bit SSPM1 =0x14.1 
.................... #bit SSPM0 =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X =0x17.5 
.................... #bit CCP1Y =0x17.4 
.................... #bit CCP1M3 =0x17.3 
.................... #bit CCP1M2 =0x17.2 
.................... #bit CCP1M1 =0x17.1 
.................... #bit CCP1M0 =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN =0x18.7 
.................... #bit RX9 =0x18.6 
.................... #bit SREN =0x18.5 
.................... #bit CREN =0x18.4 
.................... #bit ADDEN =0x18.3 
.................... #bit FERR =0x18.2 
.................... #bit OERR =0x18.1 
.................... #bit RX9D =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X =0x1D.5 
.................... #bit CCP2Y =0x1D.4 
.................... #bit CCP2M3 =0x1D.3 
.................... #bit CCP2M2 =0x1D.2 
.................... #bit CCP2M1 =0x1D.1 
.................... #bit CCP2M0 =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1 =0x1F.7 
.................... #bit ADCS0 =0x1F.6 
.................... #bit CHS2 =0x1F.5  
.................... #bit CHS1 =0x1F.4 
.................... #bit CHS0 =0x1F.3 
.................... #bit ADGO =0x1F.2 
.................... #bit ADON =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU =0x81.7  
.................... #bit INTEDG =0x81.6  
.................... #bit T0CS =0x81.5  
.................... #bit T0SE =0x81.4  
.................... #bit PSA =0x81.3  
.................... #bit PS2 =0x81.2  
.................... #bit PS1 =0x81.1  
.................... #bit PS0 =0x81.0  
....................  
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5 =0x85.5 
.................... #bit TRISA4 =0x85.4 
.................... #bit TRISA3 =0x85.3 
.................... #bit TRISA2 =0x85.2 
.................... #bit TRISA1 =0x85.1  
.................... #bit TRISA0 =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7 =0x86.7 
.................... #bit TRISB6 =0x86.6  
.................... #bit TRISB5 =0x86.5 
.................... #bit TRISB4 =0x86.4  
.................... #bit TRISB3 =0x86.3 
.................... #bit TRISB2 =0x86.2 
.................... #bit TRISB1 =0x86.1  
.................... #bit TRISB0 =0x86.0  
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7 =0x87.7 
.................... #bit TRISC6 =0x87.6 
.................... #bit TRISC5 =0x87.5  
.................... #bit TRISC4 =0x87.4 
.................... #bit TRISC3 =0x87.3 
.................... #bit TRISC2 =0x87.2  
.................... #bit TRISC1 =0x87.1 
.................... #bit TRISC0 =0x87.0 
....................  
.................... //----- PIE1 Bits ---------------------------------------------------------- 
....................  
.................... #bit PSPIE =0x8C.7 
.................... #bit ADIE =0x8C.6 
.................... #bit RCIE =0x8C.5  
.................... #bit TXIE =0x8C.4  
.................... #bit SSPIE =0x8C.3 
.................... #bit CCP1IE =0x8C.2  
.................... #bit TMR2IE =0x8C.1 
.................... #bit TMR1IE =0x8C.0 
....................  
.................... //----- PIE2 Bits ----------------------------------------------------- 
....................  
.................... #bit CMIE =0x8D.6 
.................... #bit EEIE =0x8D.4 
.................... #bit BCLIE =0x8D.3 
.................... #bit CCP2IE =0x8D.0 
....................  
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR =0x8E.1 
.................... #bit BOD =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN =0x91.7 
.................... #bit ACKSTAT =0x91.6 
.................... #bit ACKDT =0x91.5  
.................... #bit ACKEN =0x91.4 
.................... #bit RCEN =0x91.3  
.................... #bit PEN =0x91.2 
.................... #bit RSEN =0x91.1 
.................... #bit SEN =0x91.0  
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP =0x94.7 
.................... #bit STAT_CKE =0x94.6 
.................... #bit STAT_DA =0x94.5 
.................... #bit STAT_P =0x94.4 
.................... #bit STAT_S =0x94.3 
.................... #bit STAT_RW =0x94.2 
.................... #bit STAT_UA =0x94.1 
.................... #bit STAT_BF =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC =0x98.7 
.................... #bit TX9 =0x98.6 
.................... #bit TXEN =0x98.5  
.................... #bit SYNC =0x98.4 
.................... #bit BRGH =0x98.2 
.................... #bit TRMT =0x98.1 
.................... #bit TX9D =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM =0x9F.7 
.................... #bit ADCS2 =0x9F.6 
.................... #bit PCFG3 =0x9F.3 
.................... #bit PCFG2 =0x9F.2 
.................... #bit PCFG1 =0x9F.1  
.................... #bit PCFG0 =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD =0x018C.7 
.................... #bit WRERR =0x018C.3 
.................... #bit WREN =0x018C.2  
.................... #bit WR =0x018C.1 
.................... #bit RD =0x018C.0 
....................  
.................... #use delay(clock=4000000) 
*
0025:  MOVLW  32
0026:  MOVWF  04
0027:  BCF    03.7
0028:  MOVF   00,W
0029:  BTFSC  03.2
002A:  GOTO   039
002B:  MOVLW  01
002C:  MOVWF  78
002D:  CLRF   77
002E:  DECFSZ 77,F
002F:  GOTO   02E
0030:  DECFSZ 78,F
0031:  GOTO   02D
0032:  MOVLW  4A
0033:  MOVWF  77
0034:  DECFSZ 77,F
0035:  GOTO   034
0036:  GOTO   037
0037:  DECFSZ 00,F
0038:  GOTO   02B
0039:  RETURN
.................... #include <lcd_lib_4bit.c> 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... #define LCD_RS PIN_D2 
.................... //#define LCD_RW PIN_A1 
.................... #define LCD_EN PIN_D3 
....................  
.................... #define LCD_D4 PIN_D4 
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7 
....................  
.................... // misc display defines- 
.................... #define Line_1 0x80 
.................... #define Line_2 0xC0 
.................... #define Clear_Scr 0x01 
....................  
.................... // prototype statements 
.................... #separate void LCD_Init ( void );// ham khoi tao LCD 
.................... #separate void LCD_SetPosition ( unsigned int cX );//Thiet lap vi tri con tro 
.................... #separate void LCD_PutChar ( unsigned int cX );// Ham viet1kitu/1chuoi len LCD 
.................... #separate void LCD_PutCmd ( unsigned int cX) ;// Ham gui lenh len LCD 
.................... #separate void LCD_PulseEnable ( void );// Xung kich hoat 
.................... #separate void LCD_SetData ( unsigned int cX );// Dat du lieu len chan Data 
.................... // D/n Cong 
.................... #use standard_io ( B ) 
.................... #use standard_io (A) 
....................  
.................... //khoi tao LCD********************************************** 
.................... #separate void LCD_Init ( void ) 
.................... { 
.................... LCD_SetData ( 0x00 ); 
*
0053:  CLRF   31
0054:  CALL   004
.................... delay_ms(200);  
0055:  MOVLW  C8
0056:  MOVWF  32
0057:  CALL   025
.................... output_low ( LCD_RS );// che do gui lenh 
0058:  BSF    03.5
0059:  BCF    08.2
005A:  BCF    03.5
005B:  BCF    08.2
.................... LCD_SetData ( 0x03 );  
005C:  MOVLW  03
005D:  MOVWF  31
005E:  CALL   004
.................... LCD_PulseEnable(); 
005F:  CALL   03A
.................... LCD_PulseEnable(); 
0060:  CALL   03A
.................... LCD_PulseEnable(); 
0061:  CALL   03A
.................... LCD_SetData ( 0x02 );  
0062:  MOVLW  02
0063:  MOVWF  31
0064:  CALL   004
.................... LCD_PulseEnable();  
0065:  CALL   03A
.................... LCD_PutCmd ( 0x2C );  
0066:  MOVLW  2C
0067:  MOVWF  30
0068:  CALL   048
.................... LCD_PutCmd ( 0b00001100);  
0069:  MOVLW  0C
006A:  MOVWF  30
006B:  CALL   048
.................... LCD_PutCmd ( 0x06 );  
006C:  MOVLW  06
006D:  MOVWF  30
006E:  CALL   048
.................... LCD_PutCmd ( 0x01 );  
006F:  MOVLW  01
0070:  MOVWF  30
0071:  CALL   048
.................... } 
0072:  BCF    0A.3
0073:  BCF    0A.4
0074:  GOTO   3C2 (RETURN)
....................  
.................... #separate void LCD_SetPosition ( unsigned int cX ) 
.................... { 
.................... /* this subroutine works specifically for 4-bit Port A */ 
.................... LCD_SetData ( swap ( cX ) | 0x08 ); 
.................... LCD_PulseEnable(); 
.................... LCD_SetData ( swap ( cX ) ); 
.................... LCD_PulseEnable(); 
.................... } 
....................  
.................... #separate void LCD_PutChar ( unsigned int cX ) 
.................... { 
.................... /* this subroutine works specifically for 4-bit Port A */ 
.................... output_high ( LCD_RS ); 
.................... LCD_PutCmd( cX ); 
.................... output_low ( LCD_RS ); 
.................... } 
....................  
.................... #separate void LCD_PutCmd ( unsigned int cX ) 
.................... { 
.................... /* this subroutine works specifically for 4-bit Port A */ 
.................... LCD_SetData ( swap ( cX ) ); /* send high nibble */ 
*
0048:  SWAPF  30,F
0049:  MOVF   30,W
004A:  MOVWF  31
004B:  CALL   004
.................... LCD_PulseEnable(); 
004C:  CALL   03A
.................... LCD_SetData ( swap ( cX ) ); /* send low nibble */ 
004D:  SWAPF  30,F
004E:  MOVF   30,W
004F:  MOVWF  31
0050:  CALL   004
.................... LCD_PulseEnable(); 
0051:  CALL   03A
.................... } 
0052:  RETURN
.................... #separate void LCD_PulseEnable ( void ) 
.................... { 
.................... output_high ( LCD_EN ); 
*
003A:  BSF    03.5
003B:  BCF    08.3
003C:  BCF    03.5
003D:  BSF    08.3
.................... delay_us ( 3 ); // was 10 
003E:  GOTO   03F
003F:  NOP
.................... output_low ( LCD_EN ); 
0040:  BSF    03.5
0041:  BCF    08.3
0042:  BCF    03.5
0043:  BCF    08.3
.................... delay_ms ( 3 ); // was 5 
0044:  MOVLW  03
0045:  MOVWF  32
0046:  CALL   025
.................... } 
0047:  RETURN
....................  
.................... #separate void LCD_SetData ( unsigned int cX ) 
.................... { 
.................... output_bit ( LCD_D4, cX & 0x01 ); 
*
0004:  BTFSC  31.0
0005:  GOTO   008
0006:  BCF    08.4
0007:  GOTO   009
0008:  BSF    08.4
0009:  BSF    03.5
000A:  BCF    08.4
.................... output_bit ( LCD_D5, cX & 0x02 ); 
000B:  BCF    03.5
000C:  BTFSC  31.1
000D:  GOTO   010
000E:  BCF    08.5
000F:  GOTO   011
0010:  BSF    08.5
0011:  BSF    03.5
0012:  BCF    08.5
.................... output_bit ( LCD_D6, cX & 0x04 ); 
0013:  BCF    03.5
0014:  BTFSC  31.2
0015:  GOTO   018
0016:  BCF    08.6
0017:  GOTO   019
0018:  BSF    08.6
0019:  BSF    03.5
001A:  BCF    08.6
.................... output_bit ( LCD_D7, cX & 0x08 ); 
001B:  BCF    03.5
001C:  BTFSC  31.3
001D:  GOTO   020
001E:  BCF    08.7
001F:  GOTO   021
0020:  BSF    08.7
0021:  BSF    03.5
0022:  BCF    08.7
.................... } 
0023:  BCF    03.5
0024:  RETURN
....................  
.................... #bit led1 =portc.1 
.................... #bit led2 =portc.2 
.................... #bit led3 =portc.3 
.................... #bit led4 =portc.4 
.................... int maled[10]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
*
03AC:  MOVLW  C0
03AD:  BCF    03.5
03AE:  MOVWF  20
03AF:  MOVLW  F9
03B0:  MOVWF  21
03B1:  MOVLW  A4
03B2:  MOVWF  22
03B3:  MOVLW  B0
03B4:  MOVWF  23
03B5:  MOVLW  99
03B6:  MOVWF  24
03B7:  MOVLW  92
03B8:  MOVWF  25
03B9:  MOVLW  82
03BA:  MOVWF  26
03BB:  MOVLW  F8
03BC:  MOVWF  27
03BD:  MOVLW  80
03BE:  MOVWF  28
03BF:  MOVLW  90
03C0:  MOVWF  29
.................... float x; 
.................... int chuc,donvi; 
.................... void docADC(); 
.................... void hienthi(unsigned int x); 
.................... void main() 
.................... { 
*
03A1:  CLRF   04
03A2:  BCF    03.7
03A3:  MOVLW  1F
03A4:  ANDWF  03,F
03A5:  BSF    03.5
03A6:  BSF    1F.0
03A7:  BSF    1F.1
03A8:  BSF    1F.2
03A9:  BCF    1F.3
03AA:  MOVLW  07
03AB:  MOVWF  1C
.................... LCD_Init(); 
*
03C1:  GOTO   053
.................... trisa=0x01; 
03C2:  MOVLW  01
03C3:  BSF    03.5
03C4:  MOVWF  05
.................... trisc=0x00; 
03C5:  CLRF   07
.................... trisb=0x00; 
03C6:  CLRF   06
.................... portc=0x00; 
03C7:  BCF    03.5
03C8:  CLRF   07
.................... while(true) 
.................... { 
.................... hienthi(x); 
03C9:  MOVF   2D,W
03CA:  MOVWF  33
03CB:  MOVF   2C,W
03CC:  MOVWF  32
03CD:  MOVF   2B,W
03CE:  MOVWF  31
03CF:  MOVF   2A,W
03D0:  MOVWF  30
03D1:  GOTO   075
03D2:  MOVF   78,W
03D3:  MOVWF  30
03D4:  MOVWF  31
03D5:  GOTO   0AB
.................... docADC(); 
03D6:  GOTO   0E0
.................... x=read_ADC(); 
03D7:  BSF    1F.2
03D8:  BTFSC  1F.2
03D9:  GOTO   3D8
03DA:  MOVF   1E,W
03DB:  MOVWF  7A
03DC:  BSF    03.5
03DD:  MOVF   1E,W
03DE:  BCF    03.5
03DF:  MOVWF  30
03E0:  MOVF   1E,W
03E1:  MOVWF  31
03E2:  GOTO   0FC
03E3:  MOVF   7A,W
03E4:  MOVWF  2D
03E5:  MOVF   79,W
03E6:  MOVWF  2C
03E7:  MOVF   78,W
03E8:  MOVWF  2B
03E9:  MOVF   77,W
03EA:  MOVWF  2A
.................... x = ((5000.0f/1023*x)/10) - 273; 
03EB:  MOVLW  1A
03EC:  MOVWF  33
03ED:  MOVLW  67
03EE:  MOVWF  32
03EF:  MOVLW  1C
03F0:  MOVWF  31
03F1:  MOVLW  81
03F2:  MOVWF  30
03F3:  MOVF   2D,W
03F4:  MOVWF  37
03F5:  MOVF   2C,W
03F6:  MOVWF  36
03F7:  MOVF   2B,W
03F8:  MOVWF  35
03F9:  MOVF   2A,W
03FA:  MOVWF  34
03FB:  GOTO   11B
03FC:  MOVF   77,W
03FD:  MOVWF  30
03FE:  MOVF   78,W
03FF:  MOVWF  31
0400:  MOVF   79,W
0401:  MOVWF  32
0402:  MOVF   7A,W
0403:  MOVWF  33
0404:  MOVWF  37
0405:  MOVF   79,W
0406:  MOVWF  36
0407:  MOVF   78,W
0408:  MOVWF  35
0409:  MOVF   77,W
040A:  MOVWF  34
040B:  CLRF   3B
040C:  CLRF   3A
040D:  MOVLW  20
040E:  MOVWF  39
040F:  MOVLW  82
0410:  MOVWF  38
0411:  GOTO   192
0412:  MOVF   77,W
0413:  MOVWF  30
0414:  MOVF   78,W
0415:  MOVWF  31
0416:  MOVF   79,W
0417:  MOVWF  32
0418:  MOVF   7A,W
0419:  MOVWF  33
041A:  BSF    03.1
041B:  MOVF   7A,W
041C:  MOVWF  37
041D:  MOVF   79,W
041E:  MOVWF  36
041F:  MOVF   78,W
0420:  MOVWF  35
0421:  MOVF   77,W
0422:  MOVWF  34
0423:  CLRF   3B
0424:  MOVLW  80
0425:  MOVWF  3A
0426:  MOVLW  08
0427:  MOVWF  39
0428:  MOVLW  87
0429:  MOVWF  38
042A:  GOTO   25E
042B:  MOVF   7A,W
042C:  MOVWF  2D
042D:  MOVF   79,W
042E:  MOVWF  2C
042F:  MOVF   78,W
0430:  MOVWF  2B
0431:  MOVF   77,W
0432:  MOVWF  2A
....................  
.................... } 
0433:  GOTO   3C9
.................... } 
.................... void docADC() 
.................... { 
0434:  SLEEP
.................... setup_ADC(ADC_clock_internal); 
*
00E0:  BSF    03.5
00E1:  BCF    1F.6
00E2:  BCF    03.5
00E3:  BSF    1F.6
00E4:  BSF    1F.7
00E5:  BSF    03.5
00E6:  BSF    1F.7
00E7:  BCF    03.5
00E8:  BSF    1F.0
.................... setup_ADC_ports(AN0); 
00E9:  BSF    03.5
00EA:  BCF    1F.0
00EB:  BSF    1F.1
00EC:  BSF    1F.2
00ED:  BSF    1F.3
.................... set_ADC_channel(0); 
00EE:  MOVLW  00
00EF:  MOVWF  78
00F0:  BCF    03.5
00F1:  MOVF   1F,W
00F2:  ANDLW  C7
00F3:  IORWF  78,W
00F4:  MOVWF  1F
.................... delay_us(100); 
00F5:  MOVLW  21
00F6:  MOVWF  77
00F7:  DECFSZ 77,F
00F8:  GOTO   0F7
.................... } 
00F9:  BCF    0A.3
00FA:  BCF    0A.4
00FB:  GOTO   3D7 (RETURN)
.................... void hienthi(unsigned int x) 
.................... { 
....................  
.................... chuc=x/10; 
*
00AB:  MOVF   31,W
00AC:  MOVWF  32
00AD:  MOVLW  0A
00AE:  MOVWF  33
00AF:  CALL   096
00B0:  MOVF   78,W
00B1:  MOVWF  2E
.................... donvi=x%10; 
00B2:  MOVF   31,W
00B3:  MOVWF  32
00B4:  MOVLW  0A
00B5:  MOVWF  33
00B6:  CALL   096
00B7:  MOVF   77,W
00B8:  MOVWF  2F
....................  
.................... portb=maled[chuc]; 
00B9:  MOVLW  20
00BA:  ADDWF  2E,W
00BB:  MOVWF  04
00BC:  BCF    03.7
00BD:  MOVF   00,W
00BE:  MOVWF  06
.................... led2=0; 
00BF:  BCF    07.2
.................... delay_ms(1); 
00C0:  MOVLW  01
00C1:  MOVWF  32
00C2:  CALL   025
.................... led2=1; 
00C3:  BSF    07.2
....................  
.................... portb=maled[donvi]; 
00C4:  MOVLW  20
00C5:  ADDWF  2F,W
00C6:  MOVWF  04
00C7:  BCF    03.7
00C8:  MOVF   00,W
00C9:  MOVWF  06
.................... led1=0; 
00CA:  BCF    07.1
.................... delay_ms(1); 
00CB:  MOVLW  01
00CC:  MOVWF  32
00CD:  CALL   025
.................... led1=1; 
00CE:  BSF    07.1
....................  
.................... portb=0x9C; 
00CF:  MOVLW  9C
00D0:  MOVWF  06
.................... led3=0; 
00D1:  BCF    07.3
.................... delay_ms(1); 
00D2:  MOVLW  01
00D3:  MOVWF  32
00D4:  CALL   025
.................... led3=1; 
00D5:  BSF    07.3
....................  
.................... portb=0xC6; 
00D6:  MOVLW  C6
00D7:  MOVWF  06
.................... led4=0; 
00D8:  BCF    07.4
.................... delay_ms(1); 
00D9:  MOVLW  01
00DA:  MOVWF  32
00DB:  CALL   025
.................... led4=1; 
00DC:  BSF    07.4
.................... } 
00DD:  BCF    0A.3
00DE:  BCF    0A.4
00DF:  GOTO   3D6 (RETURN)

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
