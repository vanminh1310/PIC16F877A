

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Nov 21 22:19:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  0007                     	;# 
    29  0008                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  000E                     	;# 
    37  000F                     	;# 
    38  0010                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0014                     	;# 
    43  0015                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  0018                     	;# 
    48  0019                     	;# 
    49  001A                     	;# 
    50  001B                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  001D                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  0081                     	;# 
    57  0085                     	;# 
    58  0086                     	;# 
    59  0087                     	;# 
    60  0088                     	;# 
    61  0089                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0094                     	;# 
    69  0098                     	;# 
    70  0099                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010D                     	;# 
    77  010E                     	;# 
    78  010F                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81                           
    82                           	psect	strings
    83  0003                     __pstrings:	
    84  0003                     stringtab:	
    85  0003                     __stringtab:	
    86                           
    87                           ;	String table - string pointers are 1 byte each
    88  0003  1BFF               	btfsc	btemp+1,7
    89  0004  280D               	ljmp	stringcode
    90  0005  1383               	bcf	3,7
    91  0006  187F               	btfsc	btemp+1,0
    92  0007  1783               	bsf	3,7
    93  0008  0800               	movf	0,w
    94  0009  0A84               	incf	4,f
    95  000A  1903               	skipnz
    96  000B  0AFF               	incf	btemp+1,f
    97  000C  0008               	return
    98  000D                     stringcode:	
    99  000D                     stringdir:	
   100  000D  3000               	movlw	high stringdir
   101  000E  008A               	movwf	10
   102  000F  0804               	movf	4,w
   103  0010  0A84               	incf	4,f
   104  0011  0782               	addwf	2,f
   105  0012                     __stringbase:	
   106  0012  3400               	retlw	0
   107  0013                     __end_of__stringtab:	
   108  0013                     _dpowers:	
   109  0013  3401               	retlw	1
   110  0014  3400               	retlw	0
   111  0015  340A               	retlw	10
   112  0016  3400               	retlw	0
   113  0017  3464               	retlw	100
   114  0018  3400               	retlw	0
   115  0019  34E8               	retlw	232
   116  001A  3403               	retlw	3
   117  001B  3410               	retlw	16
   118  001C  3427               	retlw	39
   119  001D                     __end_of_dpowers:	
   120  0042                     _RD2	set	66
   121  0043                     _RD3	set	67
   122  0044                     _RD4	set	68
   123  0045                     _RD5	set	69
   124  0046                     _RD6	set	70
   125  0047                     _RD7	set	71
   126  0088                     _TRISD	set	136
   127  001D                     STR_1:	
   128  001D  3420               	retlw	32	;' '
   129  001E  3420               	retlw	32	;' '
   130  001F  3444               	retlw	68	;'D'
   131  0020  3449               	retlw	73	;'I'
   132  0021  3447               	retlw	71	;'G'
   133  0022  3449               	retlw	73	;'I'
   134  0023  3454               	retlw	84	;'T'
   135  0024  3441               	retlw	65	;'A'
   136  0025  344C               	retlw	76	;'L'
   137  0026  3420               	retlw	32	;' '
   138  0027  3443               	retlw	67	;'C'
   139  0028  344C               	retlw	76	;'L'
   140  0029  344F               	retlw	79	;'O'
   141  002A  3443               	retlw	67	;'C'
   142  002B  344B               	retlw	75	;'K'
   143  002C  3400               	retlw	0
   144  002D                     STR_2:	
   145  002D  3425               	retlw	37	;'%'
   146  002E  3475               	retlw	117	;'u'
   147  002F  3400               	retlw	0
   148  0030                     STR_4:	
   149  0030  343A               	retlw	58	;':'
   150  0031  3400               	retlw	0
   151  0030                     
   152                           ; #config settings
   153  0000                     
   154                           	psect	cinit
   155  07F6                     start_initialization:	
   156  07F6                     __initialization:	
   157                           
   158                           ; Clear objects allocated to BANK0
   159  07F6  01C0               	clrf	__pbssBANK0& (0+127)
   160  07F7  01C1               	clrf	(__pbssBANK0+1)& (0+127)
   161  07F8  01C2               	clrf	(__pbssBANK0+2)& (0+127)
   162  07F9  01C3               	clrf	(__pbssBANK0+3)& (0+127)
   163  07FA  01C4               	clrf	(__pbssBANK0+4)& (0+127)
   164  07FB  01C5               	clrf	(__pbssBANK0+5)& (0+127)
   165  07FC                     end_of_initialization:	
   166                           ;End of C runtime variable initialization code
   167                           
   168  07FC                     __end_of__initialization:	
   169  07FC  0183               	clrf	3
   170  07FD  120A  118A  2E10   	ljmp	_main	;jump to C main() function
   171                           
   172                           	psect	bssBANK0
   173  0040                     __pbssBANK0:	
   174  0040                     _hour:	
   175  0040                     	ds	2
   176  0042                     _minute:	
   177  0042                     	ds	2
   178  0044                     _second:	
   179  0044                     	ds	2
   180                           
   181                           	psect	cstackCOMMON
   182  0070                     __pcstackCOMMON:	
   183  0070                     ?_Lcd_Port:	
   184  0070                     ??_Lcd_Port:	
   185                           ; 0 bytes @ 0x0
   186                           
   187  0070                     ?_Lcd_Cmd:	
   188                           ; 0 bytes @ 0x0
   189                           
   190  0070                     ?_Lcd_Init:	
   191                           ; 0 bytes @ 0x0
   192                           
   193  0070                     ?_Lcd_Write_Char:	
   194                           ; 0 bytes @ 0x0
   195                           
   196  0070                     ?_main:	
   197                           ; 0 bytes @ 0x0
   198                           
   199  0070                     ?_Lcd_Clear:	
   200                           ; 0 bytes @ 0x0
   201                           
   202  0070                     ?___lwdiv:	
   203                           ; 2 bytes @ 0x0
   204                           
   205  0070                     Lcd_Port@a:	
   206                           ; 2 bytes @ 0x0
   207                           
   208  0070                     ___lwdiv@divisor:	
   209                           ; 1 bytes @ 0x0
   210                           
   211                           
   212                           ; 2 bytes @ 0x0
   213  0070                     	ds	1
   214  0071                     ??_Lcd_Cmd:	
   215  0071                     ??_Lcd_Write_Char:	
   216                           ; 0 bytes @ 0x1
   217                           
   218                           
   219                           ; 0 bytes @ 0x1
   220  0071                     	ds	1
   221  0072                     Lcd_Write_Char@temp:	
   222  0072                     ___lwdiv@dividend:	
   223                           ; 1 bytes @ 0x2
   224                           
   225                           
   226                           ; 2 bytes @ 0x2
   227  0072                     	ds	1
   228  0073                     Lcd_Cmd@a:	
   229  0073                     Lcd_Write_Char@y:	
   230                           ; 1 bytes @ 0x3
   231                           
   232                           
   233                           ; 1 bytes @ 0x3
   234  0073                     	ds	1
   235  0074                     ??_Lcd_Clear:	
   236  0074                     ?_Lcd_Set_Cursor:	
   237                           ; 0 bytes @ 0x4
   238                           
   239  0074                     ??_Lcd_Init:	
   240                           ; 0 bytes @ 0x4
   241                           
   242  0074                     ??___lwdiv:	
   243                           ; 0 bytes @ 0x4
   244                           
   245  0074                     Lcd_Set_Cursor@b:	
   246                           ; 0 bytes @ 0x4
   247                           
   248  0074                     Lcd_Write_Char@a:	
   249                           ; 1 bytes @ 0x4
   250                           
   251                           
   252                           ; 1 bytes @ 0x4
   253  0074                     	ds	1
   254  0075                     ??_Lcd_Set_Cursor:	
   255  0075                     ?_Lcd_Write_String:	
   256                           ; 0 bytes @ 0x5
   257                           
   258  0075                     Lcd_Write_String@a:	
   259                           ; 0 bytes @ 0x5
   260                           
   261  0075                     ___lwdiv@quotient:	
   262                           ; 2 bytes @ 0x5
   263                           
   264                           
   265                           ; 2 bytes @ 0x5
   266  0075                     	ds	2
   267  0077                     ??_Lcd_Write_String:	
   268  0077                     Lcd_Set_Cursor@a:	
   269                           ; 0 bytes @ 0x7
   270                           
   271  0077                     ___lwdiv@counter:	
   272                           ; 1 bytes @ 0x7
   273                           
   274                           
   275                           ; 1 bytes @ 0x7
   276  0077                     	ds	1
   277  0078                     ?___lwmod:	
   278  0078                     Lcd_Set_Cursor@z:	
   279                           ; 2 bytes @ 0x8
   280                           
   281  0078                     ___lwmod@divisor:	
   282                           ; 1 bytes @ 0x8
   283                           
   284                           
   285                           ; 2 bytes @ 0x8
   286  0078                     	ds	1
   287  0079                     Lcd_Set_Cursor@y:	
   288                           
   289                           ; 1 bytes @ 0x9
   290  0079                     	ds	1
   291  007A                     Lcd_Set_Cursor@temp:	
   292  007A                     Lcd_Write_String@i:	
   293                           ; 1 bytes @ 0xA
   294                           
   295  007A                     ___lwmod@dividend:	
   296                           ; 2 bytes @ 0xA
   297                           
   298                           
   299                           ; 2 bytes @ 0xA
   300  007A                     	ds	2
   301  007C                     ??___lwmod:	
   302                           
   303                           ; 0 bytes @ 0xC
   304  007C                     	ds	1
   305  007D                     ___lwmod@counter:	
   306                           
   307                           ; 1 bytes @ 0xD
   308  007D                     	ds	1
   309                           
   310                           	psect	cstackBANK0
   311  0020                     __pcstackBANK0:	
   312  0020                     ?_sprintf:	
   313  0020                     sprintf@f:	
   314                           ; 2 bytes @ 0x0
   315                           
   316                           
   317                           ; 1 bytes @ 0x0
   318  0020                     	ds	3
   319  0023                     ??_sprintf:	
   320                           
   321                           ; 0 bytes @ 0x3
   322  0023                     	ds	3
   323  0026                     sprintf@flag:	
   324                           
   325                           ; 1 bytes @ 0x6
   326  0026                     	ds	1
   327  0027                     sprintf@ap:	
   328                           
   329                           ; 1 bytes @ 0x7
   330  0027                     	ds	1
   331  0028                     sprintf@val:	
   332                           
   333                           ; 2 bytes @ 0x8
   334  0028                     	ds	2
   335  002A                     sprintf@prec:	
   336                           
   337                           ; 1 bytes @ 0xA
   338  002A                     	ds	1
   339  002B                     sprintf@sp:	
   340                           
   341                           ; 1 bytes @ 0xB
   342  002B                     	ds	1
   343  002C                     sprintf@c:	
   344                           
   345                           ; 1 bytes @ 0xC
   346  002C                     	ds	1
   347  002D                     ??_main:	
   348                           
   349                           ; 0 bytes @ 0xD
   350  002D                     	ds	3
   351  0030                     main@s:	
   352                           
   353                           ; 10 bytes @ 0x10
   354  0030                     	ds	10
   355  003A                     main@i:	
   356                           
   357                           ; 2 bytes @ 0x1A
   358  003A                     	ds	2
   359  003C                     _main$507:	
   360                           
   361                           ; 2 bytes @ 0x1C
   362  003C                     	ds	2
   363  003E                     _main$508:	
   364                           
   365                           ; 2 bytes @ 0x1E
   366  003E                     	ds	2
   367                           
   368                           	psect	maintext
   369  0610                     __pmaintext:	
   370 ;;
   371 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   372 ;;
   373 ;; *************** function _main *****************
   374 ;; Defined at:
   375 ;;		line 30 in file "digital_clock.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  i               2   26[BANK0 ] int 
   380 ;;  s              10   16[BANK0 ] unsigned char [10]
   381 ;; Return value:  Size  Location     Type
   382 ;;		None               void
   383 ;; Registers used:
   384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : B00/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   390 ;;      Params:         0       0       0       0       0
   391 ;;      Locals:         0      16       0       0       0
   392 ;;      Temps:          0       3       0       0       0
   393 ;;      Totals:         0      19       0       0       0
   394 ;;Total ram usage:       19 bytes
   395 ;; Hardware stack levels required when called:    3
   396 ;; This function calls:
   397 ;;		_Lcd_Clear
   398 ;;		_Lcd_Init
   399 ;;		_Lcd_Set_Cursor
   400 ;;		_Lcd_Write_String
   401 ;;		___lwdiv
   402 ;;		___lwmod
   403 ;;		_sprintf
   404 ;; This function is called by:
   405 ;;		Startup code after reset
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           
   410                           ;psect for function _main
   411  0610                     _main:	
   412                           
   413                           ;digital_clock.c: 32: char s[10];
   414                           ;digital_clock.c: 33: TRISD = 0X00;
   415                           
   416                           ;incstack = 0
   417                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   418  0610  1683               	bsf	3,5	;RP0=1, select bank1
   419  0611  1303               	bcf	3,6	;RP1=0, select bank1
   420  0612  0188               	clrf	8	;volatile
   421                           
   422                           ;digital_clock.c: 34: Lcd_Init();
   423  0613  120A  118A  24F8  120A  118A  	fcall	_Lcd_Init
   424                           
   425                           ;digital_clock.c: 35: Lcd_Clear();
   426  0618  120A  118A  238B  120A  118A  	fcall	_Lcd_Clear
   427  061D                     l1019:	
   428                           ;digital_clock.c: 36: while(1)
   429                           
   430                           
   431                           ;digital_clock.c: 37: {
   432                           ;digital_clock.c: 38: Lcd_Set_Cursor(1,1);
   433  061D  01F4               	clrf	Lcd_Set_Cursor@b
   434  061E  0AF4               	incf	Lcd_Set_Cursor@b,f
   435  061F  3001               	movlw	1
   436  0620  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   437                           
   438                           ;digital_clock.c: 39: Lcd_Write_String("  DIGITAL CLOCK");
   439  0625  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   440  0626  00F5               	movwf	Lcd_Write_String@a
   441  0627  3080               	movlw	128
   442  0628  00F6               	movwf	Lcd_Write_String@a+1
   443  0629  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   444                           
   445                           ;digital_clock.c: 40: _delay((unsigned long)((1000)*(8000000/4000.0)));
   446  062E  300B               	movlw	11
   447  062F  1283               	bcf	3,5	;RP0=0, select bank0
   448  0630  1303               	bcf	3,6	;RP1=0, select bank0
   449  0631  00AF               	movwf	??_main+2
   450  0632  3026               	movlw	38
   451  0633  00AE               	movwf	??_main+1
   452  0634  3066               	movlw	102
   453  0635  00AD               	movwf	??_main
   454  0636                     u737:	
   455  0636  0BAD               	decfsz	??_main,f
   456  0637  2E36               	goto	u737
   457  0638  0BAE               	decfsz	??_main+1,f
   458  0639  2E36               	goto	u737
   459  063A  0BAF               	decfsz	??_main+2,f
   460  063B  2E36               	goto	u737
   461  063C  2E3D               	nop2
   462                           
   463                           ;digital_clock.c: 41: sprintf(s,"%u",(hour/10));
   464  063D  300A               	movlw	10
   465  063E  00F0               	movwf	___lwdiv@divisor
   466  063F  3000               	movlw	0
   467  0640  00F1               	movwf	___lwdiv@divisor+1
   468  0641  1283               	bcf	3,5	;RP0=0, select bank0
   469  0642  1303               	bcf	3,6	;RP1=0, select bank0
   470  0643  0841               	movf	_hour+1,w
   471  0644  00F3               	movwf	___lwdiv@dividend+1
   472  0645  0840               	movf	_hour,w
   473  0646  00F2               	movwf	___lwdiv@dividend
   474  0647  120A  118A  2435  120A  118A  	fcall	___lwdiv
   475  064C  0871               	movf	?___lwdiv+1,w
   476  064D  1283               	bcf	3,5	;RP0=0, select bank0
   477  064E  1303               	bcf	3,6	;RP1=0, select bank0
   478  064F  00BD               	movwf	_main$507+1
   479  0650  0870               	movf	?___lwdiv,w
   480  0651  00BC               	movwf	_main$507
   481                           
   482                           ;digital_clock.c: 41: sprintf(s,"%u",(hour/10));
   483  0652  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   484  0653  00AD               	movwf	??_main
   485  0654  082D               	movf	??_main,w
   486  0655  00A0               	movwf	sprintf@f
   487  0656  083D               	movf	_main$507+1,w
   488  0657  00A2               	movwf	?_sprintf+2
   489  0658  083C               	movf	_main$507,w
   490  0659  00A1               	movwf	?_sprintf+1
   491  065A  3030               	movlw	(low (main@s| 0))& (0+255)
   492  065B  120A  118A  2553  120A  118A  	fcall	_sprintf
   493                           
   494                           ;digital_clock.c: 42: Lcd_Set_Cursor(2,5);
   495  0660  3005               	movlw	5
   496  0661  1283               	bcf	3,5	;RP0=0, select bank0
   497  0662  1303               	bcf	3,6	;RP1=0, select bank0
   498  0663  00AD               	movwf	??_main
   499  0664  082D               	movf	??_main,w
   500  0665  00F4               	movwf	Lcd_Set_Cursor@b
   501  0666  3002               	movlw	2
   502  0667  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   503                           
   504                           ;digital_clock.c: 43: Lcd_Write_String(s);
   505  066C  3030               	movlw	(low (main@s| 0))& (0+255)
   506  066D  00F5               	movwf	Lcd_Write_String@a
   507  066E  3000               	movlw	0
   508  066F  00F6               	movwf	Lcd_Write_String@a+1
   509  0670  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   510                           
   511                           ;digital_clock.c: 44: sprintf(s,"%u",(hour%10));
   512  0675  300A               	movlw	10
   513  0676  00F8               	movwf	___lwmod@divisor
   514  0677  3000               	movlw	0
   515  0678  00F9               	movwf	___lwmod@divisor+1
   516  0679  1283               	bcf	3,5	;RP0=0, select bank0
   517  067A  1303               	bcf	3,6	;RP1=0, select bank0
   518  067B  0841               	movf	_hour+1,w
   519  067C  00FB               	movwf	___lwmod@dividend+1
   520  067D  0840               	movf	_hour,w
   521  067E  00FA               	movwf	___lwmod@dividend
   522  067F  120A  118A  23CA  120A  118A  	fcall	___lwmod
   523  0684  0879               	movf	?___lwmod+1,w
   524  0685  1283               	bcf	3,5	;RP0=0, select bank0
   525  0686  1303               	bcf	3,6	;RP1=0, select bank0
   526  0687  00BF               	movwf	_main$508+1
   527  0688  0878               	movf	?___lwmod,w
   528  0689  00BE               	movwf	_main$508
   529                           
   530                           ;digital_clock.c: 44: sprintf(s,"%u",(hour%10));
   531  068A  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   532  068B  00AD               	movwf	??_main
   533  068C  082D               	movf	??_main,w
   534  068D  00A0               	movwf	sprintf@f
   535  068E  083F               	movf	_main$508+1,w
   536  068F  00A2               	movwf	?_sprintf+2
   537  0690  083E               	movf	_main$508,w
   538  0691  00A1               	movwf	?_sprintf+1
   539  0692  3030               	movlw	(low (main@s| 0))& (0+255)
   540  0693  120A  118A  2553  120A  118A  	fcall	_sprintf
   541                           
   542                           ;digital_clock.c: 45: Lcd_Set_Cursor(2,6);
   543  0698  3006               	movlw	6
   544  0699  1283               	bcf	3,5	;RP0=0, select bank0
   545  069A  1303               	bcf	3,6	;RP1=0, select bank0
   546  069B  00AD               	movwf	??_main
   547  069C  082D               	movf	??_main,w
   548  069D  00F4               	movwf	Lcd_Set_Cursor@b
   549  069E  3002               	movlw	2
   550  069F  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   551                           
   552                           ;digital_clock.c: 46: Lcd_Write_String(s);
   553  06A4  3030               	movlw	(low (main@s| 0))& (0+255)
   554  06A5  00F5               	movwf	Lcd_Write_String@a
   555  06A6  3000               	movlw	0
   556  06A7  00F6               	movwf	Lcd_Write_String@a+1
   557  06A8  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   558                           
   559                           ;digital_clock.c: 47: Lcd_Write_String(":");
   560  06AD  301E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   561  06AE  00F5               	movwf	Lcd_Write_String@a
   562  06AF  3080               	movlw	128
   563  06B0  00F6               	movwf	Lcd_Write_String@a+1
   564  06B1  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   565                           
   566                           ;digital_clock.c: 48: sprintf(s,"%u",(minute/10));
   567  06B6  300A               	movlw	10
   568  06B7  00F0               	movwf	___lwdiv@divisor
   569  06B8  3000               	movlw	0
   570  06B9  00F1               	movwf	___lwdiv@divisor+1
   571  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   572  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   573  06BC  0843               	movf	_minute+1,w
   574  06BD  00F3               	movwf	___lwdiv@dividend+1
   575  06BE  0842               	movf	_minute,w
   576  06BF  00F2               	movwf	___lwdiv@dividend
   577  06C0  120A  118A  2435  120A  118A  	fcall	___lwdiv
   578  06C5  0871               	movf	?___lwdiv+1,w
   579  06C6  1283               	bcf	3,5	;RP0=0, select bank0
   580  06C7  1303               	bcf	3,6	;RP1=0, select bank0
   581  06C8  00BD               	movwf	_main$507+1
   582  06C9  0870               	movf	?___lwdiv,w
   583  06CA  00BC               	movwf	_main$507
   584                           
   585                           ;digital_clock.c: 48: sprintf(s,"%u",(minute/10));
   586  06CB  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   587  06CC  00AD               	movwf	??_main
   588  06CD  082D               	movf	??_main,w
   589  06CE  00A0               	movwf	sprintf@f
   590  06CF  083D               	movf	_main$507+1,w
   591  06D0  00A2               	movwf	?_sprintf+2
   592  06D1  083C               	movf	_main$507,w
   593  06D2  00A1               	movwf	?_sprintf+1
   594  06D3  3030               	movlw	(low (main@s| 0))& (0+255)
   595  06D4  120A  118A  2553  120A  118A  	fcall	_sprintf
   596                           
   597                           ;digital_clock.c: 49: Lcd_Set_Cursor(2,8);
   598  06D9  3008               	movlw	8
   599  06DA  1283               	bcf	3,5	;RP0=0, select bank0
   600  06DB  1303               	bcf	3,6	;RP1=0, select bank0
   601  06DC  00AD               	movwf	??_main
   602  06DD  082D               	movf	??_main,w
   603  06DE  00F4               	movwf	Lcd_Set_Cursor@b
   604  06DF  3002               	movlw	2
   605  06E0  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   606                           
   607                           ;digital_clock.c: 50: Lcd_Write_String(s);
   608  06E5  3030               	movlw	(low (main@s| 0))& (0+255)
   609  06E6  00F5               	movwf	Lcd_Write_String@a
   610  06E7  3000               	movlw	0
   611  06E8  00F6               	movwf	Lcd_Write_String@a+1
   612  06E9  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   613                           
   614                           ;digital_clock.c: 51: sprintf(s,"%u",(minute%10));
   615  06EE  300A               	movlw	10
   616  06EF  00F8               	movwf	___lwmod@divisor
   617  06F0  3000               	movlw	0
   618  06F1  00F9               	movwf	___lwmod@divisor+1
   619  06F2  1283               	bcf	3,5	;RP0=0, select bank0
   620  06F3  1303               	bcf	3,6	;RP1=0, select bank0
   621  06F4  0843               	movf	_minute+1,w
   622  06F5  00FB               	movwf	___lwmod@dividend+1
   623  06F6  0842               	movf	_minute,w
   624  06F7  00FA               	movwf	___lwmod@dividend
   625  06F8  120A  118A  23CA  120A  118A  	fcall	___lwmod
   626  06FD  0879               	movf	?___lwmod+1,w
   627  06FE  1283               	bcf	3,5	;RP0=0, select bank0
   628  06FF  1303               	bcf	3,6	;RP1=0, select bank0
   629  0700  00BF               	movwf	_main$508+1
   630  0701  0878               	movf	?___lwmod,w
   631  0702  00BE               	movwf	_main$508
   632                           
   633                           ;digital_clock.c: 51: sprintf(s,"%u",(minute%10));
   634  0703  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   635  0704  00AD               	movwf	??_main
   636  0705  082D               	movf	??_main,w
   637  0706  00A0               	movwf	sprintf@f
   638  0707  083F               	movf	_main$508+1,w
   639  0708  00A2               	movwf	?_sprintf+2
   640  0709  083E               	movf	_main$508,w
   641  070A  00A1               	movwf	?_sprintf+1
   642  070B  3030               	movlw	(low (main@s| 0))& (0+255)
   643  070C  120A  118A  2553  120A  118A  	fcall	_sprintf
   644                           
   645                           ;digital_clock.c: 52: Lcd_Set_Cursor(2,9);
   646  0711  3009               	movlw	9
   647  0712  1283               	bcf	3,5	;RP0=0, select bank0
   648  0713  1303               	bcf	3,6	;RP1=0, select bank0
   649  0714  00AD               	movwf	??_main
   650  0715  082D               	movf	??_main,w
   651  0716  00F4               	movwf	Lcd_Set_Cursor@b
   652  0717  3002               	movlw	2
   653  0718  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   654                           
   655                           ;digital_clock.c: 53: Lcd_Write_String(s);
   656  071D  3030               	movlw	(low (main@s| 0))& (0+255)
   657  071E  00F5               	movwf	Lcd_Write_String@a
   658  071F  3000               	movlw	0
   659  0720  00F6               	movwf	Lcd_Write_String@a+1
   660  0721  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   661                           
   662                           ;digital_clock.c: 54: Lcd_Write_String(":");
   663  0726  301E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   664  0727  00F5               	movwf	Lcd_Write_String@a
   665  0728  3080               	movlw	128
   666  0729  00F6               	movwf	Lcd_Write_String@a+1
   667  072A  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   668                           
   669                           ;digital_clock.c: 55: sprintf(s,"%u",(second/10));
   670  072F  300A               	movlw	10
   671  0730  00F0               	movwf	___lwdiv@divisor
   672  0731  3000               	movlw	0
   673  0732  00F1               	movwf	___lwdiv@divisor+1
   674  0733  1283               	bcf	3,5	;RP0=0, select bank0
   675  0734  1303               	bcf	3,6	;RP1=0, select bank0
   676  0735  0845               	movf	_second+1,w
   677  0736  00F3               	movwf	___lwdiv@dividend+1
   678  0737  0844               	movf	_second,w
   679  0738  00F2               	movwf	___lwdiv@dividend
   680  0739  120A  118A  2435  120A  118A  	fcall	___lwdiv
   681  073E  0871               	movf	?___lwdiv+1,w
   682  073F  1283               	bcf	3,5	;RP0=0, select bank0
   683  0740  1303               	bcf	3,6	;RP1=0, select bank0
   684  0741  00BD               	movwf	_main$507+1
   685  0742  0870               	movf	?___lwdiv,w
   686  0743  00BC               	movwf	_main$507
   687                           
   688                           ;digital_clock.c: 55: sprintf(s,"%u",(second/10));
   689  0744  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   690  0745  00AD               	movwf	??_main
   691  0746  082D               	movf	??_main,w
   692  0747  00A0               	movwf	sprintf@f
   693  0748  083D               	movf	_main$507+1,w
   694  0749  00A2               	movwf	?_sprintf+2
   695  074A  083C               	movf	_main$507,w
   696  074B  00A1               	movwf	?_sprintf+1
   697  074C  3030               	movlw	(low (main@s| 0))& (0+255)
   698  074D  120A  118A  2553  120A  118A  	fcall	_sprintf
   699                           
   700                           ;digital_clock.c: 56: Lcd_Set_Cursor(2,11);
   701  0752  300B               	movlw	11
   702  0753  1283               	bcf	3,5	;RP0=0, select bank0
   703  0754  1303               	bcf	3,6	;RP1=0, select bank0
   704  0755  00AD               	movwf	??_main
   705  0756  082D               	movf	??_main,w
   706  0757  00F4               	movwf	Lcd_Set_Cursor@b
   707  0758  3002               	movlw	2
   708  0759  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   709                           
   710                           ;digital_clock.c: 57: Lcd_Write_String(s);
   711  075E  3030               	movlw	(low (main@s| 0))& (0+255)
   712  075F  00F5               	movwf	Lcd_Write_String@a
   713  0760  3000               	movlw	0
   714  0761  00F6               	movwf	Lcd_Write_String@a+1
   715  0762  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   716                           
   717                           ;digital_clock.c: 58: sprintf(s,"%u",(second%10));
   718  0767  300A               	movlw	10
   719  0768  00F8               	movwf	___lwmod@divisor
   720  0769  3000               	movlw	0
   721  076A  00F9               	movwf	___lwmod@divisor+1
   722  076B  1283               	bcf	3,5	;RP0=0, select bank0
   723  076C  1303               	bcf	3,6	;RP1=0, select bank0
   724  076D  0845               	movf	_second+1,w
   725  076E  00FB               	movwf	___lwmod@dividend+1
   726  076F  0844               	movf	_second,w
   727  0770  00FA               	movwf	___lwmod@dividend
   728  0771  120A  118A  23CA  120A  118A  	fcall	___lwmod
   729  0776  0879               	movf	?___lwmod+1,w
   730  0777  1283               	bcf	3,5	;RP0=0, select bank0
   731  0778  1303               	bcf	3,6	;RP1=0, select bank0
   732  0779  00BF               	movwf	_main$508+1
   733  077A  0878               	movf	?___lwmod,w
   734  077B  00BE               	movwf	_main$508
   735                           
   736                           ;digital_clock.c: 58: sprintf(s,"%u",(second%10));
   737  077C  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   738  077D  00AD               	movwf	??_main
   739  077E  082D               	movf	??_main,w
   740  077F  00A0               	movwf	sprintf@f
   741  0780  083F               	movf	_main$508+1,w
   742  0781  00A2               	movwf	?_sprintf+2
   743  0782  083E               	movf	_main$508,w
   744  0783  00A1               	movwf	?_sprintf+1
   745  0784  3030               	movlw	(low (main@s| 0))& (0+255)
   746  0785  120A  118A  2553  120A  118A  	fcall	_sprintf
   747                           
   748                           ;digital_clock.c: 59: Lcd_Set_Cursor(2,12);
   749  078A  300C               	movlw	12
   750  078B  1283               	bcf	3,5	;RP0=0, select bank0
   751  078C  1303               	bcf	3,6	;RP1=0, select bank0
   752  078D  00AD               	movwf	??_main
   753  078E  082D               	movf	??_main,w
   754  078F  00F4               	movwf	Lcd_Set_Cursor@b
   755  0790  3002               	movlw	2
   756  0791  120A  118A  24AE  120A  118A  	fcall	_Lcd_Set_Cursor
   757                           
   758                           ;digital_clock.c: 60: Lcd_Write_String(s);
   759  0796  3030               	movlw	(low (main@s| 0))& (0+255)
   760  0797  00F5               	movwf	Lcd_Write_String@a
   761  0798  3000               	movlw	0
   762  0799  00F6               	movwf	Lcd_Write_String@a+1
   763  079A  120A  118A  2471  120A  118A  	fcall	_Lcd_Write_String
   764                           
   765                           ;digital_clock.c: 62: for(int i=0;i<21;i++)
   766  079F  1283               	bcf	3,5	;RP0=0, select bank0
   767  07A0  1303               	bcf	3,6	;RP1=0, select bank0
   768  07A1  01BA               	clrf	main@i
   769  07A2  01BB               	clrf	main@i+1
   770  07A3  083B               	movf	main@i+1,w
   771  07A4  3A80               	xorlw	128
   772  07A5  00FF               	movwf	127
   773  07A6  3080               	movlw	128
   774  07A7  027F               	subwf	127,w
   775  07A8  1D03               	skipz
   776  07A9  2FAC               	goto	u685
   777  07AA  3015               	movlw	21
   778  07AB  023A               	subwf	main@i,w
   779  07AC                     u685:	
   780  07AC  1803               	btfsc	3,0
   781  07AD  2FCC               	goto	l1087
   782  07AE                     l1083:	
   783                           
   784                           ;digital_clock.c: 63: {
   785                           ;digital_clock.c: 64: _delay((unsigned long)((50)*(8000000/4000.0)));
   786  07AE  3082               	movlw	130
   787  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   788  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   789  07B1  00AE               	movwf	??_main+1
   790  07B2  30DD               	movlw	221
   791  07B3  00AD               	movwf	??_main
   792  07B4                     u747:	
   793  07B4  0BAD               	decfsz	??_main,f
   794  07B5  2FB4               	goto	u747
   795  07B6  0BAE               	decfsz	??_main+1,f
   796  07B7  2FB4               	goto	u747
   797  07B8  2FB9               	nop2
   798  07B9  3001               	movlw	1
   799  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   800  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   801  07BC  07BA               	addwf	main@i,f
   802  07BD  1803               	skipnc
   803  07BE  0ABB               	incf	main@i+1,f
   804  07BF  3000               	movlw	0
   805  07C0  07BB               	addwf	main@i+1,f
   806  07C1  083B               	movf	main@i+1,w
   807  07C2  3A80               	xorlw	128
   808  07C3  00FF               	movwf	127
   809  07C4  3080               	movlw	128
   810  07C5  027F               	subwf	127,w
   811  07C6  1D03               	skipz
   812  07C7  2FCA               	goto	u695
   813  07C8  3015               	movlw	21
   814  07C9  023A               	subwf	main@i,w
   815  07CA                     u695:	
   816  07CA  1C03               	skipc
   817  07CB  2FAE               	goto	l1083
   818  07CC                     l1087:	
   819                           
   820                           ;digital_clock.c: 65: }
   821                           ;digital_clock.c: 67: second++;
   822  07CC  3001               	movlw	1
   823  07CD  1283               	bcf	3,5	;RP0=0, select bank0
   824  07CE  1303               	bcf	3,6	;RP1=0, select bank0
   825  07CF  07C4               	addwf	_second,f
   826  07D0  1803               	skipnc
   827  07D1  0AC5               	incf	_second+1,f
   828  07D2  3000               	movlw	0
   829  07D3  07C5               	addwf	_second+1,f
   830                           
   831                           ;digital_clock.c: 68: if(second==61)
   832  07D4  303D               	movlw	61
   833  07D5  0644               	xorwf	_second,w
   834  07D6  0445               	iorwf	_second+1,w
   835  07D7  1D03               	btfss	3,2
   836  07D8  2FE1               	goto	l1095
   837                           
   838                           ;digital_clock.c: 69: {
   839                           ;digital_clock.c: 70: minute++;
   840  07D9  3001               	movlw	1
   841  07DA  07C2               	addwf	_minute,f
   842  07DB  1803               	skipnc
   843  07DC  0AC3               	incf	_minute+1,f
   844  07DD  3000               	movlw	0
   845  07DE  07C3               	addwf	_minute+1,f
   846                           
   847                           ;digital_clock.c: 71: second=00;
   848  07DF  01C4               	clrf	_second
   849  07E0  01C5               	clrf	_second+1
   850  07E1                     l1095:	
   851                           
   852                           ;digital_clock.c: 72: }
   853                           ;digital_clock.c: 73: if(minute==61)
   854  07E1  303D               	movlw	61
   855  07E2  0642               	xorwf	_minute,w
   856  07E3  0443               	iorwf	_minute+1,w
   857  07E4  1D03               	btfss	3,2
   858  07E5  2FEE               	goto	l1101
   859                           
   860                           ;digital_clock.c: 74: {
   861                           ;digital_clock.c: 75: hour++;
   862  07E6  3001               	movlw	1
   863  07E7  07C0               	addwf	_hour,f
   864  07E8  1803               	skipnc
   865  07E9  0AC1               	incf	_hour+1,f
   866  07EA  3000               	movlw	0
   867  07EB  07C1               	addwf	_hour+1,f
   868                           
   869                           ;digital_clock.c: 76: minute=0;
   870  07EC  01C2               	clrf	_minute
   871  07ED  01C3               	clrf	_minute+1
   872  07EE                     l1101:	
   873                           
   874                           ;digital_clock.c: 77: }
   875                           ;digital_clock.c: 78: if(hour==13)
   876  07EE  300D               	movlw	13
   877  07EF  0640               	xorwf	_hour,w
   878  07F0  0441               	iorwf	_hour+1,w
   879  07F1  1D03               	btfss	3,2
   880  07F2  2E1D               	goto	l1019
   881                           
   882                           ;digital_clock.c: 79: {
   883                           ;digital_clock.c: 80: hour=0;
   884  07F3  01C0               	clrf	_hour
   885  07F4  01C1               	clrf	_hour+1
   886  07F5  2E1D               	goto	l1019
   887  07F6                     __end_of_main:	
   888                           
   889                           	psect	text1
   890  0553                     __ptext1:	
   891 ;; *************** function _sprintf *****************
   892 ;; Defined at:
   893 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;  sp              1    wreg     PTR unsigned char 
   896 ;;		 -> main@s(10), 
   897 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   898 ;;		 -> STR_9(3), STR_8(3), STR_6(3), STR_5(3), 
   899 ;;		 -> STR_3(3), STR_2(3), 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   902 ;;		 -> main@s(10), 
   903 ;;  tmpval          4    0        struct .
   904 ;;  val             2    8[BANK0 ] unsigned int 
   905 ;;  cp              2    0        PTR const unsigned char 
   906 ;;  len             2    0        unsigned int 
   907 ;;  c               1   12[BANK0 ] char 
   908 ;;  prec            1   10[BANK0 ] char 
   909 ;;  ap              1    7[BANK0 ] PTR void [1]
   910 ;;		 -> ?_sprintf(2), 
   911 ;;  flag            1    6[BANK0 ] unsigned char 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  2    0[BANK0 ] int 
   914 ;; Registers used:
   915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   921 ;;      Params:         0       3       0       0       0
   922 ;;      Locals:         0       7       0       0       0
   923 ;;      Temps:          0       3       0       0       0
   924 ;;      Totals:         0      13       0       0       0
   925 ;;Total ram usage:       13 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    1
   928 ;; This function calls:
   929 ;;		___lwdiv
   930 ;;		___lwmod
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           
   937                           ;psect for function _sprintf
   938  0553                     _sprintf:	
   939                           
   940                           ;incstack = 0
   941                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   942                           ;sprintf@sp stored from wreg
   943  0553  1283               	bcf	3,5	;RP0=0, select bank0
   944  0554  1303               	bcf	3,6	;RP1=0, select bank0
   945  0555  00AB               	movwf	sprintf@sp
   946                           
   947                           ;doprnt.c: 494: va_list ap;
   948                           ;doprnt.c: 499: signed char c;
   949                           ;doprnt.c: 506: signed char prec;
   950                           ;doprnt.c: 508: unsigned char flag;
   951                           ;doprnt.c: 523: union {
   952                           ;doprnt.c: 524: unsigned long vd;
   953                           ;doprnt.c: 525: double integ;
   954                           ;doprnt.c: 526: } tmpval;
   955                           ;doprnt.c: 528: unsigned int val;
   956                           ;doprnt.c: 529: unsigned len;
   957                           ;doprnt.c: 530: const char * cp;
   958                           ;doprnt.c: 533: *ap = __va_start();
   959  0556  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   960  0557  00A3               	movwf	??_sprintf
   961  0558  0823               	movf	??_sprintf,w
   962  0559  00A7               	movwf	sprintf@ap
   963  055A                     l1003:	
   964                           ;doprnt.c: 536: while(c = *f++) {
   965                           
   966  055A  3001               	movlw	1
   967  055B  07A0               	addwf	sprintf@f,f
   968  055C  30FF               	movlw	-1
   969  055D  0720               	addwf	sprintf@f,w
   970  055E  0084               	movwf	4
   971  055F  120A  118A  200D  120A  118A  	fcall	stringdir
   972  0564  00A3               	movwf	??_sprintf
   973  0565  0823               	movf	??_sprintf,w
   974  0566  00AC               	movwf	sprintf@c
   975  0567  082C               	movf	sprintf@c,w
   976  0568  1903               	btfsc	3,2
   977  0569  2E0B               	goto	l1005
   978                           
   979                           ;doprnt.c: 538: if(c != '%')
   980  056A  3025               	movlw	37
   981  056B  062C               	xorwf	sprintf@c,w
   982  056C  1903               	btfsc	3,2
   983  056D  2D7A               	goto	l969
   984                           
   985                           ;doprnt.c: 540: {
   986                           ;doprnt.c: 541: ((*sp++ = (c)));
   987  056E  082C               	movf	sprintf@c,w
   988  056F  00A3               	movwf	??_sprintf
   989  0570  082B               	movf	sprintf@sp,w
   990  0571  0084               	movwf	4
   991  0572  0823               	movf	??_sprintf,w
   992  0573  1383               	bcf	3,7	;select IRP bank0
   993  0574  0080               	movwf	0
   994  0575  3001               	movlw	1
   995  0576  00A3               	movwf	??_sprintf
   996  0577  0823               	movf	??_sprintf,w
   997  0578  07AB               	addwf	sprintf@sp,f
   998                           
   999                           ;doprnt.c: 542: continue;
  1000  0579  2D5A               	goto	l1003
  1001  057A                     l969:	
  1002                           
  1003                           ;doprnt.c: 543: }
  1004                           ;doprnt.c: 548: flag = 0;
  1005  057A  01A6               	clrf	sprintf@flag
  1006                           
  1007                           ;doprnt.c: 635: switch(c = *f++) {
  1008  057B  2D81               	goto	l975
  1009  057C                     l971:	
  1010                           ;doprnt.c: 817: case 'u':
  1011                           
  1012                           ;doprnt.c: 813: continue;
  1013                           
  1014                           ;doprnt.c: 802: default:
  1015                           
  1016                           ;doprnt.c: 638: goto alldone;
  1017                           
  1018                           ;doprnt.c: 637: case 0:
  1019                           
  1020                           
  1021                           ;doprnt.c: 818: flag |= 0xC0;
  1022  057C  30C0               	movlw	192
  1023  057D  00A3               	movwf	??_sprintf
  1024  057E  0823               	movf	??_sprintf,w
  1025  057F  04A6               	iorwf	sprintf@flag,f
  1026                           
  1027                           ;doprnt.c: 822: }
  1028                           
  1029                           ;doprnt.c: 819: break;
  1030  0580  2D93               	goto	l977
  1031  0581                     l975:	
  1032  0581  3001               	movlw	1
  1033  0582  07A0               	addwf	sprintf@f,f
  1034  0583  30FF               	movlw	-1
  1035  0584  0720               	addwf	sprintf@f,w
  1036  0585  0084               	movwf	4
  1037  0586  120A  118A  200D  120A  118A  	fcall	stringdir
  1038  058B  00AC               	movwf	sprintf@c
  1039                           
  1040                           ; Switch size 1, requested type "space"
  1041                           ; Number of cases is 2, Range of values is 0 to 117
  1042                           ; switch strategies available:
  1043                           ; Name         Instructions Cycles
  1044                           ; simple_byte            7     4 (average)
  1045                           ; jumptable            260     6 (fixed)
  1046                           ;	Chosen strategy is simple_byte
  1047  058C  3A00               	xorlw	0	; case 0
  1048  058D  1903               	skipnz
  1049  058E  2E0B               	goto	l1005
  1050  058F  3A75               	xorlw	117	; case 117
  1051  0590  1903               	skipnz
  1052  0591  2D7C               	goto	l971
  1053  0592  2D5A               	goto	l1003
  1054  0593                     l977:	
  1055                           
  1056                           ;doprnt.c: 1273: {
  1057                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1058  0593  0827               	movf	sprintf@ap,w
  1059  0594  0084               	movwf	4
  1060  0595  1383               	bcf	3,7	;select IRP bank0
  1061  0596  0800               	movf	0,w
  1062  0597  00A8               	movwf	sprintf@val
  1063  0598  0A84               	incf	4,f
  1064  0599  0800               	movf	0,w
  1065  059A  00A9               	movwf	sprintf@val+1
  1066  059B  3002               	movlw	2
  1067  059C  00A3               	movwf	??_sprintf
  1068  059D  0823               	movf	??_sprintf,w
  1069  059E  07A7               	addwf	sprintf@ap,f
  1070                           
  1071                           ;doprnt.c: 1287: }
  1072                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1073  059F  01AC               	clrf	sprintf@c
  1074  05A0  0AAC               	incf	sprintf@c,f
  1075  05A1  3005               	movlw	5
  1076  05A2  062C               	xorwf	sprintf@c,w
  1077  05A3  1903               	btfsc	3,2
  1078  05A4  2DC6               	goto	l993
  1079  05A5                     l987:	
  1080                           
  1081                           ;doprnt.c: 1306: if(val < dpowers[c])
  1082  05A5  082C               	movf	sprintf@c,w
  1083  05A6  00A3               	movwf	??_sprintf
  1084  05A7  0723               	addwf	??_sprintf,w
  1085  05A8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1086  05A9  0084               	movwf	4
  1087  05AA  120A  118A  200D  120A  118A  	fcall	stringdir
  1088  05AF  00A4               	movwf	??_sprintf+1
  1089  05B0  120A  118A  200D  120A  118A  	fcall	stringdir
  1090  05B5  00A5               	movwf	??_sprintf+2
  1091  05B6  0825               	movf	??_sprintf+2,w
  1092  05B7  0229               	subwf	sprintf@val+1,w
  1093  05B8  1D03               	skipz
  1094  05B9  2DBC               	goto	u645
  1095  05BA  0824               	movf	??_sprintf+1,w
  1096  05BB  0228               	subwf	sprintf@val,w
  1097  05BC                     u645:	
  1098  05BC  1C03               	btfss	3,0
  1099  05BD  2DC6               	goto	l993
  1100                           
  1101                           ;doprnt.c: 1307: break;
  1102  05BE  3001               	movlw	1
  1103  05BF  00A3               	movwf	??_sprintf
  1104  05C0  0823               	movf	??_sprintf,w
  1105  05C1  07AC               	addwf	sprintf@c,f
  1106  05C2  3005               	movlw	5
  1107  05C3  062C               	xorwf	sprintf@c,w
  1108  05C4  1D03               	btfss	3,2
  1109  05C5  2DA5               	goto	l987
  1110  05C6                     l993:	
  1111                           
  1112                           ;doprnt.c: 1422: {
  1113                           ;doprnt.c: 1469: }
  1114                           ;doprnt.c: 1472: prec = c;
  1115  05C6  082C               	movf	sprintf@c,w
  1116  05C7  00A3               	movwf	??_sprintf
  1117  05C8  0823               	movf	??_sprintf,w
  1118  05C9  00AA               	movwf	sprintf@prec
  1119  05CA                     l1001:	
  1120                           ;doprnt.c: 1474: while(prec--) {
  1121                           
  1122  05CA  30FF               	movlw	255
  1123  05CB  00A3               	movwf	??_sprintf
  1124  05CC  0823               	movf	??_sprintf,w
  1125  05CD  07AA               	addwf	sprintf@prec,f
  1126  05CE  0A2A               	incf	sprintf@prec,w
  1127  05CF  1903               	btfsc	3,2
  1128  05D0  2D5A               	goto	l1003
  1129                           
  1130                           ;doprnt.c: 1478: {
  1131                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1132  05D1  300A               	movlw	10
  1133  05D2  00F8               	movwf	___lwmod@divisor
  1134  05D3  3000               	movlw	0
  1135  05D4  00F9               	movwf	___lwmod@divisor+1
  1136  05D5  082A               	movf	sprintf@prec,w
  1137  05D6  00A3               	movwf	??_sprintf
  1138  05D7  0723               	addwf	??_sprintf,w
  1139  05D8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1140  05D9  0084               	movwf	4
  1141  05DA  120A  118A  200D  120A  118A  	fcall	stringdir
  1142  05DF  00F0               	movwf	___lwdiv@divisor
  1143  05E0  120A  118A  200D  120A  118A  	fcall	stringdir
  1144  05E5  00F1               	movwf	___lwdiv@divisor+1
  1145  05E6  0829               	movf	sprintf@val+1,w
  1146  05E7  00F3               	movwf	___lwdiv@dividend+1
  1147  05E8  0828               	movf	sprintf@val,w
  1148  05E9  00F2               	movwf	___lwdiv@dividend
  1149  05EA  120A  118A  2435  120A  118A  	fcall	___lwdiv
  1150  05EF  0871               	movf	?___lwdiv+1,w
  1151  05F0  00FB               	movwf	___lwmod@dividend+1
  1152  05F1  0870               	movf	?___lwdiv,w
  1153  05F2  00FA               	movwf	___lwmod@dividend
  1154  05F3  120A  118A  23CA  120A  118A  	fcall	___lwmod
  1155  05F8  0878               	movf	?___lwmod,w
  1156  05F9  3E30               	addlw	48
  1157  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  1158  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  1159  05FC  00A4               	movwf	??_sprintf+1
  1160  05FD  0824               	movf	??_sprintf+1,w
  1161  05FE  00AC               	movwf	sprintf@c
  1162                           
  1163                           ;doprnt.c: 1523: }
  1164                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1165  05FF  082C               	movf	sprintf@c,w
  1166  0600  00A3               	movwf	??_sprintf
  1167  0601  082B               	movf	sprintf@sp,w
  1168  0602  0084               	movwf	4
  1169  0603  0823               	movf	??_sprintf,w
  1170  0604  1383               	bcf	3,7	;select IRP bank0
  1171  0605  0080               	movwf	0
  1172  0606  3001               	movlw	1
  1173  0607  00A3               	movwf	??_sprintf
  1174  0608  0823               	movf	??_sprintf,w
  1175  0609  07AB               	addwf	sprintf@sp,f
  1176  060A  2DCA               	goto	l1001
  1177  060B                     l1005:	
  1178                           ;doprnt.c: 1525: }
  1179                           ;doprnt.c: 1533: }
  1180                           ;doprnt.c: 1535: alldone:
  1181                           
  1182                           
  1183                           ;doprnt.c: 1538: *sp = 0;
  1184  060B  082B               	movf	sprintf@sp,w
  1185  060C  0084               	movwf	4
  1186  060D  1383               	bcf	3,7	;select IRP bank0
  1187  060E  0180               	clrf	0
  1188  060F  0008               	return
  1189  0610                     __end_of_sprintf:	
  1190                           ;doprnt.c: 1540: return 0;
  1191                           ;	Return value of _sprintf is never used
  1192                           
  1193                           
  1194                           	psect	text2
  1195  03CA                     __ptext2:	
  1196 ;; *************** function ___lwmod *****************
  1197 ;; Defined at:
  1198 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  divisor         2    8[COMMON] unsigned int 
  1201 ;;  dividend        2   10[COMMON] unsigned int 
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  counter         1   13[COMMON] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  2    8[COMMON] unsigned int 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1213 ;;      Params:         4       0       0       0       0
  1214 ;;      Locals:         1       0       0       0       0
  1215 ;;      Temps:          1       0       0       0       0
  1216 ;;      Totals:         6       0       0       0       0
  1217 ;;Total ram usage:        6 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; This function calls:
  1220 ;;		Nothing
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;;		_sprintf
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function ___lwmod
  1229  03CA                     ___lwmod:	
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1233  03CA  0878               	movf	___lwmod@divisor,w
  1234  03CB  0479               	iorwf	___lwmod@divisor+1,w
  1235  03CC  1903               	btfsc	3,2
  1236  03CD  2BF7               	goto	l917
  1237  03CE  01FD               	clrf	___lwmod@counter
  1238  03CF  0AFD               	incf	___lwmod@counter,f
  1239  03D0                     l907:	
  1240  03D0  1BF9               	btfsc	___lwmod@divisor+1,7
  1241  03D1  2BDE               	goto	l909
  1242  03D2  3001               	movlw	1
  1243  03D3                     u505:	
  1244  03D3  1003               	clrc
  1245  03D4  0DF8               	rlf	___lwmod@divisor,f
  1246  03D5  0DF9               	rlf	___lwmod@divisor+1,f
  1247  03D6  3EFF               	addlw	-1
  1248  03D7  1D03               	skipz
  1249  03D8  2BD3               	goto	u505
  1250  03D9  3001               	movlw	1
  1251  03DA  00FC               	movwf	??___lwmod
  1252  03DB  087C               	movf	??___lwmod,w
  1253  03DC  07FD               	addwf	___lwmod@counter,f
  1254  03DD  2BD0               	goto	l907
  1255  03DE                     l909:	
  1256  03DE  0879               	movf	___lwmod@divisor+1,w
  1257  03DF  027B               	subwf	___lwmod@dividend+1,w
  1258  03E0  1D03               	skipz
  1259  03E1  2BE4               	goto	u525
  1260  03E2  0878               	movf	___lwmod@divisor,w
  1261  03E3  027A               	subwf	___lwmod@dividend,w
  1262  03E4                     u525:	
  1263  03E4  1C03               	skipc
  1264  03E5  2BEC               	goto	l913
  1265  03E6  0878               	movf	___lwmod@divisor,w
  1266  03E7  02FA               	subwf	___lwmod@dividend,f
  1267  03E8  0879               	movf	___lwmod@divisor+1,w
  1268  03E9  1C03               	skipc
  1269  03EA  03FB               	decf	___lwmod@dividend+1,f
  1270  03EB  02FB               	subwf	___lwmod@dividend+1,f
  1271  03EC                     l913:	
  1272  03EC  3001               	movlw	1
  1273  03ED                     u535:	
  1274  03ED  1003               	clrc
  1275  03EE  0CF9               	rrf	___lwmod@divisor+1,f
  1276  03EF  0CF8               	rrf	___lwmod@divisor,f
  1277  03F0  3EFF               	addlw	-1
  1278  03F1  1D03               	skipz
  1279  03F2  2BED               	goto	u535
  1280  03F3  3001               	movlw	1
  1281  03F4  02FD               	subwf	___lwmod@counter,f
  1282  03F5  1D03               	btfss	3,2
  1283  03F6  2BDE               	goto	l909
  1284  03F7                     l917:	
  1285  03F7  087B               	movf	___lwmod@dividend+1,w
  1286  03F8  00F9               	movwf	?___lwmod+1
  1287  03F9  087A               	movf	___lwmod@dividend,w
  1288  03FA  00F8               	movwf	?___lwmod
  1289  03FB  0008               	return
  1290  03FC                     __end_of___lwmod:	
  1291                           
  1292                           	psect	text3
  1293  0435                     __ptext3:	
  1294 ;; *************** function ___lwdiv *****************
  1295 ;; Defined at:
  1296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  divisor         2    0[COMMON] unsigned int 
  1299 ;;  dividend        2    2[COMMON] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  quotient        2    5[COMMON] unsigned int 
  1302 ;;  counter         1    7[COMMON] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  2    0[COMMON] unsigned int 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1312 ;;      Params:         4       0       0       0       0
  1313 ;;      Locals:         3       0       0       0       0
  1314 ;;      Temps:          1       0       0       0       0
  1315 ;;      Totals:         8       0       0       0       0
  1316 ;;Total ram usage:        8 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;;		_sprintf
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function ___lwdiv
  1328  0435                     ___lwdiv:	
  1329                           
  1330                           ;incstack = 0
  1331                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1332  0435  01F5               	clrf	___lwdiv@quotient
  1333  0436  01F6               	clrf	___lwdiv@quotient+1
  1334  0437  0870               	movf	___lwdiv@divisor,w
  1335  0438  0471               	iorwf	___lwdiv@divisor+1,w
  1336  0439  1903               	btfsc	3,2
  1337  043A  2C6C               	goto	l895
  1338  043B  01F7               	clrf	___lwdiv@counter
  1339  043C  0AF7               	incf	___lwdiv@counter,f
  1340  043D                     l883:	
  1341  043D  1BF1               	btfsc	___lwdiv@divisor+1,7
  1342  043E  2C4B               	goto	l885
  1343  043F  3001               	movlw	1
  1344  0440                     u435:	
  1345  0440  1003               	clrc
  1346  0441  0DF0               	rlf	___lwdiv@divisor,f
  1347  0442  0DF1               	rlf	___lwdiv@divisor+1,f
  1348  0443  3EFF               	addlw	-1
  1349  0444  1D03               	skipz
  1350  0445  2C40               	goto	u435
  1351  0446  3001               	movlw	1
  1352  0447  00F4               	movwf	??___lwdiv
  1353  0448  0874               	movf	??___lwdiv,w
  1354  0449  07F7               	addwf	___lwdiv@counter,f
  1355  044A  2C3D               	goto	l883
  1356  044B                     l885:	
  1357  044B  3001               	movlw	1
  1358  044C                     u455:	
  1359  044C  1003               	clrc
  1360  044D  0DF5               	rlf	___lwdiv@quotient,f
  1361  044E  0DF6               	rlf	___lwdiv@quotient+1,f
  1362  044F  3EFF               	addlw	-1
  1363  0450  1D03               	skipz
  1364  0451  2C4C               	goto	u455
  1365  0452  0871               	movf	___lwdiv@divisor+1,w
  1366  0453  0273               	subwf	___lwdiv@dividend+1,w
  1367  0454  1D03               	skipz
  1368  0455  2C58               	goto	u465
  1369  0456  0870               	movf	___lwdiv@divisor,w
  1370  0457  0272               	subwf	___lwdiv@dividend,w
  1371  0458                     u465:	
  1372  0458  1C03               	skipc
  1373  0459  2C61               	goto	l891
  1374  045A  0870               	movf	___lwdiv@divisor,w
  1375  045B  02F2               	subwf	___lwdiv@dividend,f
  1376  045C  0871               	movf	___lwdiv@divisor+1,w
  1377  045D  1C03               	skipc
  1378  045E  03F3               	decf	___lwdiv@dividend+1,f
  1379  045F  02F3               	subwf	___lwdiv@dividend+1,f
  1380  0460  1475               	bsf	___lwdiv@quotient,0
  1381  0461                     l891:	
  1382  0461  3001               	movlw	1
  1383  0462                     u475:	
  1384  0462  1003               	clrc
  1385  0463  0CF1               	rrf	___lwdiv@divisor+1,f
  1386  0464  0CF0               	rrf	___lwdiv@divisor,f
  1387  0465  3EFF               	addlw	-1
  1388  0466  1D03               	skipz
  1389  0467  2C62               	goto	u475
  1390  0468  3001               	movlw	1
  1391  0469  02F7               	subwf	___lwdiv@counter,f
  1392  046A  1D03               	btfss	3,2
  1393  046B  2C4B               	goto	l885
  1394  046C                     l895:	
  1395  046C  0876               	movf	___lwdiv@quotient+1,w
  1396  046D  00F1               	movwf	?___lwdiv+1
  1397  046E  0875               	movf	___lwdiv@quotient,w
  1398  046F  00F0               	movwf	?___lwdiv
  1399  0470  0008               	return
  1400  0471                     __end_of___lwdiv:	
  1401                           
  1402                           	psect	text4
  1403  0471                     __ptext4:	
  1404 ;; *************** function _Lcd_Write_String *****************
  1405 ;; Defined at:
  1406 ;;		line 97 in file "lcd.h"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  a               2    5[COMMON] PTR unsigned char 
  1409 ;;		 -> STR_7(2), STR_4(2), main@s(10), STR_1(16), 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  i               2   10[COMMON] int 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;		None               void
  1414 ;; Registers used:
  1415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1421 ;;      Params:         2       0       0       0       0
  1422 ;;      Locals:         2       0       0       0       0
  1423 ;;      Temps:          3       0       0       0       0
  1424 ;;      Totals:         7       0       0       0       0
  1425 ;;Total ram usage:        7 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    2
  1428 ;; This function calls:
  1429 ;;		_Lcd_Write_Char
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           
  1436                           ;psect for function _Lcd_Write_String
  1437  0471                     _Lcd_Write_String:	
  1438                           
  1439                           ;lcd.h: 99: int i;
  1440                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  1441                           
  1442                           ;incstack = 0
  1443                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1444  0471  01FA               	clrf	Lcd_Write_String@i
  1445  0472  01FB               	clrf	Lcd_Write_String@i+1
  1446  0473                     l959:	
  1447  0473  087A               	movf	Lcd_Write_String@i,w
  1448  0474  0775               	addwf	Lcd_Write_String@a,w
  1449  0475  00F8               	movwf	??_Lcd_Write_String+1
  1450  0476  0876               	movf	Lcd_Write_String@a+1,w
  1451  0477  00F7               	movwf	??_Lcd_Write_String
  1452  0478  1803               	skipnc
  1453  0479  0AF7               	incf	??_Lcd_Write_String,f
  1454  047A  1BFA               	btfsc	Lcd_Write_String@i,7
  1455  047B  03F7               	decf	??_Lcd_Write_String,f
  1456  047C  0877               	movf	??_Lcd_Write_String,w
  1457  047D  00F9               	movwf	??_Lcd_Write_String+2
  1458  047E  0879               	movf	??_Lcd_Write_String+2,w
  1459  047F  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0480  1303               	bcf	3,6	;RP1=0, select bank0
  1461  0481  00FF               	movwf	127
  1462  0482  0878               	movf	??_Lcd_Write_String+1,w
  1463  0483  0084               	movwf	4
  1464  0484  120A  118A  2003  120A  118A  	fcall	stringtab
  1465  0489  3A00               	xorlw	0
  1466  048A  1903               	btfsc	3,2
  1467  048B  0008               	return
  1468                           
  1469                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  1470  048C  087A               	movf	Lcd_Write_String@i,w
  1471  048D  0775               	addwf	Lcd_Write_String@a,w
  1472  048E  00F8               	movwf	??_Lcd_Write_String+1
  1473  048F  0876               	movf	Lcd_Write_String@a+1,w
  1474  0490  00F7               	movwf	??_Lcd_Write_String
  1475  0491  1803               	skipnc
  1476  0492  0AF7               	incf	??_Lcd_Write_String,f
  1477  0493  1BFA               	btfsc	Lcd_Write_String@i,7
  1478  0494  03F7               	decf	??_Lcd_Write_String,f
  1479  0495  0877               	movf	??_Lcd_Write_String,w
  1480  0496  00F9               	movwf	??_Lcd_Write_String+2
  1481  0497  0879               	movf	??_Lcd_Write_String+2,w
  1482  0498  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0499  1303               	bcf	3,6	;RP1=0, select bank0
  1484  049A  00FF               	movwf	127
  1485  049B  0878               	movf	??_Lcd_Write_String+1,w
  1486  049C  0084               	movwf	4
  1487  049D  120A  118A  2003  120A  118A  	fcall	stringtab
  1488  04A2  120A  118A  23FC  120A  118A  	fcall	_Lcd_Write_Char
  1489  04A7  3001               	movlw	1
  1490  04A8  07FA               	addwf	Lcd_Write_String@i,f
  1491  04A9  1803               	skipnc
  1492  04AA  0AFB               	incf	Lcd_Write_String@i+1,f
  1493  04AB  3000               	movlw	0
  1494  04AC  07FB               	addwf	Lcd_Write_String@i+1,f
  1495  04AD  2C73               	goto	l959
  1496  04AE                     __end_of_Lcd_Write_String:	
  1497                           
  1498                           	psect	text5
  1499  03FC                     __ptext5:	
  1500 ;; *************** function _Lcd_Write_Char *****************
  1501 ;; Defined at:
  1502 ;;		line 81 in file "lcd.h"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  a               1    wreg     unsigned char 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  a               1    4[COMMON] unsigned char 
  1507 ;;  y               1    3[COMMON] unsigned char 
  1508 ;;  temp            1    2[COMMON] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;		None               void
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0, pclath, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1518 ;;      Params:         0       0       0       0       0
  1519 ;;      Locals:         3       0       0       0       0
  1520 ;;      Temps:          1       0       0       0       0
  1521 ;;      Totals:         4       0       0       0       0
  1522 ;;Total ram usage:        4 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    1
  1525 ;; This function calls:
  1526 ;;		_Lcd_Port
  1527 ;; This function is called by:
  1528 ;;		_Lcd_Write_String
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           
  1533                           ;psect for function _Lcd_Write_Char
  1534  03FC                     _Lcd_Write_Char:	
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1538                           ;Lcd_Write_Char@a stored from wreg
  1539  03FC  00F4               	movwf	Lcd_Write_Char@a
  1540                           
  1541                           ;lcd.h: 83: char temp,y;
  1542                           ;lcd.h: 84: temp = a&0x0F;
  1543  03FD  0874               	movf	Lcd_Write_Char@a,w
  1544  03FE  390F               	andlw	15
  1545  03FF  00F1               	movwf	??_Lcd_Write_Char
  1546  0400  0871               	movf	??_Lcd_Write_Char,w
  1547  0401  00F2               	movwf	Lcd_Write_Char@temp
  1548                           
  1549                           ;lcd.h: 85: y = a&0xF0;
  1550  0402  0874               	movf	Lcd_Write_Char@a,w
  1551  0403  39F0               	andlw	240
  1552  0404  00F1               	movwf	??_Lcd_Write_Char
  1553  0405  0871               	movf	??_Lcd_Write_Char,w
  1554  0406  00F3               	movwf	Lcd_Write_Char@y
  1555                           
  1556                           ;lcd.h: 86: RD2 = 1;
  1557  0407  1283               	bcf	3,5	;RP0=0, select bank0
  1558  0408  1303               	bcf	3,6	;RP1=0, select bank0
  1559  0409  1508               	bsf	8,2	;volatile
  1560                           
  1561                           ;lcd.h: 87: Lcd_Port(y>>4);
  1562  040A  0873               	movf	Lcd_Write_Char@y,w
  1563  040B  00F1               	movwf	??_Lcd_Write_Char
  1564  040C  3004               	movlw	4
  1565  040D                     u415:	
  1566  040D  1003               	clrc
  1567  040E  0CF1               	rrf	??_Lcd_Write_Char,f
  1568  040F  3EFF               	addlw	-1
  1569  0410  1D03               	skipz
  1570  0411  2C0D               	goto	u415
  1571  0412  0871               	movf	??_Lcd_Write_Char,w
  1572  0413  120A  118A  2396  120A  118A  	fcall	_Lcd_Port
  1573                           
  1574                           ;lcd.h: 88: RD3 = 1;
  1575  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1577  041A  1588               	bsf	8,3	;volatile
  1578                           
  1579                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1580  041B  301A               	movlw	26
  1581  041C  00F1               	movwf	??_Lcd_Write_Char
  1582  041D                     u757:	
  1583  041D  0BF1               	decfsz	??_Lcd_Write_Char,f
  1584  041E  2C1D               	goto	u757
  1585  041F  0000               	nop
  1586                           
  1587                           ;lcd.h: 90: RD3 = 0;
  1588  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0422  1188               	bcf	8,3	;volatile
  1591                           
  1592                           ;lcd.h: 91: Lcd_Port(temp);
  1593  0423  0872               	movf	Lcd_Write_Char@temp,w
  1594  0424  120A  118A  2396  120A  118A  	fcall	_Lcd_Port
  1595                           
  1596                           ;lcd.h: 92: RD3 = 1;
  1597  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1598  042A  1303               	bcf	3,6	;RP1=0, select bank0
  1599  042B  1588               	bsf	8,3	;volatile
  1600                           
  1601                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1602  042C  301A               	movlw	26
  1603  042D  00F1               	movwf	??_Lcd_Write_Char
  1604  042E                     u767:	
  1605  042E  0BF1               	decfsz	??_Lcd_Write_Char,f
  1606  042F  2C2E               	goto	u767
  1607  0430  0000               	nop
  1608                           
  1609                           ;lcd.h: 94: RD3 = 0;
  1610  0431  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0432  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0433  1188               	bcf	8,3	;volatile
  1613  0434  0008               	return
  1614  0435                     __end_of_Lcd_Write_Char:	
  1615                           
  1616                           	psect	text6
  1617  04AE                     __ptext6:	
  1618 ;; *************** function _Lcd_Set_Cursor *****************
  1619 ;; Defined at:
  1620 ;;		line 41 in file "lcd.h"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;  a               1    wreg     unsigned char 
  1623 ;;  b               1    4[COMMON] unsigned char 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  a               1    7[COMMON] unsigned char 
  1626 ;;  temp            1   10[COMMON] unsigned char 
  1627 ;;  y               1    9[COMMON] unsigned char 
  1628 ;;  z               1    8[COMMON] unsigned char 
  1629 ;; Return value:  Size  Location     Type
  1630 ;;		None               void
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, pclath, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1638 ;;      Params:         1       0       0       0       0
  1639 ;;      Locals:         4       0       0       0       0
  1640 ;;      Temps:          2       0       0       0       0
  1641 ;;      Totals:         7       0       0       0       0
  1642 ;;Total ram usage:        7 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    2
  1645 ;; This function calls:
  1646 ;;		_Lcd_Cmd
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           
  1653                           ;psect for function _Lcd_Set_Cursor
  1654  04AE                     _Lcd_Set_Cursor:	
  1655                           
  1656                           ;incstack = 0
  1657                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1658                           ;Lcd_Set_Cursor@a stored from wreg
  1659  04AE  00F7               	movwf	Lcd_Set_Cursor@a
  1660                           
  1661                           ;lcd.h: 43: char temp,z,y;
  1662                           ;lcd.h: 44: if(a == 1)
  1663  04AF  0377               	decf	Lcd_Set_Cursor@a,w
  1664  04B0  1D03               	btfss	3,2
  1665  04B1  2CD3               	goto	l933
  1666                           
  1667                           ;lcd.h: 45: {
  1668                           ;lcd.h: 46: temp = 0x80 + b - 1;
  1669  04B2  0874               	movf	Lcd_Set_Cursor@b,w
  1670  04B3  3E7F               	addlw	127
  1671  04B4  00F5               	movwf	??_Lcd_Set_Cursor
  1672  04B5  0875               	movf	??_Lcd_Set_Cursor,w
  1673  04B6  00FA               	movwf	Lcd_Set_Cursor@temp
  1674                           
  1675                           ;lcd.h: 47: z = temp>>4;
  1676  04B7  087A               	movf	Lcd_Set_Cursor@temp,w
  1677  04B8  00F5               	movwf	??_Lcd_Set_Cursor
  1678  04B9  3004               	movlw	4
  1679  04BA                     u565:	
  1680  04BA  1003               	clrc
  1681  04BB  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1682  04BC  3EFF               	addlw	-1
  1683  04BD  1D03               	skipz
  1684  04BE  2CBA               	goto	u565
  1685  04BF  0875               	movf	??_Lcd_Set_Cursor,w
  1686  04C0  00F6               	movwf	??_Lcd_Set_Cursor+1
  1687  04C1  0876               	movf	??_Lcd_Set_Cursor+1,w
  1688  04C2  00F8               	movwf	Lcd_Set_Cursor@z
  1689                           
  1690                           ;lcd.h: 48: y = temp & 0x0F;
  1691  04C3  087A               	movf	Lcd_Set_Cursor@temp,w
  1692  04C4  390F               	andlw	15
  1693  04C5  00F5               	movwf	??_Lcd_Set_Cursor
  1694  04C6  0875               	movf	??_Lcd_Set_Cursor,w
  1695  04C7  00F9               	movwf	Lcd_Set_Cursor@y
  1696                           
  1697                           ;lcd.h: 49: Lcd_Cmd(z);
  1698  04C8  0878               	movf	Lcd_Set_Cursor@z,w
  1699  04C9  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1700                           
  1701                           ;lcd.h: 50: Lcd_Cmd(y);
  1702  04CE  0879               	movf	Lcd_Set_Cursor@y,w
  1703  04CF  120A  118A  23B0   	fcall	_Lcd_Cmd
  1704                           
  1705                           ;lcd.h: 51: }
  1706  04D2  0008               	return
  1707  04D3                     l933:	
  1708                           
  1709                           ;lcd.h: 52: else if(a == 2)
  1710  04D3  3002               	movlw	2
  1711  04D4  0677               	xorwf	Lcd_Set_Cursor@a,w
  1712  04D5  1D03               	btfss	3,2
  1713  04D6  0008               	return
  1714                           
  1715                           ;lcd.h: 53: {
  1716                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  1717  04D7  0874               	movf	Lcd_Set_Cursor@b,w
  1718  04D8  3EBF               	addlw	191
  1719  04D9  00F5               	movwf	??_Lcd_Set_Cursor
  1720  04DA  0875               	movf	??_Lcd_Set_Cursor,w
  1721  04DB  00FA               	movwf	Lcd_Set_Cursor@temp
  1722                           
  1723                           ;lcd.h: 55: z = temp>>4;
  1724  04DC  087A               	movf	Lcd_Set_Cursor@temp,w
  1725  04DD  00F5               	movwf	??_Lcd_Set_Cursor
  1726  04DE  3004               	movlw	4
  1727  04DF                     u585:	
  1728  04DF  1003               	clrc
  1729  04E0  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1730  04E1  3EFF               	addlw	-1
  1731  04E2  1D03               	skipz
  1732  04E3  2CDF               	goto	u585
  1733  04E4  0875               	movf	??_Lcd_Set_Cursor,w
  1734  04E5  00F6               	movwf	??_Lcd_Set_Cursor+1
  1735  04E6  0876               	movf	??_Lcd_Set_Cursor+1,w
  1736  04E7  00F8               	movwf	Lcd_Set_Cursor@z
  1737                           
  1738                           ;lcd.h: 56: y = temp & 0x0F;
  1739  04E8  087A               	movf	Lcd_Set_Cursor@temp,w
  1740  04E9  390F               	andlw	15
  1741  04EA  00F5               	movwf	??_Lcd_Set_Cursor
  1742  04EB  0875               	movf	??_Lcd_Set_Cursor,w
  1743  04EC  00F9               	movwf	Lcd_Set_Cursor@y
  1744                           
  1745                           ;lcd.h: 57: Lcd_Cmd(z);
  1746  04ED  0878               	movf	Lcd_Set_Cursor@z,w
  1747  04EE  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1748                           
  1749                           ;lcd.h: 58: Lcd_Cmd(y);
  1750  04F3  0879               	movf	Lcd_Set_Cursor@y,w
  1751  04F4  120A  118A  23B0   	fcall	_Lcd_Cmd
  1752  04F7  0008               	return
  1753  04F8                     __end_of_Lcd_Set_Cursor:	
  1754                           
  1755                           	psect	text7
  1756  04F8                     __ptext7:	
  1757 ;; *************** function _Lcd_Init *****************
  1758 ;; Defined at:
  1759 ;;		line 62 in file "lcd.h"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;		None               void
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0, pclath, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1773 ;;      Params:         0       0       0       0       0
  1774 ;;      Locals:         0       0       0       0       0
  1775 ;;      Temps:          2       0       0       0       0
  1776 ;;      Totals:         2       0       0       0       0
  1777 ;;Total ram usage:        2 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    2
  1780 ;; This function calls:
  1781 ;;		_Lcd_Cmd
  1782 ;;		_Lcd_Port
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _Lcd_Init
  1790  04F8                     _Lcd_Init:	
  1791                           
  1792                           ;lcd.h: 64: Lcd_Port(0x00);
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1796  04F8  3000               	movlw	0
  1797  04F9  120A  118A  2396  120A  118A  	fcall	_Lcd_Port
  1798                           
  1799                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  1800  04FE  3034               	movlw	52
  1801  04FF  00F5               	movwf	??_Lcd_Init+1
  1802  0500  30F1               	movlw	241
  1803  0501  00F4               	movwf	??_Lcd_Init
  1804  0502                     u777:	
  1805  0502  0BF4               	decfsz	??_Lcd_Init,f
  1806  0503  2D02               	goto	u777
  1807  0504  0BF5               	decfsz	??_Lcd_Init+1,f
  1808  0505  2D02               	goto	u777
  1809  0506  2D07               	nop2
  1810                           
  1811                           ;lcd.h: 66: Lcd_Cmd(0x03);
  1812  0507  3003               	movlw	3
  1813  0508  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1814                           
  1815                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1816  050D  300D               	movlw	13
  1817  050E  00F5               	movwf	??_Lcd_Init+1
  1818  050F  30FB               	movlw	251
  1819  0510  00F4               	movwf	??_Lcd_Init
  1820  0511                     u787:	
  1821  0511  0BF4               	decfsz	??_Lcd_Init,f
  1822  0512  2D11               	goto	u787
  1823  0513  0BF5               	decfsz	??_Lcd_Init+1,f
  1824  0514  2D11               	goto	u787
  1825  0515  2D16               	nop2
  1826                           
  1827                           ;lcd.h: 68: Lcd_Cmd(0x03);
  1828  0516  3003               	movlw	3
  1829  0517  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1830                           
  1831                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
  1832  051C  301D               	movlw	29
  1833  051D  00F5               	movwf	??_Lcd_Init+1
  1834  051E  3091               	movlw	145
  1835  051F  00F4               	movwf	??_Lcd_Init
  1836  0520                     u797:	
  1837  0520  0BF4               	decfsz	??_Lcd_Init,f
  1838  0521  2D20               	goto	u797
  1839  0522  0BF5               	decfsz	??_Lcd_Init+1,f
  1840  0523  2D20               	goto	u797
  1841                           
  1842                           ;lcd.h: 70: Lcd_Cmd(0x03);
  1843  0524  3003               	movlw	3
  1844  0525  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1845                           
  1846                           ;lcd.h: 72: Lcd_Cmd(0x02);
  1847  052A  3002               	movlw	2
  1848  052B  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1849                           
  1850                           ;lcd.h: 73: Lcd_Cmd(0x02);
  1851  0530  3002               	movlw	2
  1852  0531  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1853                           
  1854                           ;lcd.h: 74: Lcd_Cmd(0x08);
  1855  0536  3008               	movlw	8
  1856  0537  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1857                           
  1858                           ;lcd.h: 75: Lcd_Cmd(0x00);
  1859  053C  3000               	movlw	0
  1860  053D  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1861                           
  1862                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  1863  0542  300C               	movlw	12
  1864  0543  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1865                           
  1866                           ;lcd.h: 77: Lcd_Cmd(0x00);
  1867  0548  3000               	movlw	0
  1868  0549  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1869                           
  1870                           ;lcd.h: 78: Lcd_Cmd(0x06);
  1871  054E  3006               	movlw	6
  1872  054F  120A  118A  23B0   	fcall	_Lcd_Cmd
  1873  0552  0008               	return
  1874  0553                     __end_of_Lcd_Init:	
  1875                           
  1876                           	psect	text8
  1877  038B                     __ptext8:	
  1878 ;; *************** function _Lcd_Clear *****************
  1879 ;; Defined at:
  1880 ;;		line 35 in file "lcd.h"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;		None
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  2   34[None  ] int 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2, status,0, pclath, cstack
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1894 ;;      Params:         0       0       0       0       0
  1895 ;;      Locals:         0       0       0       0       0
  1896 ;;      Temps:          0       0       0       0       0
  1897 ;;      Totals:         0       0       0       0       0
  1898 ;;Total ram usage:        0 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    2
  1901 ;; This function calls:
  1902 ;;		_Lcd_Cmd
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _Lcd_Clear
  1910  038B                     _Lcd_Clear:	
  1911                           
  1912                           ;lcd.h: 37: Lcd_Cmd(0);
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1916  038B  3000               	movlw	0
  1917  038C  120A  118A  23B0  120A  118A  	fcall	_Lcd_Cmd
  1918                           
  1919                           ;lcd.h: 38: Lcd_Cmd(1);
  1920  0391  3001               	movlw	1
  1921  0392  120A  118A  23B0   	fcall	_Lcd_Cmd
  1922  0395  0008               	return
  1923  0396                     __end_of_Lcd_Clear:	
  1924                           
  1925                           	psect	text9
  1926  03B0                     __ptext9:	
  1927 ;; *************** function _Lcd_Cmd *****************
  1928 ;; Defined at:
  1929 ;;		line 26 in file "lcd.h"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  a               1    wreg     unsigned char 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  a               1    3[COMMON] unsigned char 
  1934 ;; Return value:  Size  Location     Type
  1935 ;;		None               void
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, pclath, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1943 ;;      Params:         0       0       0       0       0
  1944 ;;      Locals:         1       0       0       0       0
  1945 ;;      Temps:          2       0       0       0       0
  1946 ;;      Totals:         3       0       0       0       0
  1947 ;;Total ram usage:        3 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    1
  1950 ;; This function calls:
  1951 ;;		_Lcd_Port
  1952 ;; This function is called by:
  1953 ;;		_Lcd_Clear
  1954 ;;		_Lcd_Set_Cursor
  1955 ;;		_Lcd_Init
  1956 ;;		_Lcd_Shift_Right
  1957 ;;		_Lcd_Shift_Left
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _Lcd_Cmd
  1963  03B0                     _Lcd_Cmd:	
  1964                           
  1965                           ;incstack = 0
  1966                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1967                           ;Lcd_Cmd@a stored from wreg
  1968  03B0  00F3               	movwf	Lcd_Cmd@a
  1969                           
  1970                           ;lcd.h: 28: RD2 = 0;
  1971  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1972  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1973  03B3  1108               	bcf	8,2	;volatile
  1974                           
  1975                           ;lcd.h: 29: Lcd_Port(a);
  1976  03B4  0873               	movf	Lcd_Cmd@a,w
  1977  03B5  120A  118A  2396  120A  118A  	fcall	_Lcd_Port
  1978                           
  1979                           ;lcd.h: 30: RD3 = 1;
  1980  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  1981  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  1982  03BC  1588               	bsf	8,3	;volatile
  1983                           
  1984                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  1985  03BD  300B               	movlw	11
  1986  03BE  00F2               	movwf	??_Lcd_Cmd+1
  1987  03BF  3062               	movlw	98
  1988  03C0  00F1               	movwf	??_Lcd_Cmd
  1989  03C1                     u807:	
  1990  03C1  0BF1               	decfsz	??_Lcd_Cmd,f
  1991  03C2  2BC1               	goto	u807
  1992  03C3  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1993  03C4  2BC1               	goto	u807
  1994  03C5  0000               	nop
  1995                           
  1996                           ;lcd.h: 32: RD3 = 0;
  1997  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  1998  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  1999  03C8  1188               	bcf	8,3	;volatile
  2000  03C9  0008               	return
  2001  03CA                     __end_of_Lcd_Cmd:	
  2002                           
  2003                           	psect	text10
  2004  0396                     __ptext10:	
  2005 ;; *************** function _Lcd_Port *****************
  2006 ;; Defined at:
  2007 ;;		line 4 in file "lcd.h"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;  a               1    wreg     unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  a               1    0[COMMON] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;		None               void
  2014 ;; Registers used:
  2015 ;;		wreg
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2021 ;;      Params:         0       0       0       0       0
  2022 ;;      Locals:         1       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0
  2024 ;;      Totals:         1       0       0       0       0
  2025 ;;Total ram usage:        1 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_Lcd_Cmd
  2031 ;;		_Lcd_Init
  2032 ;;		_Lcd_Write_Char
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           
  2037                           ;psect for function _Lcd_Port
  2038  0396                     _Lcd_Port:	
  2039                           
  2040                           ;incstack = 0
  2041                           ; Regs used in _Lcd_Port: [wreg]
  2042                           ;Lcd_Port@a stored from wreg
  2043  0396  00F0               	movwf	Lcd_Port@a
  2044                           
  2045                           ;lcd.h: 6: if(a & 1)
  2046  0397  1C70               	btfss	Lcd_Port@a,0
  2047  0398  2B9D               	goto	l21
  2048                           
  2049                           ;lcd.h: 7: RD4 = 1;
  2050  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2051  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2052  039B  1608               	bsf	8,4	;volatile
  2053  039C  2BA0               	goto	l22
  2054  039D                     l21:	
  2055                           
  2056                           ;lcd.h: 8: else
  2057                           ;lcd.h: 9: RD4 = 0;
  2058  039D  1283               	bcf	3,5	;RP0=0, select bank0
  2059  039E  1303               	bcf	3,6	;RP1=0, select bank0
  2060  039F  1208               	bcf	8,4	;volatile
  2061  03A0                     l22:	
  2062                           
  2063                           ;lcd.h: 11: if(a & 2)
  2064  03A0  1CF0               	btfss	Lcd_Port@a,1
  2065  03A1  2BA4               	goto	l23
  2066                           
  2067                           ;lcd.h: 12: RD5 = 1;
  2068  03A2  1688               	bsf	8,5	;volatile
  2069  03A3  2BA5               	goto	l24
  2070  03A4                     l23:	
  2071                           
  2072                           ;lcd.h: 13: else
  2073                           ;lcd.h: 14: RD5 = 0;
  2074  03A4  1288               	bcf	8,5	;volatile
  2075  03A5                     l24:	
  2076                           
  2077                           ;lcd.h: 16: if(a & 4)
  2078  03A5  1D70               	btfss	Lcd_Port@a,2
  2079  03A6  2BA9               	goto	l25
  2080                           
  2081                           ;lcd.h: 17: RD6 = 1;
  2082  03A7  1708               	bsf	8,6	;volatile
  2083  03A8  2BAA               	goto	l26
  2084  03A9                     l25:	
  2085                           
  2086                           ;lcd.h: 18: else
  2087                           ;lcd.h: 19: RD6 = 0;
  2088  03A9  1308               	bcf	8,6	;volatile
  2089  03AA                     l26:	
  2090                           
  2091                           ;lcd.h: 21: if(a & 8)
  2092  03AA  1DF0               	btfss	Lcd_Port@a,3
  2093  03AB  2BAE               	goto	l27
  2094                           
  2095                           ;lcd.h: 22: RD7 = 1;
  2096  03AC  1788               	bsf	8,7	;volatile
  2097  03AD  0008               	return
  2098  03AE                     l27:	
  2099                           
  2100                           ;lcd.h: 23: else
  2101                           ;lcd.h: 24: RD7 = 0;
  2102  03AE  1388               	bcf	8,7	;volatile
  2103  03AF  0008               	return
  2104  03B0                     __end_of_Lcd_Port:	
  2105  007E                     btemp	set	126	;btemp
  2106  007E                     wtemp	set	126
  2107  007E                     wtemp0	set	126
  2108  0080                     wtemp1	set	128
  2109  0082                     wtemp2	set	130
  2110  0084                     wtemp3	set	132
  2111  0086                     wtemp4	set	134
  2112  0088                     wtemp5	set	136
  2113  007F                     wtemp6	set	127
  2114  007E                     ttemp	set	126
  2115  007E                     ttemp0	set	126
  2116  0081                     ttemp1	set	129
  2117  0084                     ttemp2	set	132
  2118  0087                     ttemp3	set	135
  2119  007F                     ttemp4	set	127
  2120  007E                     ltemp	set	126
  2121  007E                     ltemp0	set	126
  2122  0082                     ltemp1	set	130
  2123  0086                     ltemp2	set	134
  2124  0080                     ltemp3	set	128


Data Sizes:
    Strings     21
    Constant    10
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      38
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@s(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> STR_7(CODE[2]), STR_4(CODE[2]), main@s(BANK0[10]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->___lwmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0    5741
                                             13 BANK0     19    19      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___lwdiv
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    2036
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     583
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     586
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     745
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     751
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      34       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      26       5       47.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      34      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Nov 21 22:19:33 2015

                        pc 0002                __CFG_CP$OFF 0000                         l21 039D  
                       l22 03A0                         l23 03A4                         l24 03A5  
                       l25 03A9                         l26 03AA                         l27 03AE  
                       fsr 0004                        l913 03EC                        l907 03D0  
                      l933 04D3                        l909 03DE                        l917 03F7  
                      l891 0461                        l883 043D                        l971 057C  
                      l885 044B                        l959 0473                        l895 046C  
                      l975 0581                        l993 05C6                        l977 0593  
                      l969 057A                        l987 05A5                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        u415 040D  
                      u505 03D3               __CFG_CPD$OFF 0000                        u435 0440  
                      u525 03E4                        u455 044C                        u535 03ED  
                      u465 0458                        u475 0462                        u565 04BA  
                      u645 05BC                        u807 03C1                        u585 04DF  
                      u737 0636                        u747 07B4                        u757 041D  
                      u685 07AC                        u767 042E                        u695 07CA  
                      u777 0502                        u787 0511                        u797 0520  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
             __CFG_LVP$OFF 0000                       l1001 05CA                       l1003 055A  
                     l1005 060B                       l1101 07EE                       l1019 061D  
                     l1083 07AE                       l1095 07E1                       l1087 07CC  
                     STR_1 001D                       STR_2 002D                       STR_3 002D  
                     STR_4 0030                       STR_5 002D                       STR_6 002D  
                     STR_7 0030                       STR_8 002D                       STR_9 002D  
             __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0075                       _main 0610  
                     _hour 0040                       btemp 007E              __CFG_BOREN$ON 0000  
                     ltemp 007E                       start 0000                       ttemp 007E  
       ??_Lcd_Write_String 0077                       wtemp 007E            __end_of_Lcd_Cmd 03CA  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___lwdiv 0471  
          __end_of___lwmod 03FC    __size_of_Lcd_Set_Cursor 004A                      _TRISD 0088  
          __end_of_dpowers 001D                      main@i 003A                      main@s 0030  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
          __end_of_sprintf 0610           __end_of_Lcd_Init 0553           __end_of_Lcd_Port 03B0  
          __initialization 07F6               __end_of_main 07F6                     ??_main 002D  
       __size_of_Lcd_Clear 000B                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039  
           __CFG_PWRTE$OFF 0000                  ??___lwdiv 0074                  ??___lwmod 007C  
                   _minute 0042                     _second 0044                  ??_sprintf 0023  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC          __end_of_Lcd_Clear 0396  
           __pcstackCOMMON 0070             _Lcd_Set_Cursor 04AE                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pbssBANK0 0040                 __pmaintext 0610  
__size_of_Lcd_Write_String 003D     __end_of_Lcd_Set_Cursor 04F8                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 03FC  
                  _Lcd_Cmd 03B0                    ___lwdiv 0435                    ___lwmod 03CA  
          ?_Lcd_Set_Cursor 0074                    __ptext1 0553                    __ptext2 03CA  
                  __ptext3 0435                    __ptext4 0471                    __ptext5 03FC  
                  __ptext6 04AE                    __ptext7 04F8                    __ptext8 038B  
                  __ptext9 03B0                    _dpowers 0013                    _sprintf 0553  
   __end_of_Lcd_Write_Char 0435       end_of_initialization 07FC                  Lcd_Port@a 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075          Lcd_Write_String@i 007A  
                _Lcd_Clear 038B           _Lcd_Write_String 0471        start_initialization 07F6  
        __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070  
          Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 0026  
              sprintf@prec 002A           ___lwdiv@dividend 0072           ??_Lcd_Set_Cursor 0075  
                 ?___lwdiv 0070                   ?___lwmod 0078                  __pstrings 0003  
         ___lwdiv@quotient 0075                   ?_sprintf 0020                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074                __stringbase 0012           ??_Lcd_Write_Char 0071  
                 _Lcd_Init 04F8                   _Lcd_Port 0396   __end_of_Lcd_Write_String 04AE  
         __size_of_Lcd_Cmd 001A           __size_of___lwdiv 003C           __size_of___lwmod 0032  
       __end_of__stringtab 0013                 sprintf@val 0028                   _main$507 003C  
                 _main$508 003E            ___lwdiv@divisor 0070            ___lwdiv@counter 0077  
                 __ptext10 0396           __size_of_sprintf 00BD              __size_of_main 01E6  
       Lcd_Write_Char@temp 0072                  sprintf@ap 0027                  sprintf@sp 002B  
         ___lwmod@dividend 007A                  stringcode 000D         Lcd_Set_Cursor@temp 007A  
                 sprintf@c 002C                   sprintf@f 0020            ___lwmod@divisor 0078  
          ___lwmod@counter 007D                   stringdir 000D                   stringtab 0003  
