CCS PCM C Compiler, Version 5.015, 5967               18-Thg6-21 12:52

               Filename:   E:\PIC16F877A\tieuluan\NHOM_2\code\code2\main.lst

               ROM used:   1660 words (20%)
                           Largest free fragment is 2048
               RAM used:   35 (10%) at main() level
                           54 (15%) worst case
               Stack used: 5 locations (2 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5CA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   1E0
....................  
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  C0
0036:  RETLW  F9
0037:  RETLW  A4
0038:  RETLW  B0
0039:  RETLW  99
003A:  RETLW  92
003B:  RETLW  82
003C:  RETLW  F8
003D:  RETLW  80
003E:  RETLW  90
*
0102:  MOVF   4F,W
0103:  CLRF   78
0104:  SUBWF  4E,W
0105:  BTFSC  03.0
0106:  GOTO   10A
0107:  MOVF   4E,W
0108:  MOVWF  77
0109:  GOTO   116
010A:  CLRF   77
010B:  MOVLW  08
010C:  MOVWF  50
010D:  RLF    4E,F
010E:  RLF    77,F
010F:  MOVF   4F,W
0110:  SUBWF  77,W
0111:  BTFSC  03.0
0112:  MOVWF  77
0113:  RLF    78,F
0114:  DECFSZ 50,F
0115:  GOTO   10D
0116:  RETURN
*
015C:  CLRF   77
015D:  CLRF   78
015E:  MOVF   4F,W
015F:  BCF    03.0
0160:  BTFSC  50.0
0161:  ADDWF  77,F
0162:  RRF    77,F
0163:  RRF    78,F
0164:  BTFSC  50.1
0165:  ADDWF  77,F
0166:  RRF    77,F
0167:  RRF    78,F
0168:  BTFSC  50.2
0169:  ADDWF  77,F
016A:  RRF    77,F
016B:  RRF    78,F
016C:  BTFSC  50.3
016D:  ADDWF  77,F
016E:  RRF    77,F
016F:  RRF    78,F
0170:  BTFSC  50.4
0171:  ADDWF  77,F
0172:  RRF    77,F
0173:  RRF    78,F
0174:  BTFSC  50.5
0175:  ADDWF  77,F
0176:  RRF    77,F
0177:  RRF    78,F
0178:  BTFSC  50.6
0179:  ADDWF  77,F
017A:  RRF    77,F
017B:  RRF    78,F
017C:  BTFSC  50.7
017D:  ADDWF  77,F
017E:  RRF    77,F
017F:  RRF    78,F
....................  
.................... #list 
....................  
.................... #device *= 16 ADC = 10 
.................... #use delay(clock = 20000000) // khai bao thach anh(20Mhz) 
.................... #FUSES NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
.................... #use i2c(Master, sda = PIN_C4, scl = PIN_C3) // khai bao i2c  
*
003F:  MOVLW  08
0040:  MOVWF  78
0041:  MOVLW  04
0042:  MOVWF  77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  BCF    07.3
0046:  BCF    28.3
0047:  MOVF   28,W
0048:  BSF    03.5
0049:  MOVWF  07
004A:  MOVLW  03
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  BCF    03.5
004F:  RLF    4C,F
0050:  BCF    07.4
0051:  BTFSS  03.0
0052:  GOTO   059
0053:  BSF    28.4
0054:  MOVF   28,W
0055:  BSF    03.5
0056:  MOVWF  07
0057:  GOTO   05D
0058:  BCF    03.5
0059:  BCF    28.4
005A:  MOVF   28,W
005B:  BSF    03.5
005C:  MOVWF  07
005D:  NOP
005E:  BCF    03.5
005F:  BSF    28.3
0060:  MOVF   28,W
0061:  BSF    03.5
0062:  MOVWF  07
0063:  BCF    03.5
0064:  BTFSS  07.3
0065:  GOTO   064
0066:  DECFSZ 78,F
0067:  GOTO   041
0068:  MOVLW  04
0069:  MOVWF  77
006A:  DECFSZ 77,F
006B:  GOTO   06A
006C:  BCF    07.3
006D:  BCF    28.3
006E:  MOVF   28,W
006F:  BSF    03.5
0070:  MOVWF  07
0071:  NOP
0072:  BCF    03.5
0073:  BSF    28.4
0074:  MOVF   28,W
0075:  BSF    03.5
0076:  MOVWF  07
0077:  MOVLW  03
0078:  MOVWF  77
0079:  DECFSZ 77,F
007A:  GOTO   079
007B:  MOVLW  03
007C:  MOVWF  77
007D:  DECFSZ 77,F
007E:  GOTO   07D
007F:  BCF    03.5
0080:  BSF    28.3
0081:  MOVF   28,W
0082:  BSF    03.5
0083:  MOVWF  07
0084:  BCF    03.5
0085:  BTFSS  07.3
0086:  GOTO   085
0087:  CLRF   78
0088:  MOVLW  03
0089:  MOVWF  77
008A:  DECFSZ 77,F
008B:  GOTO   08A
008C:  BTFSC  07.4
008D:  BSF    78.0
008E:  BCF    07.3
008F:  BCF    28.3
0090:  MOVF   28,W
0091:  BSF    03.5
0092:  MOVWF  07
0093:  BCF    03.5
0094:  BCF    07.4
0095:  BCF    28.4
0096:  MOVF   28,W
0097:  BSF    03.5
0098:  MOVWF  07
0099:  BCF    03.5
009A:  RETURN
009B:  MOVLW  08
009C:  MOVWF  4D
009D:  MOVF   77,W
009E:  MOVWF  4E
009F:  BSF    28.4
00A0:  MOVF   28,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  MOVLW  03
00A4:  MOVWF  77
00A5:  DECFSZ 77,F
00A6:  GOTO   0A5
00A7:  BCF    03.5
00A8:  BSF    28.3
00A9:  MOVF   28,W
00AA:  BSF    03.5
00AB:  MOVWF  07
00AC:  BCF    03.5
00AD:  BTFSS  07.3
00AE:  GOTO   0AD
00AF:  BTFSC  07.4
00B0:  BSF    03.0
00B1:  BTFSS  07.4
00B2:  BCF    03.0
00B3:  RLF    78,F
00B4:  MOVLW  04
00B5:  MOVWF  77
00B6:  DECFSZ 77,F
00B7:  GOTO   0B6
00B8:  BCF    28.3
00B9:  MOVF   28,W
00BA:  BSF    03.5
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BCF    07.3
00BE:  DECFSZ 4D,F
00BF:  GOTO   09F
00C0:  BSF    28.4
00C1:  MOVF   28,W
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  MOVLW  03
00C5:  MOVWF  77
00C6:  DECFSZ 77,F
00C7:  GOTO   0C6
00C8:  BCF    03.5
00C9:  BCF    07.4
00CA:  MOVF   4E,W
00CB:  BTFSC  03.2
00CC:  GOTO   0D2
00CD:  BCF    28.4
00CE:  MOVF   28,W
00CF:  BSF    03.5
00D0:  MOVWF  07
00D1:  BCF    03.5
00D2:  NOP
00D3:  BSF    28.3
00D4:  MOVF   28,W
00D5:  BSF    03.5
00D6:  MOVWF  07
00D7:  BCF    03.5
00D8:  BTFSS  07.3
00D9:  GOTO   0D8
00DA:  MOVLW  04
00DB:  MOVWF  77
00DC:  DECFSZ 77,F
00DD:  GOTO   0DC
00DE:  BCF    07.3
00DF:  BCF    28.3
00E0:  MOVF   28,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  MOVLW  03
00E4:  MOVWF  77
00E5:  DECFSZ 77,F
00E6:  GOTO   0E5
00E7:  BCF    03.5
00E8:  BCF    07.4
00E9:  BCF    28.4
00EA:  MOVF   28,W
00EB:  BSF    03.5
00EC:  MOVWF  07
00ED:  BCF    03.5
00EE:  RETURN
.................... #use rs232(baud = 9600, parity = N, xmit = PIN_C6, rcv = PIN_C7, bits = 8) // khai bao uart(rs232) 
.................... const char mang[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; // khai bao mang Anot chung  
....................  
.................... #include "ds1307.c" // module ds1307 
.................... BYTE bin2bcd(BYTE binary_value); 
.................... BYTE bcd2bin(BYTE bcd_value); 
....................  
.................... void ds1307_init(void) 
*
03B0:  CLRF   3D
03B1:  CLRF   3E
03B2:  CLRF   3F
03B3:  CLRF   40
03B4:  CLRF   41
03B5:  CLRF   42
03B6:  CLRF   43
.................... { 
....................     BYTE initsec = 0; 
....................     BYTE initmin = 0; 
....................     BYTE inithr = 0; 
....................     BYTE initdow = 0; 
....................     BYTE initday = 0; 
....................     BYTE initmth = 0; 
....................     BYTE inityear = 0; 
....................     i2c_start(); 
03B7:  BSF    28.4
03B8:  MOVF   28,W
03B9:  BSF    03.5
03BA:  MOVWF  07
03BB:  MOVLW  04
03BC:  MOVWF  77
03BD:  DECFSZ 77,F
03BE:  GOTO   3BD
03BF:  BCF    03.5
03C0:  BSF    28.3
03C1:  MOVF   28,W
03C2:  BSF    03.5
03C3:  MOVWF  07
03C4:  MOVLW  03
03C5:  MOVWF  77
03C6:  DECFSZ 77,F
03C7:  GOTO   3C6
03C8:  BCF    03.5
03C9:  BCF    07.4
03CA:  BCF    28.4
03CB:  MOVF   28,W
03CC:  BSF    03.5
03CD:  MOVWF  07
03CE:  MOVLW  04
03CF:  MOVWF  77
03D0:  DECFSZ 77,F
03D1:  GOTO   3D0
03D2:  BCF    03.5
03D3:  BCF    07.3
03D4:  BCF    28.3
03D5:  MOVF   28,W
03D6:  BSF    03.5
03D7:  MOVWF  07
03D8:  BCF    03.5
03D9:  CLRF   27
03DA:  BTFSC  0B.7
03DB:  BSF    27.7
03DC:  BCF    0B.7
....................     i2c_write(0xD0); // WR to RTC 
03DD:  MOVLW  D0
03DE:  MOVWF  4C
03DF:  CALL   03F
03E0:  BTFSC  27.7
03E1:  BSF    0B.7
03E2:  CLRF   27
03E3:  BTFSC  0B.7
03E4:  BSF    27.7
03E5:  BCF    0B.7
....................     i2c_write(0x00); // REG 0 
03E6:  CLRF   4C
03E7:  CALL   03F
03E8:  BTFSC  27.7
03E9:  BSF    0B.7
....................     i2c_start(); 
03EA:  BSF    28.4
03EB:  MOVF   28,W
03EC:  BSF    03.5
03ED:  MOVWF  07
03EE:  MOVLW  04
03EF:  MOVWF  77
03F0:  DECFSZ 77,F
03F1:  GOTO   3F0
03F2:  BCF    03.5
03F3:  BSF    28.3
03F4:  MOVF   28,W
03F5:  BSF    03.5
03F6:  MOVWF  07
03F7:  MOVLW  03
03F8:  MOVWF  77
03F9:  DECFSZ 77,F
03FA:  GOTO   3F9
03FB:  BCF    03.5
03FC:  BTFSS  07.3
03FD:  GOTO   3FC
03FE:  BCF    07.4
03FF:  BCF    28.4
0400:  MOVF   28,W
0401:  BSF    03.5
0402:  MOVWF  07
0403:  MOVLW  04
0404:  MOVWF  77
0405:  DECFSZ 77,F
0406:  GOTO   405
0407:  BCF    03.5
0408:  BCF    07.3
0409:  BCF    28.3
040A:  MOVF   28,W
040B:  BSF    03.5
040C:  MOVWF  07
040D:  BCF    03.5
040E:  CLRF   27
040F:  BTFSC  0B.7
0410:  BSF    27.7
0411:  BCF    0B.7
....................     i2c_write(0xD1); // RD from RTC 
0412:  MOVLW  D1
0413:  MOVWF  4C
0414:  CALL   03F
0415:  BTFSC  27.7
0416:  BSF    0B.7
....................     initsec = bcd2bin(i2c_read() & 0x7f); 
0417:  MOVLW  01
0418:  MOVWF  77
0419:  CLRF   27
041A:  BTFSC  0B.7
041B:  BSF    27.7
041C:  BCF    0B.7
041D:  CALL   09B
041E:  BTFSC  27.7
041F:  BSF    0B.7
0420:  MOVF   78,W
0421:  ANDLW  7F
0422:  MOVWF  44
0423:  CLRF   27
0424:  BTFSC  0B.7
0425:  BSF    27.7
0426:  BCF    0B.7
0427:  MOVF   44,W
0428:  MOVWF  4D
0429:  CALL   0EF
042A:  BTFSC  27.7
042B:  BSF    0B.7
042C:  MOVF   78,W
042D:  MOVWF  3D
....................     initmin = bcd2bin(i2c_read() & 0x7f); 
042E:  MOVLW  01
042F:  MOVWF  77
0430:  CLRF   27
0431:  BTFSC  0B.7
0432:  BSF    27.7
0433:  BCF    0B.7
0434:  CALL   09B
0435:  BTFSC  27.7
0436:  BSF    0B.7
0437:  MOVF   78,W
0438:  ANDLW  7F
0439:  MOVWF  44
043A:  CLRF   27
043B:  BTFSC  0B.7
043C:  BSF    27.7
043D:  BCF    0B.7
043E:  MOVF   44,W
043F:  MOVWF  4D
0440:  CALL   0EF
0441:  BTFSC  27.7
0442:  BSF    0B.7
0443:  MOVF   78,W
0444:  MOVWF  3E
....................     inithr = bcd2bin(i2c_read() & 0x3f); 
0445:  MOVLW  01
0446:  MOVWF  77
0447:  CLRF   27
0448:  BTFSC  0B.7
0449:  BSF    27.7
044A:  BCF    0B.7
044B:  CALL   09B
044C:  BTFSC  27.7
044D:  BSF    0B.7
044E:  MOVF   78,W
044F:  ANDLW  3F
0450:  MOVWF  44
0451:  CLRF   27
0452:  BTFSC  0B.7
0453:  BSF    27.7
0454:  BCF    0B.7
0455:  MOVF   44,W
0456:  MOVWF  4D
0457:  CALL   0EF
0458:  BTFSC  27.7
0459:  BSF    0B.7
045A:  MOVF   78,W
045B:  MOVWF  3F
....................     initdow = bcd2bin(i2c_read() & 0x7f); // REG 3 
045C:  MOVLW  01
045D:  MOVWF  77
045E:  CLRF   27
045F:  BTFSC  0B.7
0460:  BSF    27.7
0461:  BCF    0B.7
0462:  CALL   09B
0463:  BTFSC  27.7
0464:  BSF    0B.7
0465:  MOVF   78,W
0466:  ANDLW  7F
0467:  MOVWF  44
0468:  CLRF   27
0469:  BTFSC  0B.7
046A:  BSF    27.7
046B:  BCF    0B.7
046C:  MOVF   44,W
046D:  MOVWF  4D
046E:  CALL   0EF
046F:  BTFSC  27.7
0470:  BSF    0B.7
0471:  MOVF   78,W
0472:  MOVWF  40
....................     initday = bcd2bin(i2c_read() & 0x3f); // REG 4 
0473:  MOVLW  01
0474:  MOVWF  77
0475:  CLRF   27
0476:  BTFSC  0B.7
0477:  BSF    27.7
0478:  BCF    0B.7
0479:  CALL   09B
047A:  BTFSC  27.7
047B:  BSF    0B.7
047C:  MOVF   78,W
047D:  ANDLW  3F
047E:  MOVWF  44
047F:  CLRF   27
0480:  BTFSC  0B.7
0481:  BSF    27.7
0482:  BCF    0B.7
0483:  MOVF   44,W
0484:  MOVWF  4D
0485:  CALL   0EF
0486:  BTFSC  27.7
0487:  BSF    0B.7
0488:  MOVF   78,W
0489:  MOVWF  41
....................     initmth = bcd2bin(i2c_read() & 0x1f); // REG 5 
048A:  MOVLW  01
048B:  MOVWF  77
048C:  CLRF   27
048D:  BTFSC  0B.7
048E:  BSF    27.7
048F:  BCF    0B.7
0490:  CALL   09B
0491:  BTFSC  27.7
0492:  BSF    0B.7
0493:  MOVF   78,W
0494:  ANDLW  1F
0495:  MOVWF  44
0496:  CLRF   27
0497:  BTFSC  0B.7
0498:  BSF    27.7
0499:  BCF    0B.7
049A:  MOVF   44,W
049B:  MOVWF  4D
049C:  CALL   0EF
049D:  BTFSC  27.7
049E:  BSF    0B.7
049F:  MOVF   78,W
04A0:  MOVWF  42
....................     inityear = bcd2bin(i2c_read(0));      // REG 6 
04A1:  CLRF   77
04A2:  CLRF   27
04A3:  BTFSC  0B.7
04A4:  BSF    27.7
04A5:  BCF    0B.7
04A6:  CALL   09B
04A7:  BTFSC  27.7
04A8:  BSF    0B.7
04A9:  MOVF   78,W
04AA:  MOVWF  44
04AB:  CLRF   27
04AC:  BTFSC  0B.7
04AD:  BSF    27.7
04AE:  BCF    0B.7
04AF:  MOVF   78,W
04B0:  MOVWF  4D
04B1:  CALL   0EF
04B2:  BTFSC  27.7
04B3:  BSF    0B.7
04B4:  MOVF   78,W
04B5:  MOVWF  43
....................     i2c_stop(); 
04B6:  BCF    28.4
04B7:  MOVF   28,W
04B8:  BSF    03.5
04B9:  MOVWF  07
04BA:  NOP
04BB:  BCF    03.5
04BC:  BSF    28.3
04BD:  MOVF   28,W
04BE:  BSF    03.5
04BF:  MOVWF  07
04C0:  BCF    03.5
04C1:  BTFSS  07.3
04C2:  GOTO   4C1
04C3:  MOVLW  04
04C4:  MOVWF  77
04C5:  DECFSZ 77,F
04C6:  GOTO   4C5
04C7:  GOTO   4C8
04C8:  NOP
04C9:  BSF    28.4
04CA:  MOVF   28,W
04CB:  BSF    03.5
04CC:  MOVWF  07
04CD:  MOVLW  04
04CE:  MOVWF  77
04CF:  DECFSZ 77,F
04D0:  GOTO   4CF
....................     delay_us(3); 
04D1:  MOVLW  04
04D2:  MOVWF  77
04D3:  DECFSZ 77,F
04D4:  GOTO   4D3
04D5:  GOTO   4D6
....................  
....................     i2c_start(); 
04D6:  BCF    03.5
04D7:  BSF    28.4
04D8:  MOVF   28,W
04D9:  BSF    03.5
04DA:  MOVWF  07
04DB:  MOVLW  04
04DC:  MOVWF  77
04DD:  DECFSZ 77,F
04DE:  GOTO   4DD
04DF:  BCF    03.5
04E0:  BSF    28.3
04E1:  MOVF   28,W
04E2:  BSF    03.5
04E3:  MOVWF  07
04E4:  MOVLW  03
04E5:  MOVWF  77
04E6:  DECFSZ 77,F
04E7:  GOTO   4E6
04E8:  BCF    03.5
04E9:  BCF    07.4
04EA:  BCF    28.4
04EB:  MOVF   28,W
04EC:  BSF    03.5
04ED:  MOVWF  07
04EE:  MOVLW  04
04EF:  MOVWF  77
04F0:  DECFSZ 77,F
04F1:  GOTO   4F0
04F2:  BCF    03.5
04F3:  BCF    07.3
04F4:  BCF    28.3
04F5:  MOVF   28,W
04F6:  BSF    03.5
04F7:  MOVWF  07
04F8:  BCF    03.5
04F9:  CLRF   27
04FA:  BTFSC  0B.7
04FB:  BSF    27.7
04FC:  BCF    0B.7
....................     i2c_write(0xD0);              // WR to RTC 
04FD:  MOVLW  D0
04FE:  MOVWF  4C
04FF:  CALL   03F
0500:  BTFSC  27.7
0501:  BSF    0B.7
0502:  CLRF   27
0503:  BTFSC  0B.7
0504:  BSF    27.7
0505:  BCF    0B.7
....................     i2c_write(0x00);              // REG 0 
0506:  CLRF   4C
0507:  CALL   03F
0508:  BTFSC  27.7
0509:  BSF    0B.7
....................     i2c_write(bin2bcd(initsec));  // Start oscillator with current "seconds value 
050A:  MOVF   3D,W
050B:  MOVWF  44
050C:  CALL   39D
050D:  MOVF   78,W
050E:  MOVWF  44
050F:  CLRF   27
0510:  BTFSC  0B.7
0511:  BSF    27.7
0512:  BCF    0B.7
0513:  MOVF   78,W
0514:  MOVWF  4C
0515:  CALL   03F
0516:  BTFSC  27.7
0517:  BSF    0B.7
....................     i2c_write(bin2bcd(initmin));  // REG 1 
0518:  MOVF   3E,W
0519:  MOVWF  44
051A:  CALL   39D
051B:  MOVF   78,W
051C:  MOVWF  44
051D:  CLRF   27
051E:  BTFSC  0B.7
051F:  BSF    27.7
0520:  BCF    0B.7
0521:  MOVF   78,W
0522:  MOVWF  4C
0523:  CALL   03F
0524:  BTFSC  27.7
0525:  BSF    0B.7
....................     i2c_write(bin2bcd(inithr));   // REG 2 
0526:  MOVF   3F,W
0527:  MOVWF  44
0528:  CALL   39D
0529:  MOVF   78,W
052A:  MOVWF  44
052B:  CLRF   27
052C:  BTFSC  0B.7
052D:  BSF    27.7
052E:  BCF    0B.7
052F:  MOVF   78,W
0530:  MOVWF  4C
0531:  CALL   03F
0532:  BTFSC  27.7
0533:  BSF    0B.7
....................     i2c_write(bin2bcd(initdow));  // REG 3 
0534:  MOVF   40,W
0535:  MOVWF  44
0536:  CALL   39D
0537:  MOVF   78,W
0538:  MOVWF  44
0539:  CLRF   27
053A:  BTFSC  0B.7
053B:  BSF    27.7
053C:  BCF    0B.7
053D:  MOVF   78,W
053E:  MOVWF  4C
053F:  CALL   03F
0540:  BTFSC  27.7
0541:  BSF    0B.7
....................     i2c_write(bin2bcd(initday));  // REG 4 
0542:  MOVF   41,W
0543:  MOVWF  44
0544:  CALL   39D
0545:  MOVF   78,W
0546:  MOVWF  44
0547:  CLRF   27
0548:  BTFSC  0B.7
0549:  BSF    27.7
054A:  BCF    0B.7
054B:  MOVF   78,W
054C:  MOVWF  4C
054D:  CALL   03F
054E:  BTFSC  27.7
054F:  BSF    0B.7
....................     i2c_write(bin2bcd(initmth));  // REG 5 
0550:  MOVF   42,W
0551:  MOVWF  44
0552:  CALL   39D
0553:  MOVF   78,W
0554:  MOVWF  44
0555:  CLRF   27
0556:  BTFSC  0B.7
0557:  BSF    27.7
0558:  BCF    0B.7
0559:  MOVF   78,W
055A:  MOVWF  4C
055B:  CALL   03F
055C:  BTFSC  27.7
055D:  BSF    0B.7
....................     i2c_write(bin2bcd(inityear)); // REG 6 
055E:  MOVF   43,W
055F:  MOVWF  44
0560:  CALL   39D
0561:  MOVF   78,W
0562:  MOVWF  44
0563:  CLRF   27
0564:  BTFSC  0B.7
0565:  BSF    27.7
0566:  BCF    0B.7
0567:  MOVF   78,W
0568:  MOVWF  4C
0569:  CALL   03F
056A:  BTFSC  27.7
056B:  BSF    0B.7
....................     i2c_start(); 
056C:  BSF    28.4
056D:  MOVF   28,W
056E:  BSF    03.5
056F:  MOVWF  07
0570:  MOVLW  04
0571:  MOVWF  77
0572:  DECFSZ 77,F
0573:  GOTO   572
0574:  BCF    03.5
0575:  BSF    28.3
0576:  MOVF   28,W
0577:  BSF    03.5
0578:  MOVWF  07
0579:  MOVLW  03
057A:  MOVWF  77
057B:  DECFSZ 77,F
057C:  GOTO   57B
057D:  BCF    03.5
057E:  BTFSS  07.3
057F:  GOTO   57E
0580:  BCF    07.4
0581:  BCF    28.4
0582:  MOVF   28,W
0583:  BSF    03.5
0584:  MOVWF  07
0585:  MOVLW  04
0586:  MOVWF  77
0587:  DECFSZ 77,F
0588:  GOTO   587
0589:  BCF    03.5
058A:  BCF    07.3
058B:  BCF    28.3
058C:  MOVF   28,W
058D:  BSF    03.5
058E:  MOVWF  07
058F:  BCF    03.5
0590:  CLRF   27
0591:  BTFSC  0B.7
0592:  BSF    27.7
0593:  BCF    0B.7
....................     i2c_write(0xD0); // WR to RTC 
0594:  MOVLW  D0
0595:  MOVWF  4C
0596:  CALL   03F
0597:  BTFSC  27.7
0598:  BSF    0B.7
0599:  CLRF   27
059A:  BTFSC  0B.7
059B:  BSF    27.7
059C:  BCF    0B.7
....................     i2c_write(0x07); // Control Register 
059D:  MOVLW  07
059E:  MOVWF  4C
059F:  CALL   03F
05A0:  BTFSC  27.7
05A1:  BSF    0B.7
05A2:  CLRF   27
05A3:  BTFSC  0B.7
05A4:  BSF    27.7
05A5:  BCF    0B.7
....................     i2c_write(0x90); //  squarewave output pin 1Hz 
05A6:  MOVLW  90
05A7:  MOVWF  4C
05A8:  CALL   03F
05A9:  BTFSC  27.7
05AA:  BSF    0B.7
....................     i2c_stop(); 
05AB:  BCF    28.4
05AC:  MOVF   28,W
05AD:  BSF    03.5
05AE:  MOVWF  07
05AF:  NOP
05B0:  BCF    03.5
05B1:  BSF    28.3
05B2:  MOVF   28,W
05B3:  BSF    03.5
05B4:  MOVWF  07
05B5:  BCF    03.5
05B6:  BTFSS  07.3
05B7:  GOTO   5B6
05B8:  MOVLW  04
05B9:  MOVWF  77
05BA:  DECFSZ 77,F
05BB:  GOTO   5BA
05BC:  GOTO   5BD
05BD:  NOP
05BE:  BSF    28.4
05BF:  MOVF   28,W
05C0:  BSF    03.5
05C1:  MOVWF  07
05C2:  MOVLW  04
05C3:  MOVWF  77
05C4:  DECFSZ 77,F
05C5:  GOTO   5C4
05C6:  BCF    03.5
05C7:  BCF    0A.3
05C8:  BCF    0A.4
05C9:  GOTO   5F7 (RETURN)
.................... } 
....................  
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec) 
.................... { 
....................     sec &= 0x7F; 
....................     hr &= 0x3F; 
....................  
....................     i2c_start(); 
....................     i2c_write(0xD0);          // I2C write address 
....................     i2c_write(0x00);          // Start at REG 0 - Seconds 
....................     i2c_write(bin2bcd(sec));  // REG 0 
....................     i2c_write(bin2bcd(min));  // REG 1 
....................     i2c_write(bin2bcd(hr));   // REG 2 
....................     i2c_write(bin2bcd(dow));  // REG 3 
....................     i2c_write(bin2bcd(day));  // REG 4 
....................     i2c_write(bin2bcd(mth));  // REG 5 
....................     i2c_write(bin2bcd(year)); // REG 6 
....................     i2c_write(0x90);          // REG 7 - 1Hz squarewave output pin 
....................     i2c_stop(); 
.................... } 
....................  
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow) 
.................... { 
....................     i2c_start(); 
*
01E5:  BSF    28.4
01E6:  MOVF   28,W
01E7:  BSF    03.5
01E8:  MOVWF  07
01E9:  MOVLW  04
01EA:  MOVWF  77
01EB:  DECFSZ 77,F
01EC:  GOTO   1EB
01ED:  BCF    03.5
01EE:  BSF    28.3
01EF:  MOVF   28,W
01F0:  BSF    03.5
01F1:  MOVWF  07
01F2:  MOVLW  03
01F3:  MOVWF  77
01F4:  DECFSZ 77,F
01F5:  GOTO   1F4
01F6:  BCF    03.5
01F7:  BCF    07.4
01F8:  BCF    28.4
01F9:  MOVF   28,W
01FA:  BSF    03.5
01FB:  MOVWF  07
01FC:  MOVLW  04
01FD:  MOVWF  77
01FE:  DECFSZ 77,F
01FF:  GOTO   1FE
0200:  BCF    03.5
0201:  BCF    07.3
0202:  BCF    28.3
0203:  MOVF   28,W
0204:  BSF    03.5
0205:  MOVWF  07
....................     i2c_write(0xD0); 
0206:  MOVLW  D0
0207:  BCF    03.5
0208:  MOVWF  4C
0209:  CALL   03F
....................     i2c_write(0x03); // Start at REG 3 - Day of week 
020A:  MOVLW  03
020B:  MOVWF  4C
020C:  CALL   03F
....................     i2c_start(); 
020D:  BSF    28.4
020E:  MOVF   28,W
020F:  BSF    03.5
0210:  MOVWF  07
0211:  MOVLW  04
0212:  MOVWF  77
0213:  DECFSZ 77,F
0214:  GOTO   213
0215:  BCF    03.5
0216:  BSF    28.3
0217:  MOVF   28,W
0218:  BSF    03.5
0219:  MOVWF  07
021A:  MOVLW  03
021B:  MOVWF  77
021C:  DECFSZ 77,F
021D:  GOTO   21C
021E:  BCF    03.5
021F:  BTFSS  07.3
0220:  GOTO   21F
0221:  BCF    07.4
0222:  BCF    28.4
0223:  MOVF   28,W
0224:  BSF    03.5
0225:  MOVWF  07
0226:  MOVLW  04
0227:  MOVWF  77
0228:  DECFSZ 77,F
0229:  GOTO   228
022A:  BCF    03.5
022B:  BCF    07.3
022C:  BCF    28.3
022D:  MOVF   28,W
022E:  BSF    03.5
022F:  MOVWF  07
....................     i2c_write(0xD1); 
0230:  MOVLW  D1
0231:  BCF    03.5
0232:  MOVWF  4C
0233:  CALL   03F
....................     dow = bcd2bin(i2c_read() & 0x7f); // REG 3 
0234:  MOVLW  01
0235:  MOVWF  77
0236:  CALL   09B
0237:  MOVF   78,W
0238:  ANDLW  7F
0239:  MOVWF  48
023A:  MOVWF  4D
023B:  CALL   0EF
023C:  MOVF   78,W
023D:  MOVWF  2F
....................     day = bcd2bin(i2c_read() & 0x3f); // REG 4 
023E:  MOVLW  01
023F:  MOVWF  77
0240:  CALL   09B
0241:  MOVF   78,W
0242:  ANDLW  3F
0243:  MOVWF  48
0244:  MOVWF  4D
0245:  CALL   0EF
0246:  MOVF   78,W
0247:  MOVWF  2C
....................     mth = bcd2bin(i2c_read() & 0x1f); // REG 5 
0248:  MOVLW  01
0249:  MOVWF  77
024A:  CALL   09B
024B:  MOVF   78,W
024C:  ANDLW  1F
024D:  MOVWF  48
024E:  MOVWF  4D
024F:  CALL   0EF
0250:  MOVF   78,W
0251:  MOVWF  2D
....................     year = bcd2bin(i2c_read(0));      // REG 6 
0252:  CLRF   77
0253:  CALL   09B
0254:  MOVF   78,W
0255:  MOVWF  48
0256:  MOVWF  4D
0257:  CALL   0EF
0258:  MOVF   78,W
0259:  MOVWF  2E
....................     i2c_stop(); 
025A:  BCF    28.4
025B:  MOVF   28,W
025C:  BSF    03.5
025D:  MOVWF  07
025E:  NOP
025F:  BCF    03.5
0260:  BSF    28.3
0261:  MOVF   28,W
0262:  BSF    03.5
0263:  MOVWF  07
0264:  BCF    03.5
0265:  BTFSS  07.3
0266:  GOTO   265
0267:  MOVLW  04
0268:  MOVWF  77
0269:  DECFSZ 77,F
026A:  GOTO   269
026B:  GOTO   26C
026C:  NOP
026D:  BSF    28.4
026E:  MOVF   28,W
026F:  BSF    03.5
0270:  MOVWF  07
0271:  MOVLW  04
0272:  MOVWF  77
0273:  DECFSZ 77,F
0274:  GOTO   273
.................... } 
....................  
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec) 
.................... { 
....................     i2c_start(); 
0275:  BCF    03.5
0276:  BSF    28.4
0277:  MOVF   28,W
0278:  BSF    03.5
0279:  MOVWF  07
027A:  MOVLW  04
027B:  MOVWF  77
027C:  DECFSZ 77,F
027D:  GOTO   27C
027E:  BCF    03.5
027F:  BSF    28.3
0280:  MOVF   28,W
0281:  BSF    03.5
0282:  MOVWF  07
0283:  MOVLW  03
0284:  MOVWF  77
0285:  DECFSZ 77,F
0286:  GOTO   285
0287:  BCF    03.5
0288:  BCF    07.4
0289:  BCF    28.4
028A:  MOVF   28,W
028B:  BSF    03.5
028C:  MOVWF  07
028D:  MOVLW  04
028E:  MOVWF  77
028F:  DECFSZ 77,F
0290:  GOTO   28F
0291:  BCF    03.5
0292:  BCF    07.3
0293:  BCF    28.3
0294:  MOVF   28,W
0295:  BSF    03.5
0296:  MOVWF  07
....................     i2c_write(0xD0); 
0297:  MOVLW  D0
0298:  BCF    03.5
0299:  MOVWF  4C
029A:  CALL   03F
....................     i2c_write(0x00); // Start at REG 0 - Seconds 
029B:  CLRF   4C
029C:  CALL   03F
....................     i2c_start(); 
029D:  BSF    28.4
029E:  MOVF   28,W
029F:  BSF    03.5
02A0:  MOVWF  07
02A1:  MOVLW  04
02A2:  MOVWF  77
02A3:  DECFSZ 77,F
02A4:  GOTO   2A3
02A5:  BCF    03.5
02A6:  BSF    28.3
02A7:  MOVF   28,W
02A8:  BSF    03.5
02A9:  MOVWF  07
02AA:  MOVLW  03
02AB:  MOVWF  77
02AC:  DECFSZ 77,F
02AD:  GOTO   2AC
02AE:  BCF    03.5
02AF:  BTFSS  07.3
02B0:  GOTO   2AF
02B1:  BCF    07.4
02B2:  BCF    28.4
02B3:  MOVF   28,W
02B4:  BSF    03.5
02B5:  MOVWF  07
02B6:  MOVLW  04
02B7:  MOVWF  77
02B8:  DECFSZ 77,F
02B9:  GOTO   2B8
02BA:  BCF    03.5
02BB:  BCF    07.3
02BC:  BCF    28.3
02BD:  MOVF   28,W
02BE:  BSF    03.5
02BF:  MOVWF  07
....................     i2c_write(0xD1); 
02C0:  MOVLW  D1
02C1:  BCF    03.5
02C2:  MOVWF  4C
02C3:  CALL   03F
....................     sec = bcd2bin(i2c_read() & 0x7f); 
02C4:  MOVLW  01
02C5:  MOVWF  77
02C6:  CALL   09B
02C7:  MOVF   78,W
02C8:  ANDLW  7F
02C9:  MOVWF  48
02CA:  MOVWF  4D
02CB:  CALL   0EF
02CC:  MOVF   78,W
02CD:  MOVWF  29
....................     min = bcd2bin(i2c_read() & 0x7f); 
02CE:  MOVLW  01
02CF:  MOVWF  77
02D0:  CALL   09B
02D1:  MOVF   78,W
02D2:  ANDLW  7F
02D3:  MOVWF  48
02D4:  MOVWF  4D
02D5:  CALL   0EF
02D6:  MOVF   78,W
02D7:  MOVWF  2A
....................     hr = bcd2bin(i2c_read(0) & 0x3f); 
02D8:  CLRF   77
02D9:  CALL   09B
02DA:  MOVF   78,W
02DB:  ANDLW  3F
02DC:  MOVWF  48
02DD:  MOVWF  4D
02DE:  CALL   0EF
02DF:  MOVF   78,W
02E0:  MOVWF  2B
....................     i2c_stop(); 
02E1:  BCF    28.4
02E2:  MOVF   28,W
02E3:  BSF    03.5
02E4:  MOVWF  07
02E5:  NOP
02E6:  BCF    03.5
02E7:  BSF    28.3
02E8:  MOVF   28,W
02E9:  BSF    03.5
02EA:  MOVWF  07
02EB:  BCF    03.5
02EC:  BTFSS  07.3
02ED:  GOTO   2EC
02EE:  MOVLW  04
02EF:  MOVWF  77
02F0:  DECFSZ 77,F
02F1:  GOTO   2F0
02F2:  GOTO   2F3
02F3:  NOP
02F4:  BSF    28.4
02F5:  MOVF   28,W
02F6:  BSF    03.5
02F7:  MOVWF  07
02F8:  MOVLW  04
02F9:  MOVWF  77
02FA:  DECFSZ 77,F
02FB:  GOTO   2FA
.................... } 
....................  
.................... BYTE bin2bcd(BYTE binary_value) 
.................... { 
....................     BYTE temp; 
....................     BYTE retval; 
....................  
....................     temp = binary_value; 
*
039D:  MOVF   44,W
039E:  MOVWF  45
....................     retval = 0; 
039F:  CLRF   46
....................  
....................     while (1) 
....................     { 
....................         // Get the tens digit by doing multiple subtraction 
....................         // of 10 from the binary value. 
....................         if (temp >= 10) 
03A0:  MOVF   45,W
03A1:  SUBLW  09
03A2:  BTFSC  03.0
03A3:  GOTO   3A9
....................         { 
....................             temp -= 10; 
03A4:  MOVLW  0A
03A5:  SUBWF  45,F
....................             retval += 0x10; 
03A6:  MOVLW  10
03A7:  ADDWF  46,F
....................         } 
03A8:  GOTO   3AC
....................         else // Get the ones digit by adding the remainder. 
....................         { 
....................             retval += temp; 
03A9:  MOVF   45,W
03AA:  ADDWF  46,F
....................             break; 
03AB:  GOTO   3AD
....................         } 
03AC:  GOTO   3A0
....................     } 
....................  
....................     return (retval); 
03AD:  MOVF   46,W
03AE:  MOVWF  78
03AF:  RETURN
.................... } 
....................  
.................... // Input range - 00 to 99. 
.................... BYTE bcd2bin(BYTE bcd_value) 
.................... { 
....................     BYTE temp; 
....................  
....................     temp = bcd_value; 
*
00EF:  MOVF   4D,W
00F0:  MOVWF  4E
....................     // Shifting upper digit right by 1 is same as multiplying by 8. 
....................     temp >>= 1; 
00F1:  BCF    03.0
00F2:  RRF    4E,F
....................     // Isolate the bits for the upper digit. 
....................     temp &= 0x78; 
00F3:  MOVLW  78
00F4:  ANDWF  4E,F
....................  
....................     // Now return: (Tens * 8) + (Tens * 2) + Ones 
....................  
....................     return (temp + (temp >> 2) + (bcd_value & 0x0f)); 
00F5:  RRF    4E,W
00F6:  MOVWF  77
00F7:  RRF    77,F
00F8:  MOVLW  3F
00F9:  ANDWF  77,F
00FA:  MOVF   77,W
00FB:  ADDWF  4E,W
00FC:  MOVWF  4F
00FD:  MOVF   4D,W
00FE:  ANDLW  0F
00FF:  ADDWF  4F,W
0100:  MOVWF  78
0101:  RETURN
.................... } 
....................  
.................... #include "74hc595.c" // ic74hc595 
.................... #define SH PIN_C0 
.................... #define DS PIN_C1 
.................... #define ST PIN_C2 
.................... void khoitao(void); 
.................... void dich_byte(int8 nData); 
.................... void chot_byte(int8 nData); 
.................... void OnLow2High(void); 
.................... void ghi_byte(int8 nData); 
....................  
.................... void khoitao(void) 
.................... { 
....................     output_low(SH); 
*
0388:  BCF    28.0
0389:  MOVF   28,W
038A:  BSF    03.5
038B:  MOVWF  07
038C:  BCF    03.5
038D:  BCF    07.0
....................     output_low(DS); 
038E:  BCF    28.1
038F:  MOVF   28,W
0390:  BSF    03.5
0391:  MOVWF  07
0392:  BCF    03.5
0393:  BCF    07.1
....................     output_low(ST); 
0394:  BCF    28.2
0395:  MOVF   28,W
0396:  BSF    03.5
0397:  MOVWF  07
0398:  BCF    03.5
0399:  BCF    07.2
039A:  BCF    0A.3
039B:  BCF    0A.4
039C:  GOTO   5F0 (RETURN)
.................... } 
....................  
.................... void dich_byte(int8 nData) 
.................... { 
....................     int8 i, nMask; 
....................     nMask = 0x80; 
*
01A8:  MOVLW  80
01A9:  MOVWF  4C
....................  
....................     for (i = 0; i < 8; i++) 
01AA:  CLRF   4B
01AB:  MOVF   4B,W
01AC:  SUBLW  07
01AD:  BTFSS  03.0
01AE:  GOTO   1D9
....................     { 
....................         output_low(SH); 
01AF:  BCF    28.0
01B0:  MOVF   28,W
01B1:  BSF    03.5
01B2:  MOVWF  07
01B3:  BCF    03.5
01B4:  BCF    07.0
....................  
....................         if (nData & nMask) 
01B5:  MOVF   4A,W
01B6:  ANDWF  4C,W
01B7:  BTFSC  03.2
01B8:  GOTO   1C0
....................             output_high(DS); //DS=1 
01B9:  BCF    28.1
01BA:  MOVF   28,W
01BB:  BSF    03.5
01BC:  MOVWF  07
01BD:  BCF    03.5
01BE:  BSF    07.1
01BF:  GOTO   1C6
....................         else 
....................             output_low(DS); // DS=0 
01C0:  BCF    28.1
01C1:  MOVF   28,W
01C2:  BSF    03.5
01C3:  MOVWF  07
01C4:  BCF    03.5
01C5:  BCF    07.1
....................  
....................         output_high(SH); 
01C6:  BCF    28.0
01C7:  MOVF   28,W
01C8:  BSF    03.5
01C9:  MOVWF  07
01CA:  BCF    03.5
01CB:  BSF    07.0
....................         Delay_us(1); 
01CC:  GOTO   1CD
01CD:  GOTO   1CE
01CE:  NOP
....................         output_low(SH); 
01CF:  BCF    28.0
01D0:  MOVF   28,W
01D1:  BSF    03.5
01D2:  MOVWF  07
01D3:  BCF    03.5
01D4:  BCF    07.0
....................  
....................         nMask = nMask >> 1; 
01D5:  BCF    03.0
01D6:  RRF    4C,F
01D7:  INCF   4B,F
01D8:  GOTO   1AB
....................     } 
.................... } 
....................  
.................... void ghi_byte(int8 nData) 
.................... { 
....................     output_low(ST); 
*
01A0:  BCF    28.2
01A1:  MOVF   28,W
01A2:  BSF    03.5
01A3:  MOVWF  07
01A4:  BCF    03.5
01A5:  BCF    07.2
....................     dich_byte(nData); 
01A6:  MOVF   49,W
01A7:  MOVWF  4A
....................     output_high(ST); 
*
01D9:  BCF    28.2
01DA:  MOVF   28,W
01DB:  BSF    03.5
01DC:  MOVWF  07
01DD:  BCF    03.5
01DE:  BSF    07.2
01DF:  RETURN
.................... } 
....................  
....................  
....................  
.................... #define Slave_add 0x68 
.................... #define Read 1 
.................... #define Write 0 
....................  
.................... // khai bao chan cho 7seg 
.................... #define digit1 PIN_b1 
.................... #define digit2 PIN_b2 
.................... #define digit3 PIN_b3 
.................... #define digit4 PIN_b4 
.................... #define digit5 PIN_b5 
.................... #define digit6 PIN_b6 
....................  
.................... void send(int8 a); 
.................... // khai bao bien 
.................... int8 sec, min, hrs, day, month, yr, dow; 
.................... unsigned char dsec = 0; //bien phuc vu update time 
....................  
.................... unsigned int a, b, c, d, e, f, a1, b1, c1, d1, e1, f1; 
.................... //Timer1  Truyen len cong RS232 va lay cap nhat thoi gian  
.................... #int_TIMER1 
.................... void EXT_isr(void) //moi 1s truyen len may tinh 1 lan 
.................... { 
....................     Set_timer1(0xBDB); 
01E0:  CLRF   0E
01E1:  MOVLW  0B
01E2:  MOVWF  0F
01E3:  MOVLW  DB
01E4:  MOVWF  0E
....................     ds1307_get_date(day, month, yr, dow); 
....................     ds1307_get_time(hrs, min, sec); 
....................     send(hrs); 
*
02FC:  BCF    03.5
02FD:  MOVF   2B,W
02FE:  MOVWF  48
02FF:  CALL   117
....................     putc(45); 
0300:  MOVLW  2D
0301:  BTFSS  0C.4
0302:  GOTO   301
0303:  MOVWF  19
....................     send(min); 
0304:  MOVF   2A,W
0305:  MOVWF  48
0306:  CALL   117
....................     putc(45); 
0307:  MOVLW  2D
0308:  BTFSS  0C.4
0309:  GOTO   308
030A:  MOVWF  19
....................     send(sec); 
030B:  MOVF   29,W
030C:  MOVWF  48
030D:  CALL   117
....................     putc(10); 
030E:  MOVLW  0A
030F:  BTFSS  0C.4
0310:  GOTO   30F
0311:  MOVWF  19
....................     // gan gia tri thoi gian 
....................     a = hrs / 10; 
0312:  MOVF   2B,W
0313:  MOVWF  4E
0314:  MOVLW  0A
0315:  MOVWF  4F
0316:  CALL   102
0317:  MOVF   78,W
0318:  MOVWF  31
....................     b = hrs % 10; 
0319:  MOVF   2B,W
031A:  MOVWF  4E
031B:  MOVLW  0A
031C:  MOVWF  4F
031D:  CALL   102
031E:  MOVF   77,W
031F:  MOVWF  32
....................     c = min / 10; 
0320:  MOVF   2A,W
0321:  MOVWF  4E
0322:  MOVLW  0A
0323:  MOVWF  4F
0324:  CALL   102
0325:  MOVF   78,W
0326:  MOVWF  33
....................     d = min % 10; 
0327:  MOVF   2A,W
0328:  MOVWF  4E
0329:  MOVLW  0A
032A:  MOVWF  4F
032B:  CALL   102
032C:  MOVF   77,W
032D:  MOVWF  34
....................     e = sec / 10; 
032E:  MOVF   29,W
032F:  MOVWF  4E
0330:  MOVLW  0A
0331:  MOVWF  4F
0332:  CALL   102
0333:  MOVF   78,W
0334:  MOVWF  35
....................     f = sec % 10; 
0335:  MOVF   29,W
0336:  MOVWF  4E
0337:  MOVLW  0A
0338:  MOVWF  4F
0339:  CALL   102
033A:  MOVF   77,W
033B:  MOVWF  36
....................     // gan gia tri ngay thang nam  
....................     a1 = day / 10; 
033C:  MOVF   2C,W
033D:  MOVWF  4E
033E:  MOVLW  0A
033F:  MOVWF  4F
0340:  CALL   102
0341:  MOVF   78,W
0342:  MOVWF  37
....................     b1 = day % 10; 
0343:  MOVF   2C,W
0344:  MOVWF  4E
0345:  MOVLW  0A
0346:  MOVWF  4F
0347:  CALL   102
0348:  MOVF   77,W
0349:  MOVWF  38
....................     c1 = month / 10; 
034A:  MOVF   2D,W
034B:  MOVWF  4E
034C:  MOVLW  0A
034D:  MOVWF  4F
034E:  CALL   102
034F:  MOVF   78,W
0350:  MOVWF  39
....................     d1 = month % 10; 
0351:  MOVF   2D,W
0352:  MOVWF  4E
0353:  MOVLW  0A
0354:  MOVWF  4F
0355:  CALL   102
0356:  MOVF   77,W
0357:  MOVWF  3A
....................     e1 = yr / 10; 
0358:  MOVF   2E,W
0359:  MOVWF  4E
035A:  MOVLW  0A
035B:  MOVWF  4F
035C:  CALL   102
035D:  MOVF   78,W
035E:  MOVWF  3B
....................     f1 = yr % 10; 
035F:  MOVF   2E,W
0360:  MOVWF  4E
0361:  MOVLW  0A
0362:  MOVWF  4F
0363:  CALL   102
0364:  MOVF   77,W
0365:  MOVWF  3C
....................     // ghi du lieu 74hc595 voi du lieu ngay than nam  
....................     ghi_byte(mang[f1]); 
0366:  MOVF   3C,W
0367:  CALL   031
0368:  MOVWF  48
0369:  MOVWF  49
036A:  CALL   1A0
....................     ghi_byte(mang[e1]); 
036B:  MOVF   3B,W
036C:  CALL   031
036D:  MOVWF  48
036E:  MOVWF  49
036F:  CALL   1A0
....................     ghi_byte(mang[d1]); 
0370:  MOVF   3A,W
0371:  CALL   031
0372:  MOVWF  48
0373:  MOVWF  49
0374:  CALL   1A0
....................     ghi_byte(mang[c1]); 
0375:  MOVF   39,W
0376:  CALL   031
0377:  MOVWF  48
0378:  MOVWF  49
0379:  CALL   1A0
....................     ghi_byte(mang[b1]); 
037A:  MOVF   38,W
037B:  CALL   031
037C:  MOVWF  48
037D:  MOVWF  49
037E:  CALL   1A0
....................     ghi_byte(mang[a1]); 
037F:  MOVF   37,W
0380:  CALL   031
0381:  MOVWF  48
0382:  MOVWF  49
0383:  CALL   1A0
....................  
....................     return; 
0384:  BCF    0C.0
0385:  BCF    0A.3
0386:  BCF    0A.4
0387:  GOTO   01D
.................... } 
....................  
.................... void main() 
*
05CA:  MOVF   03,W
05CB:  ANDLW  1F
05CC:  MOVWF  03
05CD:  MOVLW  FF
05CE:  MOVWF  28
05CF:  MOVLW  81
05D0:  BSF    03.5
05D1:  MOVWF  19
05D2:  MOVLW  A6
05D3:  MOVWF  18
05D4:  MOVLW  90
05D5:  BCF    03.5
05D6:  MOVWF  18
05D7:  CLRF   30
05D8:  BSF    03.5
05D9:  BSF    1F.0
05DA:  BSF    1F.1
05DB:  BSF    1F.2
05DC:  BCF    1F.3
05DD:  MOVLW  07
05DE:  MOVWF  1C
05DF:  BCF    03.7
.................... { 
....................     //khai bao goi ham  
....................     set_tris_c(0x00); 
05E0:  MOVLW  00
05E1:  MOVWF  07
05E2:  BCF    03.5
05E3:  MOVWF  28
....................     SET_TRIS_d(0X00); 
05E4:  BSF    03.5
05E5:  MOVWF  08
....................     SET_TRIS_b(0b00000001); 
05E6:  MOVLW  01
05E7:  MOVWF  06
....................     OUTPUT_C(0X00); 
05E8:  MOVLW  00
05E9:  BCF    03.5
05EA:  MOVWF  28
05EB:  BSF    03.5
05EC:  CLRF   07
05ED:  BCF    03.5
05EE:  CLRF   07
....................     khoitao(); 
05EF:  GOTO   388
....................     enable_interrupts(INT_EXT);               //cho phep ngat RB0 
05F0:  BSF    0B.4
....................     ext_int_edge(0, H_TO_L);                  //dat suon ngat 
05F1:  BSF    03.5
05F2:  BCF    01.6
....................     enable_interrupts(GLOBAL);                //cho phep ngat toan cuc 
05F3:  MOVLW  C0
05F4:  BCF    03.5
05F5:  IORWF  0B,F
....................     ds1307_init();                            // khoi tao DS1307, tao xung 1Hz o chan 7 DS1307. 
05F6:  GOTO   3B0
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); //104 ms overflow flow 
05F7:  MOVLW  B5
05F8:  MOVWF  10
....................     enable_interrupts(INT_TIMER1); 
05F9:  BSF    03.5
05FA:  BSF    0C.0
....................  
....................     while (true) 
....................     { 
....................         //quet led hien thi thoi gian  
....................         OUTPUT_D(mang[a]); 
05FB:  BCF    03.5
05FC:  MOVF   31,W
05FD:  CALL   031
05FE:  MOVWF  3D
05FF:  BSF    03.5
0600:  CLRF   08
0601:  BCF    03.5
0602:  MOVF   3D,W
0603:  MOVWF  08
....................         output_high(digit1); 
0604:  BSF    03.5
0605:  BCF    06.1
0606:  BCF    03.5
0607:  BSF    06.1
....................         Delay_us(100); 
0608:  MOVLW  A6
0609:  MOVWF  77
060A:  DECFSZ 77,F
060B:  GOTO   60A
060C:  NOP
....................         output_low(digit1); 
060D:  BSF    03.5
060E:  BCF    06.1
060F:  BCF    03.5
0610:  BCF    06.1
....................  
....................         OUTPUT_D(mang[b]); 
0611:  MOVF   32,W
0612:  CALL   031
0613:  MOVWF  3D
0614:  BSF    03.5
0615:  CLRF   08
0616:  BCF    03.5
0617:  MOVF   3D,W
0618:  MOVWF  08
....................         output_high(digit2); 
0619:  BSF    03.5
061A:  BCF    06.2
061B:  BCF    03.5
061C:  BSF    06.2
....................         Delay_us(100); 
061D:  MOVLW  A6
061E:  MOVWF  77
061F:  DECFSZ 77,F
0620:  GOTO   61F
0621:  NOP
....................         output_low(digit2); 
0622:  BSF    03.5
0623:  BCF    06.2
0624:  BCF    03.5
0625:  BCF    06.2
....................  
....................         OUTPUT_D(mang[c]); 
0626:  MOVF   33,W
0627:  CALL   031
0628:  MOVWF  3D
0629:  BSF    03.5
062A:  CLRF   08
062B:  BCF    03.5
062C:  MOVF   3D,W
062D:  MOVWF  08
....................         output_high(digit3); 
062E:  BSF    03.5
062F:  BCF    06.3
0630:  BCF    03.5
0631:  BSF    06.3
....................         Delay_us(100); 
0632:  MOVLW  A6
0633:  MOVWF  77
0634:  DECFSZ 77,F
0635:  GOTO   634
0636:  NOP
....................         output_low(digit3); 
0637:  BSF    03.5
0638:  BCF    06.3
0639:  BCF    03.5
063A:  BCF    06.3
....................  
....................         OUTPUT_D(mang[d]); 
063B:  MOVF   34,W
063C:  CALL   031
063D:  MOVWF  3D
063E:  BSF    03.5
063F:  CLRF   08
0640:  BCF    03.5
0641:  MOVF   3D,W
0642:  MOVWF  08
....................         output_high(digit4); 
0643:  BSF    03.5
0644:  BCF    06.4
0645:  BCF    03.5
0646:  BSF    06.4
....................         Delay_us(100); 
0647:  MOVLW  A6
0648:  MOVWF  77
0649:  DECFSZ 77,F
064A:  GOTO   649
064B:  NOP
....................         output_low(digit4); 
064C:  BSF    03.5
064D:  BCF    06.4
064E:  BCF    03.5
064F:  BCF    06.4
....................  
....................         OUTPUT_D(mang[e]); 
0650:  MOVF   35,W
0651:  CALL   031
0652:  MOVWF  3D
0653:  BSF    03.5
0654:  CLRF   08
0655:  BCF    03.5
0656:  MOVF   3D,W
0657:  MOVWF  08
....................         output_high(digit5); 
0658:  BSF    03.5
0659:  BCF    06.5
065A:  BCF    03.5
065B:  BSF    06.5
....................         Delay_us(100); 
065C:  MOVLW  A6
065D:  MOVWF  77
065E:  DECFSZ 77,F
065F:  GOTO   65E
0660:  NOP
....................         output_low(digit5); 
0661:  BSF    03.5
0662:  BCF    06.5
0663:  BCF    03.5
0664:  BCF    06.5
....................  
....................         OUTPUT_D(mang[f]); 
0665:  MOVF   36,W
0666:  CALL   031
0667:  MOVWF  3D
0668:  BSF    03.5
0669:  CLRF   08
066A:  BCF    03.5
066B:  MOVF   3D,W
066C:  MOVWF  08
....................         output_high(digit6); 
066D:  BSF    03.5
066E:  BCF    06.6
066F:  BCF    03.5
0670:  BSF    06.6
....................         Delay_us(100); 
0671:  MOVLW  A6
0672:  MOVWF  77
0673:  DECFSZ 77,F
0674:  GOTO   673
0675:  NOP
....................         output_low(digit6); 
0676:  BSF    03.5
0677:  BCF    06.6
0678:  BCF    03.5
0679:  BCF    06.6
067A:  GOTO   5FC
....................     } 
.................... } 
....................  
067B:  SLEEP
.................... // ham send  
.................... void send(int8 a) 
.................... { 
....................     if (a < 10) 
*
0117:  MOVF   48,W
0118:  SUBLW  09
0119:  BTFSS  03.0
011A:  GOTO   122
....................     { 
....................         putc(a + 48); 
011B:  MOVLW  30
011C:  ADDWF  48,W
011D:  MOVWF  4E
011E:  MOVF   4E,W
011F:  BTFSS  0C.4
0120:  GOTO   11F
0121:  MOVWF  19
....................     } 
....................     if (a > 9 && a < 100) 
0122:  MOVF   48,W
0123:  SUBLW  09
0124:  BTFSC  03.0
0125:  GOTO   146
0126:  MOVF   48,W
0127:  SUBLW  63
0128:  BTFSS  03.0
0129:  GOTO   146
....................     { 
....................         unsigned char c = a / 10; 
....................         unsigned char d = a % 10; 
012A:  MOVF   48,W
012B:  MOVWF  4E
012C:  MOVLW  0A
012D:  MOVWF  4F
012E:  CALL   102
012F:  MOVF   78,W
0130:  MOVWF  49
0131:  MOVF   48,W
0132:  MOVWF  4E
0133:  MOVLW  0A
0134:  MOVWF  4F
0135:  CALL   102
0136:  MOVF   77,W
0137:  MOVWF  4A
....................         putc(c + 48); 
0138:  MOVLW  30
0139:  ADDWF  49,W
013A:  MOVWF  4E
013B:  MOVF   4E,W
013C:  BTFSS  0C.4
013D:  GOTO   13C
013E:  MOVWF  19
....................         putc(d + 48); 
013F:  MOVLW  30
0140:  ADDWF  4A,W
0141:  MOVWF  4E
0142:  MOVF   4E,W
0143:  BTFSS  0C.4
0144:  GOTO   143
0145:  MOVWF  19
....................     } 
....................     if (a > 99) 
0146:  MOVF   48,W
0147:  SUBLW  63
0148:  BTFSC  03.0
0149:  GOTO   19F
....................     { 
....................         unsigned char t = a / 100; 
....................         unsigned char c = a / 10 - 10 * t; 
....................         unsigned char d = a % 10; 
014A:  MOVF   48,W
014B:  MOVWF  4E
014C:  MOVLW  64
014D:  MOVWF  4F
014E:  CALL   102
014F:  MOVF   78,W
0150:  MOVWF  4B
0151:  MOVF   48,W
0152:  MOVWF  4E
0153:  MOVLW  0A
0154:  MOVWF  4F
0155:  CALL   102
0156:  MOVF   78,W
0157:  MOVWF  4E
0158:  MOVLW  0A
0159:  MOVWF  4F
015A:  MOVF   4B,W
015B:  MOVWF  50
*
0180:  MOVF   78,W
0181:  SUBWF  4E,W
0182:  MOVWF  4C
0183:  MOVF   48,W
0184:  MOVWF  4E
0185:  MOVLW  0A
0186:  MOVWF  4F
0187:  CALL   102
0188:  MOVF   77,W
0189:  MOVWF  4D
....................         putc(t + 48); 
018A:  MOVLW  30
018B:  ADDWF  4B,W
018C:  MOVWF  4E
018D:  MOVF   4E,W
018E:  BTFSS  0C.4
018F:  GOTO   18E
0190:  MOVWF  19
....................         putc(c + 48); 
0191:  MOVLW  30
0192:  ADDWF  4C,W
0193:  MOVWF  4E
0194:  MOVF   4E,W
0195:  BTFSS  0C.4
0196:  GOTO   195
0197:  MOVWF  19
....................         putc(d + 48); 
0198:  MOVLW  30
0199:  ADDWF  4D,W
019A:  MOVWF  4E
019B:  MOVF   4E,W
019C:  BTFSS  0C.4
019D:  GOTO   19C
019E:  MOVWF  19
....................     } 
019F:  RETURN
.................... } 

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
