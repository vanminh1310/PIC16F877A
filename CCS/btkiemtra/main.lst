CCS PCM C Compiler, Version 5.015, 5967               23-Thg3-21 09:32

               Filename:   E:\PIC16F877A\CCS\btkiemtra\main.lst

               ROM used:   296 words (4%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           18 (5%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0E0
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.6
001A:  GOTO   01D
001B:  BTFSC  0C.6
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   0DB
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=8 // ADC 8bit 
....................  
.................... #fuses XT,NOLVP,NOWDT,NOPROTECT 
.................... #use delay(clock=20000000) // chinh lai thach abg  
....................  
....................  
.................... #define  Wire1 PIN_B6 
.................... #define  Wire2 PIN_B7 
.................... #define  Up    PIN_A0 
.................... #define  Down  PIN_A1 
.................... #define  Dir   PIN_A2 
.................... #define start PIN_A3 
.................... #define stop   PIN_A5 
.................... #define led_st PIN_D0 
.................... #define led_sp PIN_D1 
.................... #define led_up PIN_D2 
.................... #define led_dow PIN_D3 
.................... #define led_dao PIN_D4 
....................  
.................... int16 duty_cycle;// 
.................... void ngatadc(){ 
....................  while(input(Up) && input(Down) && input(Dir)&& input(start)&&input(stop)); // kiem tra khi nao co nut dc nhan  
0031:  BSF    03.5
0032:  BSF    05.0
0033:  BCF    03.5
0034:  BTFSS  05.0
0035:  GOTO   04A
0036:  BSF    03.5
0037:  BSF    05.1
0038:  BCF    03.5
0039:  BTFSS  05.1
003A:  GOTO   04A
003B:  BSF    03.5
003C:  BSF    05.2
003D:  BCF    03.5
003E:  BTFSS  05.2
003F:  GOTO   04A
0040:  BSF    03.5
0041:  BSF    05.3
0042:  BCF    03.5
0043:  BTFSS  05.3
0044:  GOTO   04A
0045:  BSF    03.5
0046:  BSF    05.5
0047:  BCF    03.5
0048:  BTFSC  05.5
0049:  GOTO   031
....................        
....................       if(input(start)==0){ 
004A:  BSF    03.5
004B:  BSF    05.3
004C:  BCF    03.5
004D:  BTFSC  05.3
004E:  GOTO   05F
....................          output_high(Wire1);   // chon chieu quay cua dong co          
004F:  BSF    03.5
0050:  BCF    06.6
0051:  BCF    03.5
0052:  BSF    06.6
....................          output_low (Wire2);   
0053:  BSF    03.5
0054:  BCF    06.7
0055:  BCF    03.5
0056:  BCF    06.7
....................          output_high(led_st);  
0057:  BSF    03.5
0058:  BCF    08.0
0059:  BCF    03.5
005A:  BSF    08.0
....................           output_low (led_sp); 
005B:  BSF    03.5
005C:  BCF    08.1
005D:  BCF    03.5
005E:  BCF    08.1
....................        
....................       } 
....................        if(!input(stop)){ 
005F:  BSF    03.5
0060:  BSF    05.5
0061:  BCF    03.5
0062:  BTFSC  05.5
0063:  GOTO   080
....................          output_low(Wire1);   // chon chieu quay cua dong co          
0064:  BSF    03.5
0065:  BCF    06.6
0066:  BCF    03.5
0067:  BCF    06.6
....................          output_low (Wire2);  
0068:  BSF    03.5
0069:  BCF    06.7
006A:  BCF    03.5
006B:  BCF    06.7
....................           output_high(led_sp);  
006C:  BSF    03.5
006D:  BCF    08.1
006E:  BCF    03.5
006F:  BSF    08.1
....................            output_low (led_st);  
0070:  BSF    03.5
0071:  BCF    08.0
0072:  BCF    03.5
0073:  BCF    08.0
....................              output_low (led_up);  
0074:  BSF    03.5
0075:  BCF    08.2
0076:  BCF    03.5
0077:  BCF    08.2
....................                output_low (led_dow);  
0078:  BSF    03.5
0079:  BCF    08.3
007A:  BCF    03.5
007B:  BCF    08.3
....................                  output_low (led_dao);  
007C:  BSF    03.5
007D:  BCF    08.4
007E:  BCF    03.5
007F:  BCF    08.4
....................        
....................       } 
....................        
....................       if(!input(Up))     
0080:  BSF    03.5
0081:  BSF    05.0
0082:  BCF    03.5
0083:  BTFSC  05.0
0084:  GOTO   0A4
....................       { 
....................          duty_cycle=500;   
0085:  MOVLW  01
0086:  MOVWF  29
0087:  MOVLW  F4
0088:  MOVWF  28
....................          set_pwm1_duty(duty_cycle); 
0089:  MOVF   29,W
008A:  MOVWF  79
008B:  MOVF   28,W
008C:  MOVWF  78
008D:  RRF    79,F
008E:  RRF    78,F
008F:  RRF    79,F
0090:  RRF    78,F
0091:  RRF    79,F
0092:  MOVF   78,W
0093:  MOVWF  15
0094:  RRF    79,F
0095:  RRF    79,W
0096:  ANDLW  30
0097:  MOVWF  77
0098:  MOVF   17,W
0099:  ANDLW  CF
009A:  IORWF  77,W
009B:  MOVWF  17
....................           output_high(led_up);  
009C:  BSF    03.5
009D:  BCF    08.2
009E:  BCF    03.5
009F:  BSF    08.2
....................            output_low (led_dow);  
00A0:  BSF    03.5
00A1:  BCF    08.3
00A2:  BCF    03.5
00A3:  BCF    08.3
....................       } 
....................       if(!input(Down))  
00A4:  BSF    03.5
00A5:  BSF    05.1
00A6:  BCF    03.5
00A7:  BTFSC  05.1
00A8:  GOTO   0C7
....................       { 
....................          duty_cycle=100;    
00A9:  CLRF   29
00AA:  MOVLW  64
00AB:  MOVWF  28
....................          set_pwm1_duty(duty_cycle);  
00AC:  MOVF   29,W
00AD:  MOVWF  79
00AE:  MOVF   28,W
00AF:  MOVWF  78
00B0:  RRF    79,F
00B1:  RRF    78,F
00B2:  RRF    79,F
00B3:  RRF    78,F
00B4:  RRF    79,F
00B5:  MOVF   78,W
00B6:  MOVWF  15
00B7:  RRF    79,F
00B8:  RRF    79,W
00B9:  ANDLW  30
00BA:  MOVWF  77
00BB:  MOVF   17,W
00BC:  ANDLW  CF
00BD:  IORWF  77,W
00BE:  MOVWF  17
....................           output_high(led_dow);  
00BF:  BSF    03.5
00C0:  BCF    08.3
00C1:  BCF    03.5
00C2:  BSF    08.3
....................            output_low (led_up);  
00C3:  BSF    03.5
00C4:  BCF    08.2
00C5:  BCF    03.5
00C6:  BCF    08.2
....................       } 
....................       if(!input(Dir))    
00C7:  BSF    03.5
00C8:  BSF    05.2
00C9:  BCF    03.5
00CA:  BTFSC  05.2
00CB:  GOTO   0DA
....................       { 
....................          output_toggle(Wire1);   
00CC:  BSF    03.5
00CD:  BCF    06.6
00CE:  MOVLW  40
00CF:  BCF    03.5
00D0:  XORWF  06,F
....................          output_toggle(Wire2);    
00D1:  BSF    03.5
00D2:  BCF    06.7
00D3:  MOVLW  80
00D4:  BCF    03.5
00D5:  XORWF  06,F
....................           output_high(led_dao);  
00D6:  BSF    03.5
00D7:  BCF    08.4
00D8:  BCF    03.5
00D9:  BSF    08.4
....................       }       
00DA:  RETURN
....................  
.................... } 
.................... #INT_AD 
.................... void intad() 
.................... {  //Làm chuong trình nào dó 
.................... ngatadc(); 
00DB:  CALL   031
....................  
00DC:  BCF    0C.6
00DD:  BCF    0A.3
00DE:  BCF    0A.4
00DF:  GOTO   01D
.................... } 
....................  
....................  
.................... void main() 
00E0:  MOVF   03,W
00E1:  ANDLW  1F
00E2:  MOVWF  03
00E3:  MOVLW  FF
00E4:  MOVWF  2A
00E5:  BSF    03.5
00E6:  BSF    1F.0
00E7:  BSF    1F.1
00E8:  BSF    1F.2
00E9:  BCF    1F.3
00EA:  MOVLW  07
00EB:  MOVWF  1C
00EC:  BCF    03.7
.................... { 
....................    setup_adc(ADC_CLOCK_DIV_2); 
00ED:  BCF    1F.6
00EE:  BCF    03.5
00EF:  BCF    1F.6
00F0:  BCF    1F.7
00F1:  BSF    03.5
00F2:  BCF    1F.7
00F3:  BCF    03.5
00F4:  BSF    1F.0
....................   set_adc_channel(0);   //analog input to pin A0 
00F5:  MOVLW  00
00F6:  MOVWF  78
00F7:  MOVF   1F,W
00F8:  ANDLW  C7
00F9:  IORWF  78,W
00FA:  MOVWF  1F
....................    enable_interrupts(GLOBAL); 
00FB:  MOVLW  C0
00FC:  IORWF  0B,F
....................      enable_interrupts(INT_AD); 
00FD:  BSF    03.5
00FE:  BSF    0C.6
....................   // setup_adc(ADC_OFF);           // Tat adc  
....................     
....................     
....................   // setup_adc_ports(NO_ANALOGS); 
....................    setup_timer_2(T2_DIV_BY_4, 124,1); 
00FF:  MOVLW  00
0100:  MOVWF  78
0101:  IORLW  05
0102:  BCF    03.5
0103:  MOVWF  12
0104:  MOVLW  7C
0105:  BSF    03.5
0106:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
0107:  BCF    03.5
0108:  BCF    2A.2
0109:  MOVF   2A,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  BCF    03.5
010D:  BCF    07.2
010E:  MOVLW  0C
010F:  MOVWF  17
....................  
....................  
....................    set_pwm1_duty(300);          // 20% (Half Speed) 
0110:  MOVLW  4B
0111:  MOVWF  15
0112:  MOVF   17,W
0113:  ANDLW  CF
0114:  MOVWF  17
....................    set_tris_d(0x00); 
0115:  MOVLW  00
0116:  BSF    03.5
0117:  MOVWF  08
....................     output_d(0x00); 
0118:  CLRF   08
0119:  BCF    03.5
011A:  CLRF   08
....................     set_tris_a(0xff); 
011B:  MOVLW  FF
011C:  BSF    03.5
011D:  MOVWF  05
011E:  BCF    03.5
011F:  CLRF   27
0120:  BTFSC  0B.7
0121:  BSF    27.7
0122:  BCF    0B.7
....................  
....................    while(1) 
....................    { 
....................    
....................      ngatadc(); 
0123:  CALL   031
0124:  BTFSC  27.7
0125:  BSF    0B.7
0126:  GOTO   11F
....................      
....................    } 
.................... } 
0127:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
