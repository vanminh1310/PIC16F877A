CCS PCM C Compiler, Version 5.015, 5967               19-Thg3-21 07:21

               Filename:   E:\PIC16F877A\CCS\couter\main.lst

               ROM used:   461 words (6%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           23 (6%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18C
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  CLRF   78
0013:  CLRF   79
0014:  CLRF   77
0015:  CLRF   7A
0016:  MOVF   30,W
0017:  BTFSS  03.2
0018:  GOTO   01C
0019:  MOVF   2F,W
001A:  BTFSC  03.2
001B:  GOTO   036
001C:  MOVLW  10
001D:  MOVWF  31
001E:  BCF    03.0
001F:  RLF    2D,F
0020:  RLF    2E,F
0021:  RLF    77,F
0022:  RLF    7A,F
0023:  MOVF   30,W
0024:  SUBWF  7A,W
0025:  BTFSS  03.2
0026:  GOTO   029
0027:  MOVF   2F,W
0028:  SUBWF  77,W
0029:  BTFSS  03.0
002A:  GOTO   032
002B:  MOVF   2F,W
002C:  SUBWF  77,F
002D:  BTFSS  03.0
002E:  DECF   7A,F
002F:  MOVF   30,W
0030:  SUBWF  7A,F
0031:  BSF    03.0
0032:  RLF    78,F
0033:  RLF    79,F
0034:  DECFSZ 31,F
0035:  GOTO   01E
0036:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT, HS, PUT, NOPROTECT 
.................... #use delay(clock = 20000000) 
*
0117:  MOVLW  26
0118:  MOVWF  04
0119:  BCF    03.7
011A:  MOVF   00,W
011B:  BTFSC  03.2
011C:  GOTO   12A
011D:  MOVLW  06
011E:  MOVWF  78
011F:  CLRF   77
0120:  DECFSZ 77,F
0121:  GOTO   120
0122:  DECFSZ 78,F
0123:  GOTO   11F
0124:  MOVLW  7B
0125:  MOVWF  77
0126:  DECFSZ 77,F
0127:  GOTO   126
0128:  DECFSZ 00,F
0129:  GOTO   11D
012A:  RETURN
.................... #use fast_io(A) 
....................  
.................... #define led PIN_B5 //khai bao led 
....................  
.................... const char mang[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
.................... const char mang2[4] = {0xBF, 0x88, 0xC7, 0xC7}; 
....................  
.................... int16 dem; 
.................... void hienthi(int16 uivalue); 
.................... void hienthisl(int8 value); 
.................... void hienthiall(); 
.................... void ledblynk(); 
.................... void main() 
*
018C:  MOVF   03,W
018D:  ANDLW  1F
018E:  MOVWF  03
018F:  MOVLW  FF
0190:  MOVWF  22
0191:  BSF    03.5
0192:  BSF    1F.0
0193:  BSF    1F.1
0194:  BSF    1F.2
0195:  BCF    1F.3
0196:  MOVLW  07
0197:  MOVWF  1C
0198:  BCF    03.7
.................... { 
....................   SET_TRIS_A(0xFF); 
0199:  MOVLW  FF
019A:  MOVWF  05
....................   SET_TRIS_D(0x00); //cai dat PORTD la output=DATA 
019B:  MOVLW  00
019C:  MOVWF  08
....................   SET_TRIS_B(0x00); //PORT C = DIEU KHIEN 
019D:  MOVWF  06
....................   SET_TRIS_C(0x00); 
019E:  MOVWF  07
019F:  BCF    03.5
01A0:  MOVWF  22
....................   setup_timer_0(RTCC_DIV_2 | RTCC_EXT_L_TO_H); 
01A1:  BSF    03.5
01A2:  MOVF   01,W
01A3:  ANDLW  C0
01A4:  IORLW  20
01A5:  MOVWF  01
....................  
....................   set_timer0(0); //cai dat cho timer dem tu 0 
01A6:  BCF    03.5
01A7:  CLRF   01
....................                  // TMR0_TOCS = 1; //thiet lap Timer0 o trang thai counter nhan xung ngoaiTM 
....................                  // TMR0_TOSE = 0; //cho phep timer0 TAC DONG CANH XUONG 
....................   dem = 0; 
01A8:  CLRF   21
01A9:  CLRF   20
....................   output_high(led); 
01AA:  BSF    03.5
01AB:  BCF    06.5
01AC:  BCF    03.5
01AD:  BSF    06.5
....................   while (1) 
....................   { //x=input(PIN_A4); 
....................     // if(x==0)//chong nhieu khi RA4=0 thi tu dong counter dem len 1 
....................  
....................     //dong while ko co cung duoc 
....................     
....................     int8 a, b; 
....................  
....................   
....................     dem = get_timer0(); 
01AE:  MOVF   01,W
01AF:  CLRF   21
01B0:  MOVWF  20
....................  
....................     hienthi(dem); 
01B1:  MOVF   21,W
01B2:  MOVWF  26
01B3:  MOVF   20,W
01B4:  MOVWF  25
01B5:  GOTO   037
....................  
....................     a = dem / 5; 
01B6:  MOVF   21,W
01B7:  MOVWF  2E
01B8:  MOVF   20,W
01B9:  MOVWF  2D
01BA:  CLRF   30
01BB:  MOVLW  05
01BC:  MOVWF  2F
01BD:  CALL   012
01BE:  MOVF   78,W
01BF:  MOVWF  23
....................     hienthisl(a); 
01C0:  MOVF   23,W
01C1:  MOVWF  25
01C2:  GOTO   0A8
....................  
....................     if (a==1) 
01C3:  DECFSZ 23,W
01C4:  GOTO   1C7
....................     { 
....................       //OUTPUT_B(0b00000000); 
....................       //OUTPUT_D(0xff); 
....................        //hienthiall(); 
....................       
....................       ledblynk(); 
01C5:  GOTO   12B
....................        
....................      
....................     } 
01C6:  GOTO   1CB
....................     else 
....................     { 
....................       output_low(led); 
01C7:  BSF    03.5
01C8:  BCF    06.5
01C9:  BCF    03.5
01CA:  BCF    06.5
....................       // delay_ms(1000); 
....................     } 
01CB:  GOTO   1AE
....................   } 
.................... } 
.................... void hienthiall() 
01CC:  SLEEP
.................... { 
....................  
....................   OUTPUT_D(0xBF); 
*
012C:  BSF    03.5
012D:  CLRF   08
012E:  MOVLW  BF
012F:  BCF    03.5
0130:  MOVWF  08
....................   OUTPUT_B(0b00010000); 
0131:  BSF    03.5
0132:  CLRF   06
0133:  MOVLW  10
0134:  BCF    03.5
0135:  MOVWF  06
....................   delay_ms(1); 
0136:  MOVLW  01
0137:  MOVWF  26
0138:  CALL   117
....................   OUTPUT_B(0b00000000); 
0139:  BSF    03.5
013A:  CLRF   06
013B:  BCF    03.5
013C:  CLRF   06
....................  
....................   OUTPUT_D(0x88); 
013D:  BSF    03.5
013E:  CLRF   08
013F:  MOVLW  88
0140:  BCF    03.5
0141:  MOVWF  08
....................   OUTPUT_B(0b00001000); 
0142:  BSF    03.5
0143:  CLRF   06
0144:  MOVLW  08
0145:  BCF    03.5
0146:  MOVWF  06
....................   delay_ms(1); 
0147:  MOVLW  01
0148:  MOVWF  26
0149:  CALL   117
....................   OUTPUT_B(0b00000000); 
014A:  BSF    03.5
014B:  CLRF   06
014C:  BCF    03.5
014D:  CLRF   06
....................  
....................   OUTPUT_D(0xC7); 
014E:  BSF    03.5
014F:  CLRF   08
0150:  MOVLW  C7
0151:  BCF    03.5
0152:  MOVWF  08
....................   OUTPUT_B(0b00000100); 
0153:  BSF    03.5
0154:  CLRF   06
0155:  MOVLW  04
0156:  BCF    03.5
0157:  MOVWF  06
....................   delay_ms(1); 
0158:  MOVLW  01
0159:  MOVWF  26
015A:  CALL   117
....................   OUTPUT_B(0b00000100); 
015B:  BSF    03.5
015C:  CLRF   06
015D:  MOVLW  04
015E:  BCF    03.5
015F:  MOVWF  06
....................  
....................   OUTPUT_D(0xC7); 
0160:  BSF    03.5
0161:  CLRF   08
0162:  MOVLW  C7
0163:  BCF    03.5
0164:  MOVWF  08
....................   OUTPUT_B(0b00000010); 
0165:  BSF    03.5
0166:  CLRF   06
0167:  MOVLW  02
0168:  BCF    03.5
0169:  MOVWF  06
....................   delay_ms(1); 
016A:  MOVLW  01
016B:  MOVWF  26
016C:  CALL   117
....................   OUTPUT_B(0b00000010); 
016D:  BSF    03.5
016E:  CLRF   06
016F:  MOVLW  02
0170:  BCF    03.5
0171:  MOVWF  06
.................... } 
....................  
.................... void hienthisl(int8 value) 
.................... { 
....................   unsigned char chuc1, dv1; 
....................   chuc1 = ((value % 1000) % 100) / 10; 
*
00A8:  CLRF   2E
00A9:  MOVF   25,W
00AA:  MOVWF  2D
00AB:  MOVLW  03
00AC:  MOVWF  30
00AD:  MOVLW  E8
00AE:  MOVWF  2F
00AF:  CALL   012
00B0:  MOVF   77,W
00B1:  MOVWF  28
00B2:  MOVF   7A,W
00B3:  MOVWF  29
00B4:  MOVWF  2E
00B5:  MOVF   77,W
00B6:  MOVWF  2D
00B7:  CLRF   30
00B8:  MOVLW  64
00B9:  MOVWF  2F
00BA:  CALL   012
00BB:  MOVF   77,W
00BC:  MOVWF  28
00BD:  MOVF   7A,W
00BE:  MOVWF  29
00BF:  MOVWF  2E
00C0:  MOVF   77,W
00C1:  MOVWF  2D
00C2:  CLRF   30
00C3:  MOVLW  0A
00C4:  MOVWF  2F
00C5:  CALL   012
00C6:  MOVF   78,W
00C7:  MOVWF  26
....................   dv1 = ((value % 1000) % 100) % 10; 
00C8:  CLRF   2E
00C9:  MOVF   25,W
00CA:  MOVWF  2D
00CB:  MOVLW  03
00CC:  MOVWF  30
00CD:  MOVLW  E8
00CE:  MOVWF  2F
00CF:  CALL   012
00D0:  MOVF   77,W
00D1:  MOVWF  28
00D2:  MOVF   7A,W
00D3:  MOVWF  29
00D4:  MOVWF  2E
00D5:  MOVF   77,W
00D6:  MOVWF  2D
00D7:  CLRF   30
00D8:  MOVLW  64
00D9:  MOVWF  2F
00DA:  CALL   012
00DB:  MOVF   77,W
00DC:  MOVWF  28
00DD:  MOVF   7A,W
00DE:  MOVWF  29
00DF:  MOVWF  2E
00E0:  MOVF   77,W
00E1:  MOVWF  2D
00E2:  CLRF   30
00E3:  MOVLW  0A
00E4:  MOVWF  2F
00E5:  CALL   012
00E6:  MOVF   77,W
00E7:  MOVWF  27
....................  
....................   OUTPUT_D(mang[chuc1]); 
00E8:  MOVF   26,W
00E9:  CALL   004
00EA:  MOVWF  28
00EB:  BSF    03.5
00EC:  CLRF   08
00ED:  BCF    03.5
00EE:  MOVF   28,W
00EF:  MOVWF  08
....................   OUTPUT_B(0b00010000); 
00F0:  BSF    03.5
00F1:  CLRF   06
00F2:  MOVLW  10
00F3:  BCF    03.5
00F4:  MOVWF  06
....................   Delay_us(100); 
00F5:  MOVLW  A6
00F6:  MOVWF  77
00F7:  DECFSZ 77,F
00F8:  GOTO   0F7
00F9:  NOP
....................   OUTPUT_B(0X00); //  TAT HET CAC LED, CHONG LEM 
00FA:  BSF    03.5
00FB:  CLRF   06
00FC:  BCF    03.5
00FD:  CLRF   06
....................  
....................   OUTPUT_D(mang[dv1]); 
00FE:  MOVF   27,W
00FF:  CALL   004
0100:  MOVWF  28
0101:  BSF    03.5
0102:  CLRF   08
0103:  BCF    03.5
0104:  MOVF   28,W
0105:  MOVWF  08
....................   OUTPUT_B(0b00001000); 
0106:  BSF    03.5
0107:  CLRF   06
0108:  MOVLW  08
0109:  BCF    03.5
010A:  MOVWF  06
....................   Delay_us(100); 
010B:  MOVLW  A6
010C:  MOVWF  77
010D:  DECFSZ 77,F
010E:  GOTO   10D
010F:  NOP
....................   OUTPUT_B(0X00); 
0110:  BSF    03.5
0111:  CLRF   06
0112:  BCF    03.5
0113:  CLRF   06
0114:  BCF    0A.3
0115:  BCF    0A.4
0116:  GOTO   1C3 (RETURN)
.................... } 
....................  
.................... void hienthi(int16 uivalue) 
.................... { 
....................   unsigned char ngan, tram, chuc, dvi; 
....................   //  ngan=uivalue/1000; 
....................   // tram=(uivalue%1000)/100; 
....................   chuc = ((uivalue % 1000) % 100) / 10; 
*
0037:  MOVF   26,W
0038:  MOVWF  2E
0039:  MOVF   25,W
003A:  MOVWF  2D
003B:  MOVLW  03
003C:  MOVWF  30
003D:  MOVLW  E8
003E:  MOVWF  2F
003F:  CALL   012
0040:  MOVF   77,W
0041:  MOVWF  2B
0042:  MOVF   7A,W
0043:  MOVWF  2C
0044:  MOVWF  2E
0045:  MOVF   77,W
0046:  MOVWF  2D
0047:  CLRF   30
0048:  MOVLW  64
0049:  MOVWF  2F
004A:  CALL   012
004B:  MOVF   77,W
004C:  MOVWF  2B
004D:  MOVF   7A,W
004E:  MOVWF  2C
004F:  MOVWF  2E
0050:  MOVF   77,W
0051:  MOVWF  2D
0052:  CLRF   30
0053:  MOVLW  0A
0054:  MOVWF  2F
0055:  CALL   012
0056:  MOVF   78,W
0057:  MOVWF  29
....................   dvi = ((uivalue % 1000) % 100) % 10; 
0058:  MOVF   26,W
0059:  MOVWF  2E
005A:  MOVF   25,W
005B:  MOVWF  2D
005C:  MOVLW  03
005D:  MOVWF  30
005E:  MOVLW  E8
005F:  MOVWF  2F
0060:  CALL   012
0061:  MOVF   77,W
0062:  MOVWF  2B
0063:  MOVF   7A,W
0064:  MOVWF  2C
0065:  MOVWF  2E
0066:  MOVF   77,W
0067:  MOVWF  2D
0068:  CLRF   30
0069:  MOVLW  64
006A:  MOVWF  2F
006B:  CALL   012
006C:  MOVF   77,W
006D:  MOVWF  2B
006E:  MOVF   7A,W
006F:  MOVWF  2C
0070:  MOVWF  2E
0071:  MOVF   77,W
0072:  MOVWF  2D
0073:  CLRF   30
0074:  MOVLW  0A
0075:  MOVWF  2F
0076:  CALL   012
0077:  MOVF   77,W
0078:  MOVWF  2A
....................  
....................   // OUTPUT_D(mang[ngan]); 
....................   //OUTPUT_B(0b00010000); 
....................   //Delay_us(100); 
....................   //OUTPUT_B(0X00);          //  TAT HET CAC LED, CHONG LEM 
....................  
....................   //OUTPUT_D(mang[tram]); 
....................   //OUTPUT_B(0b00001000); 
....................   //Delay_us(100); 
....................   //OUTPUT_B(0X00);         //  TAT HET CAC LED, CHONG LEM 
....................  
....................   OUTPUT_D(mang[chuc]); 
0079:  MOVF   29,W
007A:  CALL   004
007B:  MOVWF  2B
007C:  BSF    03.5
007D:  CLRF   08
007E:  BCF    03.5
007F:  MOVF   2B,W
0080:  MOVWF  08
....................   OUTPUT_B(0b00000100); 
0081:  BSF    03.5
0082:  CLRF   06
0083:  MOVLW  04
0084:  BCF    03.5
0085:  MOVWF  06
....................   Delay_us(100); 
0086:  MOVLW  A6
0087:  MOVWF  77
0088:  DECFSZ 77,F
0089:  GOTO   088
008A:  NOP
....................   OUTPUT_B(0X00); //  TAT HET CAC LED, CHONG LEM 
008B:  BSF    03.5
008C:  CLRF   06
008D:  BCF    03.5
008E:  CLRF   06
....................  
....................   OUTPUT_D(mang[dvi]); 
008F:  MOVF   2A,W
0090:  CALL   004
0091:  MOVWF  2B
0092:  BSF    03.5
0093:  CLRF   08
0094:  BCF    03.5
0095:  MOVF   2B,W
0096:  MOVWF  08
....................   OUTPUT_B(0b00000010); 
0097:  BSF    03.5
0098:  CLRF   06
0099:  MOVLW  02
009A:  BCF    03.5
009B:  MOVWF  06
....................   Delay_us(100); 
009C:  MOVLW  A6
009D:  MOVWF  77
009E:  DECFSZ 77,F
009F:  GOTO   09E
00A0:  NOP
....................   OUTPUT_B(0X00); //  TAT HET CAC LED, CHONG LEM 
00A1:  BSF    03.5
00A2:  CLRF   06
00A3:  BCF    03.5
00A4:  CLRF   06
00A5:  BCF    0A.3
00A6:  BCF    0A.4
00A7:  GOTO   1B6 (RETURN)
.................... } 
....................  
.................... void ledblynk() 
*
012B:  CLRF   25
.................... { 
....................   int8 i = 0; 
....................  while (1) 
....................     
....................  { 
....................  hienthiall(); 
....................   
....................    i++; 
*
0172:  INCF   25,F
....................     output_high(led); 
0173:  BSF    03.5
0174:  BCF    06.5
0175:  BCF    03.5
0176:  BSF    06.5
....................    if(i/1000==1){ 
0177:  CLRF   2E
0178:  MOVF   25,W
0179:  MOVWF  2D
017A:  MOVLW  03
017B:  MOVWF  30
017C:  MOVLW  E8
017D:  MOVWF  2F
017E:  CALL   012
017F:  MOVF   79,W
0180:  MOVWF  27
0181:  MOVF   78,W
0182:  MOVWF  26
0183:  DECFSZ 26,W
0184:  GOTO   188
0185:  MOVF   27,F
0186:  BTFSS  03.2
0187:  GOTO   188
....................   
....................    } 
0188:  GOTO   12C
....................    
....................     
....................    
....................  
....................   } 
0189:  BCF    0A.3
018A:  BCF    0A.4
018B:  GOTO   1C6 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
