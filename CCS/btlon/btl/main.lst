CCS PCM C Compiler, Version 5.015, 5967               20-Thg5-21 18:16

               Filename:   E:\PIC16F877A\CCS\btlon\btl\main.lst

               ROM used:   597 words (7%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           31 (8%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   202
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.5
001E:  GOTO   021
001F:  BTFSC  0C.5
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   046
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   061
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0038:  BCF    0A.0
0039:  BCF    0A.1
003A:  BCF    0A.2
003B:  ADDWF  02,F
003C:  RETLW  C0
003D:  RETLW  F9
003E:  RETLW  A4
003F:  RETLW  B0
0040:  RETLW  99
0041:  RETLW  92
0042:  RETLW  82
0043:  RETLW  F8
0044:  RETLW  80
0045:  RETLW  90
*
0081:  BCF    0A.0
0082:  BCF    0A.1
0083:  BCF    0A.2
0084:  ADDWF  02,F
0085:  GOTO   076
0086:  GOTO   06E
0087:  GOTO   070
0088:  GOTO   072
0089:  GOTO   074
008A:  GOTO   07D
008B:  GOTO   07D
008C:  GOTO   078
008D:  GOTO   07A
008E:  GOTO   07C
*
0101:  MOVF   35,W
0102:  CLRF   78
0103:  SUBWF  34,W
0104:  BTFSC  03.0
0105:  GOTO   109
0106:  MOVF   34,W
0107:  MOVWF  77
0108:  GOTO   115
0109:  CLRF   77
010A:  MOVLW  08
010B:  MOVWF  36
010C:  RLF    34,F
010D:  RLF    77,F
010E:  MOVF   35,W
010F:  SUBWF  77,W
0110:  BTFSC  03.0
0111:  MOVWF  77
0112:  RLF    78,F
0113:  DECFSZ 36,F
0114:  GOTO   10C
0115:  RETURN
....................  
.................... #list 
....................  
.................... #device 16f877a*16ADC = 10 
.................... #use fast_io(b) 
.................... #FUSES NOWDT, HS, PUT, NOPROTECT, 
.................... #use DELAY(clock = 20000000) 
*
00ED:  MOVLW  35
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  MOVF   00,W
00F1:  BTFSC  03.2
00F2:  GOTO   100
00F3:  MOVLW  06
00F4:  MOVWF  78
00F5:  CLRF   77
00F6:  DECFSZ 77,F
00F7:  GOTO   0F6
00F8:  DECFSZ 78,F
00F9:  GOTO   0F5
00FA:  MOVLW  7B
00FB:  MOVWF  77
00FC:  DECFSZ 77,F
00FD:  GOTO   0FC
00FE:  DECFSZ 00,F
00FF:  GOTO   0F3
0100:  RETURN
.................... #use rs232(baud = 9600, xmit = pin_c6, rcv = pin_c7) 
.................... #byte intcon = 0x000B 
.................... #bit RBIF = intcon .0 //dinh nghia co ngat RB 
.................... #bit RBIE = intcon .3 //dinh nghia bit cho phep ngat RB 
.................... const char mang[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
....................  
.................... #define SH PIN_D3 
.................... #define DS PIN_D4 
.................... #define ST PIN_D5 
....................  
.................... #define tb1 PIN_B0 
.................... #define tb2 PIN_B1 
.................... #define tb3 PIN_B2 
.................... #define tb4 PIN_B3 
.................... #define btn PIN_B4 
....................  
.................... // traffic light 
.................... #define red PIN_D0 
.................... #define yl PIN_D1 
.................... #define gr PIN_D2 
....................  
....................  
.................... int8 a, a1, a2, a3, a4, a5 = 0; 
.................... int8 value; 
....................  
.................... int8 nData; 
.................... void autoo(); 
.................... void manul(); 
.................... void send(); 
.................... void khoitao(void); 
.................... void dich_byte(int8 nData); 
.................... void chot_byte(int8 nData); 
.................... void OnLow2High(void); 
.................... void ghi_byte(int8 nData); 
....................  
.................... void red1(); 
.................... void yl1(); 
.................... void gr1(); 
.................... void read_btn(); 
.................... void traffic(); 
.................... void delay_r(int8 a); 
.................... void delay_g(int8 b); 
.................... void delay_y(int8 c); 
....................  char d1,d2 ; 
.................... #int_RB 
.................... void ngat_RB() 
.................... { 
....................  
....................   if ((RBIF) && (RBIE)) 
*
0046:  BTFSS  0B.0
0047:  GOTO   05D
0048:  BTFSS  0B.3
0049:  GOTO   05D
....................   { 
....................     //Kiem tra sw1 
....................  
....................     { 
....................       if (input(btn) == 0) 
004A:  BTFSC  06.4
004B:  GOTO   054
....................       { 
....................         output_high(tb1); 
004C:  BSF    06.0
....................         output_high(tb2); 
004D:  BSF    06.1
....................         output_high(tb3); 
004E:  BSF    06.2
....................         output_high(tb4); 
004F:  BSF    06.3
....................         a++; 
0050:  INCF   27,F
....................         a1++; 
0051:  INCF   28,F
....................          
....................        // printf("a"); 
....................         while (input(btn) == 0); 
0052:  BTFSS  06.4
0053:  GOTO   052
....................       } 
....................       if (a == 2) 
0054:  MOVF   27,W
0055:  SUBLW  02
0056:  BTFSS  03.2
0057:  GOTO   05D
....................       { 
....................         output_low(tb1); 
0058:  BCF    06.0
....................         output_low(tb2); 
0059:  BCF    06.1
....................         output_low(tb3); 
005A:  BCF    06.2
....................         output_low(tb4); 
005B:  BCF    06.3
....................         a = 0; 
005C:  CLRF   27
....................        // printf("o"); 
....................       } 
....................      
....................     } 
....................   } 
....................      
.................... } 
....................  
.................... // 
....................  
005D:  BCF    0B.0
005E:  BCF    0A.3
005F:  BCF    0A.4
0060:  GOTO   021
.................... #INT_RDA 
.................... void ngat_uart() 
.................... { 
.................... if(kbhit()){ 
0061:  BTFSC  0C.5
.................... output_high(PIN_B5);      
0062:  BSF    06.5
....................  
....................  
....................  }   
.................... //d2 = getc(); 
.................... d1 = getc(); 
0063:  BTFSS  0C.5
0064:  GOTO   063
0065:  MOVF   1A,W
0066:  MOVWF  2F
....................   switch (d1) 
0067:  MOVLW  30
0068:  SUBWF  2F,W
0069:  ADDLW  F6
006A:  BTFSC  03.0
006B:  GOTO   07D
006C:  ADDLW  0A
006D:  GOTO   081
....................   { 
....................   case '1': 
....................     output_high(tb1); 
006E:  BSF    06.0
....................     break; 
006F:  GOTO   07D
....................   case '2': 
....................     output_high(tb2); 
0070:  BSF    06.1
....................     break; 
0071:  GOTO   07D
....................   case '3': 
....................     output_high(tb3); 
0072:  BSF    06.2
....................     break; 
0073:  GOTO   07D
....................   case '4': 
....................     output_high(tb4); 
0074:  BSF    06.3
....................     break; 
0075:  GOTO   07D
....................   case '0': 
....................     output_low(tb1); 
0076:  BCF    06.0
....................     break; 
0077:  GOTO   07D
....................   case '7': 
....................     output_low(tb2); 
0078:  BCF    06.1
....................     break; 
0079:  GOTO   07D
....................   case '8': 
....................     output_low(tb3); 
007A:  BCF    06.2
....................     break; 
007B:  GOTO   07D
....................   case '9': 
....................     output_low(tb4); 
007C:  BCF    06.3
....................     break; 
....................    
....................   
....................   } 
....................    
....................   
....................    
007D:  BCF    0C.5
007E:  BCF    0A.3
007F:  BCF    0A.4
0080:  GOTO   021
.................... } 
....................  
....................  
.................... void docADC() // khai bao adc 
.................... { 
....................   setup_ADC(ADC_clock_internal); 
*
008F:  BSF    03.5
0090:  BCF    1F.6
0091:  BCF    03.5
0092:  BSF    1F.6
0093:  BSF    1F.7
0094:  BSF    03.5
0095:  BSF    1F.7
0096:  BCF    03.5
0097:  BSF    1F.0
....................   setup_ADC_ports(AN0); 
0098:  BSF    03.5
0099:  BCF    1F.0
009A:  BSF    1F.1
009B:  BSF    1F.2
009C:  BSF    1F.3
....................   set_ADC_channel(0); 
009D:  MOVLW  00
009E:  MOVWF  78
009F:  BCF    03.5
00A0:  MOVF   1F,W
00A1:  ANDLW  C7
00A2:  IORWF  78,W
00A3:  MOVWF  1F
....................   delay_us(100); 
00A4:  MOVLW  A6
00A5:  MOVWF  77
00A6:  DECFSZ 77,F
00A7:  GOTO   0A6
00A8:  NOP
00A9:  BCF    0A.3
00AA:  BCF    0A.4
00AB:  GOTO   22C (RETURN)
.................... } 
....................  
.................... void main() 
*
0202:  MOVF   03,W
0203:  ANDLW  1F
0204:  MOVWF  03
0205:  MOVLW  81
0206:  BSF    03.5
0207:  MOVWF  19
0208:  MOVLW  A6
0209:  MOVWF  18
020A:  MOVLW  90
020B:  BCF    03.5
020C:  MOVWF  18
020D:  CLRF   2C
020E:  BSF    03.5
020F:  BSF    1F.0
0210:  BSF    1F.1
0211:  BSF    1F.2
0212:  BCF    1F.3
0213:  MOVLW  07
0214:  MOVWF  1C
0215:  BCF    03.7
.................... { 
....................   enable_interrupts(GLOBAL); 
0216:  MOVLW  C0
0217:  BCF    03.5
0218:  IORWF  0B,F
....................   enable_interrupts(INT_RDA); 
0219:  BSF    03.5
021A:  BSF    0C.5
....................   enable_interrupts(global); 
021B:  BCF    03.5
021C:  IORWF  0B,F
....................   enable_interrupts(int_RB); 
021D:  BSF    0B.3
....................   ext_int_edge(H_to_L); 
021E:  BSF    03.5
021F:  BCF    01.6
....................   SET_TRIS_B(0b00010000); 
0220:  MOVLW  10
0221:  MOVWF  06
....................   SET_TRIS_D(0x00); 
0222:  MOVLW  00
0223:  MOVWF  08
....................   output_b(0b11110000); 
0224:  MOVLW  F0
0225:  BCF    03.5
0226:  MOVWF  06
....................   output_d(0x00); 
0227:  BSF    03.5
0228:  CLRF   08
0229:  BCF    03.5
022A:  CLRF   08
....................   docADC(); 
022B:  GOTO   08F
....................   output_low(PIN_B5); 
022C:  BCF    06.5
....................   output_low(PIN_B6); 
022D:  BCF    06.6
....................  
....................   khoitao(); 
022E:  GOTO   0AC
....................   ghi_byte(0x90); 
022F:  MOVLW  90
0230:  MOVWF  35
0231:  CALL   0BB
....................   Delay_ms(200); 
0232:  MOVLW  C8
0233:  MOVWF  35
0234:  CALL   0ED
....................   ghi_byte(0xC0); 
0235:  MOVLW  C0
0236:  MOVWF  35
0237:  CALL   0BB
....................   Delay_ms(200); 
0238:  MOVLW  C8
0239:  MOVWF  35
023A:  CALL   0ED
....................   nData = 0; 
023B:  CLRF   2E
....................  
....................   while (true) 
....................   { 
....................  
....................  
....................   if(a1==3 || d1 == 'j'){ 
023C:  MOVF   28,W
023D:  SUBLW  03
023E:  BTFSC  03.2
023F:  GOTO   243
0240:  MOVF   2F,W
0241:  SUBLW  6A
0242:  BTFSC  03.2
....................   traffic(); 
0243:  CALL   116
....................   } 
....................   if(a1==4 || d1 == 'f'){ 
0244:  MOVF   28,W
0245:  SUBLW  04
0246:  BTFSC  03.2
0247:  GOTO   24B
0248:  MOVF   2F,W
0249:  SUBLW  66
024A:  BTFSC  03.2
....................   autoo(); 
024B:  CALL   1D1
....................   } 
....................   if(a1==5){ 
024C:  MOVF   28,W
024D:  SUBLW  05
024E:  BTFSS  03.2
024F:  GOTO   252
....................   a1=0; 
0250:  CLRF   28
....................   } 
0251:  GOTO   253
....................     
....................    else{ 
....................    autoo(); 
0252:  CALL   1D1
....................    } 
0253:  GOTO   23C
....................  
....................    
....................  
....................   } 
....................   
....................  
....................      
....................    
.................... } 
....................  
0254:  SLEEP
.................... void red1() 
.................... { 
....................  
....................   output_high(red); 
*
0116:  BSF    03.5
0117:  BCF    08.0
0118:  BCF    03.5
0119:  BSF    08.0
....................   output_low(yl); 
011A:  BSF    03.5
011B:  BCF    08.1
011C:  BCF    03.5
011D:  BCF    08.1
....................   output_low(gr); 
011E:  BSF    03.5
011F:  BCF    08.2
0120:  BCF    03.5
0121:  BCF    08.2
.................... } 
.................... void yl1() 
.................... { 
....................  
....................   output_high(yl); 
*
0192:  BSF    03.5
0193:  BCF    08.1
0194:  BCF    03.5
0195:  BSF    08.1
....................   output_low(red); 
0196:  BSF    03.5
0197:  BCF    08.0
0198:  BCF    03.5
0199:  BCF    08.0
....................   output_low(gr); 
019A:  BSF    03.5
019B:  BCF    08.2
019C:  BCF    03.5
019D:  BCF    08.2
.................... } 
.................... void gr1() 
.................... { 
....................   output_high(gr); 
*
0154:  BSF    03.5
0155:  BCF    08.2
0156:  BCF    03.5
0157:  BSF    08.2
....................   output_low(yl); 
0158:  BSF    03.5
0159:  BCF    08.1
015A:  BCF    03.5
015B:  BCF    08.1
....................   output_low(red); 
015C:  BSF    03.5
015D:  BCF    08.0
015E:  BCF    03.5
015F:  BCF    08.0
.................... } 
....................  
.................... void read_btn() 
.................... { 
....................   if (input(btn) == 0) 
....................   { 
....................     output_high(tb1); 
....................     output_high(tb2); 
....................     output_high(tb3); 
....................     output_high(tb4); 
....................     a++; 
....................     a1++; 
....................     putc('a'); 
....................     while (input(btn) == 0) 
....................       ; 
....................   } 
....................   if (a == 2) 
....................   { 
....................     output_low(tb1); 
....................     output_low(tb2); 
....................     output_low(tb3); 
....................     output_low(tb4); 
....................     a = 0; 
....................     putc('o'); 
....................   } 
....................  
....................   if (a1 == 3) 
....................   { 
....................  
....................     if (value >= 70) 
....................     { 
....................       output_high(tb1); 
....................       output_high(tb2); 
....................       output_high(tb3); 
....................       output_high(tb4); 
....................     } 
....................     if (value <= 25) 
....................     { 
....................       output_low(tb1); 
....................       output_low(tb2); 
....................       output_low(tb3); 
....................       output_low(tb4); 
....................     } 
....................    
....................   } 
.................... } 
....................  
.................... void delay_r(int8 a) 
.................... { 
....................   for (a; a >= 0; a--) 
....................   { 
....................   // send(); 
....................     int a1 = (a) % 10; 
....................     int b1 = (a) / 10; 
*
0124:  MOVF   31,W
0125:  MOVWF  34
0126:  MOVLW  0A
0127:  MOVWF  35
0128:  CALL   101
0129:  MOVF   77,W
012A:  MOVWF  32
012B:  MOVF   31,W
012C:  MOVWF  34
012D:  MOVLW  0A
012E:  MOVWF  35
012F:  CALL   101
0130:  MOVF   78,W
0131:  MOVWF  33
....................     ghi_byte(mang[a1]); 
0132:  MOVF   32,W
0133:  CALL   038
0134:  MOVWF  34
0135:  MOVWF  35
0136:  CALL   0BB
....................     ghi_byte(mang[b1]); 
0137:  MOVF   33,W
0138:  CALL   038
0139:  MOVWF  34
013A:  MOVWF  35
013B:  CALL   0BB
....................  
....................     //!    ghi_byte1(mang[c]); 
....................     //!    ghi_byte1(mang[v]); 
....................     putc(a + 48); 
013C:  MOVLW  30
013D:  ADDWF  31,W
013E:  MOVWF  34
013F:  MOVF   34,W
0140:  BTFSS  0C.4
0141:  GOTO   140
0142:  MOVWF  19
....................  
....................     delay_ms(1000); 
0143:  MOVLW  04
0144:  MOVWF  34
0145:  MOVLW  FA
0146:  MOVWF  35
0147:  CALL   0ED
0148:  DECFSZ 34,F
0149:  GOTO   145
....................     if (a == 0) 
014A:  MOVF   31,F
014B:  BTFSS  03.2
014C:  GOTO   152
....................     { 
....................       putc('g'); 
014D:  MOVLW  67
014E:  BTFSS  0C.4
014F:  GOTO   14E
0150:  MOVWF  19
....................       break; 
0151:  GOTO   154
....................     } 
0152:  DECF   31,F
0153:  GOTO   124
....................   } 
.................... } 
....................  
.................... void delay_g(int8 b) 
.................... { 
....................   for (b; b >= 0; b--) 
....................   { 
....................     //putc('g'); 
....................      //send(); 
....................     int a1 = (b) % 10; 
....................     int b1 = (b) / 10; 
*
0162:  MOVF   31,W
0163:  MOVWF  34
0164:  MOVLW  0A
0165:  MOVWF  35
0166:  CALL   101
0167:  MOVF   77,W
0168:  MOVWF  32
0169:  MOVF   31,W
016A:  MOVWF  34
016B:  MOVLW  0A
016C:  MOVWF  35
016D:  CALL   101
016E:  MOVF   78,W
016F:  MOVWF  33
....................     ghi_byte(mang[a1]); 
0170:  MOVF   32,W
0171:  CALL   038
0172:  MOVWF  34
0173:  MOVWF  35
0174:  CALL   0BB
....................     ghi_byte(mang[b1]); 
0175:  MOVF   33,W
0176:  CALL   038
0177:  MOVWF  34
0178:  MOVWF  35
0179:  CALL   0BB
....................     putc(b + 48); 
017A:  MOVLW  30
017B:  ADDWF  31,W
017C:  MOVWF  34
017D:  MOVF   34,W
017E:  BTFSS  0C.4
017F:  GOTO   17E
0180:  MOVWF  19
....................     delay_ms(1000); 
0181:  MOVLW  04
0182:  MOVWF  34
0183:  MOVLW  FA
0184:  MOVWF  35
0185:  CALL   0ED
0186:  DECFSZ 34,F
0187:  GOTO   183
....................     if (b == 0) 
0188:  MOVF   31,F
0189:  BTFSS  03.2
018A:  GOTO   190
....................     { 
....................       putc('y'); 
018B:  MOVLW  79
018C:  BTFSS  0C.4
018D:  GOTO   18C
018E:  MOVWF  19
....................       break; 
018F:  GOTO   192
....................     } 
0190:  DECF   31,F
0191:  GOTO   162
....................   } 
.................... } 
....................  
.................... void delay_y(int8 c) 
.................... { 
....................   for (c; c >= 0; c--) 
....................   { 
....................     //putc('y'); 
....................      //send(); 
....................     int a1 = (c) % 10; 
....................     int b1 = (c) / 10; 
*
01A0:  MOVF   31,W
01A1:  MOVWF  34
01A2:  MOVLW  0A
01A3:  MOVWF  35
01A4:  CALL   101
01A5:  MOVF   77,W
01A6:  MOVWF  32
01A7:  MOVF   31,W
01A8:  MOVWF  34
01A9:  MOVLW  0A
01AA:  MOVWF  35
01AB:  CALL   101
01AC:  MOVF   78,W
01AD:  MOVWF  33
....................     ghi_byte(mang[a1]); 
01AE:  MOVF   32,W
01AF:  CALL   038
01B0:  MOVWF  34
01B1:  MOVWF  35
01B2:  CALL   0BB
....................     ghi_byte(mang[b1]); 
01B3:  MOVF   33,W
01B4:  CALL   038
01B5:  MOVWF  34
01B6:  MOVWF  35
01B7:  CALL   0BB
....................     putc(c + 48); 
01B8:  MOVLW  30
01B9:  ADDWF  31,W
01BA:  MOVWF  34
01BB:  MOVF   34,W
01BC:  BTFSS  0C.4
01BD:  GOTO   1BC
01BE:  MOVWF  19
....................     delay_ms(1000); 
01BF:  MOVLW  04
01C0:  MOVWF  34
01C1:  MOVLW  FA
01C2:  MOVWF  35
01C3:  CALL   0ED
01C4:  DECFSZ 34,F
01C5:  GOTO   1C1
....................     if (c == 0) 
01C6:  MOVF   31,F
01C7:  BTFSS  03.2
01C8:  GOTO   1CE
....................     { 
....................       putc('r'); 
01C9:  MOVLW  72
01CA:  BTFSS  0C.4
01CB:  GOTO   1CA
01CC:  MOVWF  19
....................       break; 
01CD:  GOTO   1D0
....................     } 
01CE:  DECF   31,F
01CF:  GOTO   1A0
....................   } 
.................... } 
....................  
.................... void traffic() 
.................... { 
....................    //send(); 
....................   red1(); 
....................   delay_r(10); 
*
0122:  MOVLW  0A
0123:  MOVWF  31
....................  
....................   gr1(); 
....................  
....................   delay_g(5); 
*
0160:  MOVLW  05
0161:  MOVWF  31
....................  
....................   yl1(); 
....................  
....................   delay_y(2); 
*
019E:  MOVLW  02
019F:  MOVWF  31
*
01D0:  RETURN
.................... } 
....................  
.................... /// 
.................... void khoitao(void) 
.................... { 
....................   output_low(SH); 
*
00AC:  BSF    03.5
00AD:  BCF    08.3
00AE:  BCF    03.5
00AF:  BCF    08.3
....................   output_low(DS); 
00B0:  BSF    03.5
00B1:  BCF    08.4
00B2:  BCF    03.5
00B3:  BCF    08.4
....................   output_low(ST); 
00B4:  BSF    03.5
00B5:  BCF    08.5
00B6:  BCF    03.5
00B7:  BCF    08.5
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   22F (RETURN)
.................... } 
....................  
.................... void dich_byte(int8 nData) 
.................... { 
....................   int8 i, nMask; 
....................   nMask = 0x80; 
*
00C1:  MOVLW  80
00C2:  MOVWF  38
....................  
....................   for (i = 0; i < 8; i++) 
00C3:  CLRF   37
00C4:  MOVF   37,W
00C5:  SUBLW  07
00C6:  BTFSS  03.0
00C7:  GOTO   0E8
....................   { 
....................     output_low(SH); 
00C8:  BSF    03.5
00C9:  BCF    08.3
00CA:  BCF    03.5
00CB:  BCF    08.3
....................  
....................     if (nData & nMask) 
00CC:  MOVF   36,W
00CD:  ANDWF  38,W
00CE:  BTFSC  03.2
00CF:  GOTO   0D5
....................       output_high(DS); //DS=1 
00D0:  BSF    03.5
00D1:  BCF    08.4
00D2:  BCF    03.5
00D3:  BSF    08.4
00D4:  GOTO   0D9
....................     else 
....................       output_low(DS); // DS=0 
00D5:  BSF    03.5
00D6:  BCF    08.4
00D7:  BCF    03.5
00D8:  BCF    08.4
....................  
....................     output_high(SH); 
00D9:  BSF    03.5
00DA:  BCF    08.3
00DB:  BCF    03.5
00DC:  BSF    08.3
....................     Delay_us(1); 
00DD:  GOTO   0DE
00DE:  GOTO   0DF
00DF:  NOP
....................     output_low(SH); 
00E0:  BSF    03.5
00E1:  BCF    08.3
00E2:  BCF    03.5
00E3:  BCF    08.3
....................  
....................     nMask = nMask >> 1; 
00E4:  BCF    03.0
00E5:  RRF    38,F
00E6:  INCF   37,F
00E7:  GOTO   0C4
....................   } 
.................... } 
....................  
.................... void ghi_byte(int8 nData) 
.................... { 
....................   output_low(ST); 
*
00BB:  BSF    03.5
00BC:  BCF    08.5
00BD:  BCF    03.5
00BE:  BCF    08.5
....................   dich_byte(nData); 
00BF:  MOVF   35,W
00C0:  MOVWF  36
....................   output_high(ST); 
*
00E8:  BSF    03.5
00E9:  BCF    08.5
00EA:  BCF    03.5
00EB:  BSF    08.5
00EC:  RETURN
.................... } 
....................  
.................... void send(){ 
.................... value = read_adc()+48; 
.................... //printf ("%u",value); 
.................... if (value<100){ 
....................   output_high(tb1); 
....................   output_high(tb2); 
....................   output_high(tb3); 
....................   output_high(tb4); 
....................   output_low(PIN_B6); 
.................... } 
.................... else{ 
.................... output_high(PIN_B6); 
.................... output_low(tb1); 
.................... output_low(tb2); 
.................... output_low(tb3); 
.................... output_low(tb4); 
.................... } 
....................  
.................... } 
....................  
.................... void autoo(){ 
.................... value = read_adc()+48; 
*
01D1:  BSF    1F.2
01D2:  BTFSC  1F.2
01D3:  GOTO   1D2
01D4:  BSF    03.5
01D5:  MOVF   1E,W
01D6:  BCF    03.5
01D7:  MOVWF  31
01D8:  MOVLW  30
01D9:  ADDWF  31,W
01DA:  MOVWF  2D
.................... //printf ("%u",value); 
.................... if (value>100){ 
01DB:  MOVF   2D,W
01DC:  SUBLW  64
01DD:  BTFSC  03.0
01DE:  GOTO   1E6
....................   output_high(PIN_B6); 
01DF:  BSF    06.6
.................... output_low(tb1); 
01E0:  BCF    06.0
.................... output_low(tb2); 
01E1:  BCF    06.1
.................... output_low(tb3); 
01E2:  BCF    06.2
.................... output_low(tb4); 
01E3:  BCF    06.3
.................... traffic(); 
01E4:  CALL   116
....................   
.................... } 
01E5:  GOTO   201
....................  
.................... else{ 
.................... // 
.................... output_high(tb1); 
01E6:  BSF    06.0
....................   output_high(tb2); 
01E7:  BSF    06.1
....................   output_high(tb3); 
01E8:  BSF    06.2
....................   output_high(tb4); 
01E9:  BSF    06.3
....................   output_low(PIN_B6); 
01EA:  BCF    06.6
....................    output_high(yl); 
01EB:  BSF    03.5
01EC:  BCF    08.1
01ED:  BCF    03.5
01EE:  BSF    08.1
....................     delay_ms(500); 
01EF:  MOVLW  02
01F0:  MOVWF  31
01F1:  MOVLW  FA
01F2:  MOVWF  35
01F3:  CALL   0ED
01F4:  DECFSZ 31,F
01F5:  GOTO   1F1
....................     output_low(yl); 
01F6:  BSF    03.5
01F7:  BCF    08.1
01F8:  BCF    03.5
01F9:  BCF    08.1
....................     delay_ms(500); 
01FA:  MOVLW  02
01FB:  MOVWF  31
01FC:  MOVLW  FA
01FD:  MOVWF  35
01FE:  CALL   0ED
01FF:  DECFSZ 31,F
0200:  GOTO   1FC
.................... } 
0201:  RETURN
....................  
....................  
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
