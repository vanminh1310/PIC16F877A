CCS PCM C Compiler, Version 5.015, 5967               16-Thg3-21 16:58

               Filename:   E:\PIC16F877A\CCS\btlon\uart_gui\main.lst

               ROM used:   913 words (11%)
                           Largest free fragment is 2048
               RAM used:   45 (12%) at main() level
                           58 (16%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   31D
0003:  NOP
.................... // Bai tap lon he thong nhung  
.................... // LCD module connections(Khai bao lcd ) 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D3 
.................... #define LCD_DATA5 PIN_D4 
.................... #define LCD_DATA6 PIN_D5 
.................... #define LCD_DATA7 PIN_D6 
.................... // end LCD module connections 
....................   
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA C8,22
0005:  DATA 20,2A
0006:  DATA C8,27
0007:  DATA CE,23
0008:  DATA 20,27
0009:  DATA C8,2A
000A:  DATA CE,23
000B:  DATA 00,00
000C:  DATA D4,34
000D:  DATA ED,32
000E:  DATA A0,37
000F:  DATA 75,3A
0010:  DATA 21,00
0011:  DATA 43,34
0012:  DATA E5,31
0013:  DATA EB,39
0014:  DATA F5,36
0015:  DATA A0,22
0016:  DATA 72,39
0017:  DATA 6F,39
0018:  DATA 21,00
0019:  DATA CE,37
001A:  DATA 20,39
001B:  DATA E5,39
001C:  DATA F0,37
001D:  DATA EE,39
001E:  DATA 65,00
001F:  DATA 66,39
0020:  DATA EF,36
0021:  DATA 20,3A
0022:  DATA E8,32
0023:  DATA A0,39
0024:  DATA 65,37
0025:  DATA F3,37
0026:  DATA 72,00
*
0178:  MOVF   0B,W
0179:  MOVWF  47
017A:  BCF    0B.7
017B:  BSF    03.5
017C:  BSF    03.6
017D:  BSF    0C.7
017E:  BSF    0C.0
017F:  NOP
0180:  NOP
0181:  BCF    03.5
0182:  BCF    03.6
0183:  BTFSC  47.7
0184:  BSF    0B.7
0185:  BSF    03.6
0186:  MOVF   0C,W
0187:  ANDLW  7F
0188:  BTFSC  03.2
0189:  GOTO   1CC
018A:  BCF    03.6
018B:  MOVWF  47
018C:  BSF    03.6
018D:  MOVF   0D,W
018E:  BCF    03.6
018F:  MOVWF  48
0190:  BSF    03.6
0191:  MOVF   0F,W
0192:  BCF    03.6
0193:  MOVWF  49
0194:  MOVF   47,W
0195:  MOVWF  4A
0196:  CALL   14C
0197:  MOVF   48,W
0198:  BSF    03.6
0199:  MOVWF  0D
019A:  BCF    03.6
019B:  MOVF   49,W
019C:  BSF    03.6
019D:  MOVWF  0F
019E:  BCF    03.6
019F:  MOVF   0B,W
01A0:  MOVWF  4A
01A1:  BCF    0B.7
01A2:  BSF    03.5
01A3:  BSF    03.6
01A4:  BSF    0C.7
01A5:  BSF    0C.0
01A6:  NOP
01A7:  NOP
01A8:  BCF    03.5
01A9:  BCF    03.6
01AA:  BTFSC  4A.7
01AB:  BSF    0B.7
01AC:  BSF    03.6
01AD:  RLF    0C,W
01AE:  RLF    0E,W
01AF:  ANDLW  7F
01B0:  BTFSC  03.2
01B1:  GOTO   1CC
01B2:  BCF    03.6
01B3:  MOVWF  47
01B4:  BSF    03.6
01B5:  MOVF   0D,W
01B6:  BCF    03.6
01B7:  MOVWF  48
01B8:  BSF    03.6
01B9:  MOVF   0F,W
01BA:  BCF    03.6
01BB:  MOVWF  49
01BC:  MOVF   47,W
01BD:  MOVWF  4A
01BE:  CALL   14C
01BF:  MOVF   48,W
01C0:  BSF    03.6
01C1:  MOVWF  0D
01C2:  BCF    03.6
01C3:  MOVF   49,W
01C4:  BSF    03.6
01C5:  MOVWF  0F
01C6:  INCF   0D,F
01C7:  BTFSC  03.2
01C8:  INCF   0F,F
01C9:  BCF    03.6
01CA:  GOTO   178
01CB:  BSF    03.6
01CC:  BCF    03.6
01CD:  RETURN
*
0239:  MOVF   48,W
023A:  CLRF   78
023B:  SUBWF  47,W
023C:  BTFSC  03.0
023D:  GOTO   241
023E:  MOVF   47,W
023F:  MOVWF  77
0240:  GOTO   24D
0241:  CLRF   77
0242:  MOVLW  08
0243:  MOVWF  49
0244:  RLF    47,F
0245:  RLF    77,F
0246:  MOVF   48,W
0247:  SUBWF  77,W
0248:  BTFSC  03.0
0249:  MOVWF  77
024A:  RLF    78,F
024B:  DECFSZ 49,F
024C:  GOTO   244
024D:  RETURN
024E:  MOVF   00,F
024F:  BTFSC  03.2
0250:  GOTO   263
0251:  CLRF   48
0252:  MOVF   04,W
0253:  MOVWF  47
0254:  BCF    48.0
0255:  BTFSC  03.7
0256:  BSF    48.0
0257:  MOVF   00,W
0258:  MOVWF  4A
0259:  CALL   14C
025A:  MOVF   47,W
025B:  MOVWF  04
025C:  BCF    03.7
025D:  BTFSC  48.0
025E:  BSF    03.7
025F:  INCF   04,F
0260:  BTFSC  03.2
0261:  INCF   05,F
0262:  GOTO   24E
0263:  RETURN
....................  
.................... #list 
....................  
.................... #fuses NOWDT,PUT,XT,NOPROTECT               
.................... #use delay(clock = 8000000) 
*
0027:  MOVLW  4C
0028:  MOVWF  04
0029:  BCF    03.7
002A:  MOVF   00,W
002B:  BTFSC  03.2
002C:  GOTO   03A
002D:  MOVLW  02
002E:  MOVWF  78
002F:  CLRF   77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   02F
0034:  MOVLW  97
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 00,F
0039:  GOTO   02D
003A:  RETURN
.................... #include <lcd.c>            // include LCD driver source file 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A0:  BSF    08.3
....................    output_float(LCD_DATA5); 
00A1:  BSF    08.4
....................    output_float(LCD_DATA6); 
00A2:  BSF    08.5
....................    output_float(LCD_DATA7); 
00A3:  BSF    08.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A4:  BCF    03.5
00A5:  BSF    08.1
00A6:  BSF    03.5
00A7:  BCF    08.1
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    08.2
00AB:  BSF    03.5
00AC:  BCF    08.2
....................    delay_cycles(1); 
00AD:  NOP
....................    high = lcd_read_nibble(); 
00AE:  BCF    03.5
00AF:  CALL   067
00B0:  MOVF   78,W
00B1:  MOVWF  52
....................        
....................    lcd_output_enable(0); 
00B2:  BCF    08.2
00B3:  BSF    03.5
00B4:  BCF    08.2
....................    delay_cycles(1); 
00B5:  NOP
....................    lcd_output_enable(1); 
00B6:  BCF    03.5
00B7:  BSF    08.2
00B8:  BSF    03.5
00B9:  BCF    08.2
....................    delay_us(1); 
00BA:  GOTO   0BB
....................    low = lcd_read_nibble(); 
00BB:  BCF    03.5
00BC:  CALL   067
00BD:  MOVF   78,W
00BE:  MOVWF  51
....................        
....................    lcd_output_enable(0); 
00BF:  BCF    08.2
00C0:  BSF    03.5
00C1:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C2:  BCF    08.3
....................    output_drive(LCD_DATA5); 
00C3:  BCF    08.4
....................    output_drive(LCD_DATA6); 
00C4:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00C5:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C6:  BCF    03.5
00C7:  SWAPF  52,W
00C8:  MOVWF  77
00C9:  MOVLW  F0
00CA:  ANDWF  77,F
00CB:  MOVF   77,W
00CC:  IORWF  51,W
00CD:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0067:  CLRF   53
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0068:  BSF    03.5
0069:  BSF    08.3
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  08.3
006D:  MOVLW  01
006E:  IORWF  53,F
....................    n |= input(LCD_DATA5) << 1; 
006F:  BSF    03.5
0070:  BSF    08.4
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.4
0074:  MOVLW  01
0075:  MOVWF  77
0076:  BCF    03.0
0077:  RLF    77,F
0078:  MOVF   77,W
0079:  IORWF  53,F
....................    n |= input(LCD_DATA6) << 2; 
007A:  BSF    03.5
007B:  BSF    08.5
007C:  MOVLW  00
007D:  BCF    03.5
007E:  BTFSC  08.5
007F:  MOVLW  01
0080:  MOVWF  77
0081:  RLF    77,F
0082:  RLF    77,F
0083:  MOVLW  FC
0084:  ANDWF  77,F
0085:  MOVF   77,W
0086:  IORWF  53,F
....................    n |= input(LCD_DATA7) << 3; 
0087:  BSF    03.5
0088:  BSF    08.6
0089:  MOVLW  00
008A:  BCF    03.5
008B:  BTFSC  08.6
008C:  MOVLW  01
008D:  MOVWF  77
008E:  RLF    77,F
008F:  RLF    77,F
0090:  RLF    77,F
0091:  MOVLW  F8
0092:  ANDWF  77,F
0093:  MOVF   77,W
0094:  IORWF  53,F
....................     
....................    return(n); 
0095:  MOVF   53,W
0096:  MOVWF  78
....................   #else 
0097:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003B:  BTFSC  52.0
003C:  GOTO   03F
003D:  BCF    08.3
003E:  GOTO   040
003F:  BSF    08.3
0040:  BSF    03.5
0041:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0042:  BCF    03.5
0043:  BTFSC  52.1
0044:  GOTO   047
0045:  BCF    08.4
0046:  GOTO   048
0047:  BSF    08.4
0048:  BSF    03.5
0049:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004A:  BCF    03.5
004B:  BTFSC  52.2
004C:  GOTO   04F
004D:  BCF    08.5
004E:  GOTO   050
004F:  BSF    08.5
0050:  BSF    03.5
0051:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0052:  BCF    03.5
0053:  BTFSC  52.3
0054:  GOTO   057
0055:  BCF    08.6
0056:  GOTO   058
0057:  BSF    08.6
0058:  BSF    03.5
0059:  BCF    08.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
005A:  NOP
....................    lcd_output_enable(1); 
005B:  BCF    03.5
005C:  BSF    08.2
005D:  BSF    03.5
005E:  BCF    08.2
....................    delay_us(2); 
005F:  GOTO   060
0060:  GOTO   061
....................    lcd_output_enable(0); 
0061:  BCF    03.5
0062:  BCF    08.2
0063:  BSF    03.5
0064:  BCF    08.2
0065:  BCF    03.5
0066:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0098:  BSF    03.5
0099:  BCF    08.2
....................    lcd_rs_tris(); 
009A:  BCF    08.0
....................    lcd_rw_tris(); 
009B:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
009C:  BCF    03.5
009D:  BCF    08.0
009E:  BSF    03.5
009F:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CE:  MOVF   78,W
00CF:  MOVWF  51
00D0:  BTFSS  51.7
00D1:  GOTO   0D4
00D2:  BSF    03.5
00D3:  GOTO   0A0
....................    lcd_output_rs(address); 
00D4:  MOVF   4F,F
00D5:  BTFSS  03.2
00D6:  GOTO   0D9
00D7:  BCF    08.0
00D8:  GOTO   0DA
00D9:  BSF    08.0
00DA:  BSF    03.5
00DB:  BCF    08.0
....................    delay_cycles(1); 
00DC:  NOP
....................    lcd_output_rw(0); 
00DD:  BCF    03.5
00DE:  BCF    08.1
00DF:  BSF    03.5
00E0:  BCF    08.1
....................    delay_cycles(1); 
00E1:  NOP
....................    lcd_output_enable(0); 
00E2:  BCF    03.5
00E3:  BCF    08.2
00E4:  BSF    03.5
00E5:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00E6:  BCF    03.5
00E7:  SWAPF  50,W
00E8:  MOVWF  51
00E9:  MOVLW  0F
00EA:  ANDWF  51,F
00EB:  MOVF   51,W
00EC:  MOVWF  52
00ED:  CALL   03B
....................    lcd_send_nibble(n & 0xf); 
00EE:  MOVF   50,W
00EF:  ANDLW  0F
00F0:  MOVWF  51
00F1:  MOVWF  52
00F2:  CALL   03B
00F3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00F4:  MOVLW  28
00F5:  MOVWF  48
00F6:  MOVLW  0C
00F7:  MOVWF  49
00F8:  MOVLW  01
00F9:  MOVWF  4A
00FA:  MOVLW  06
00FB:  MOVWF  4B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00FC:  BCF    08.2
00FD:  BSF    03.5
00FE:  BCF    08.2
....................    lcd_output_rs(0); 
00FF:  BCF    03.5
0100:  BCF    08.0
0101:  BSF    03.5
0102:  BCF    08.0
....................    lcd_output_rw(0); 
0103:  BCF    03.5
0104:  BCF    08.1
0105:  BSF    03.5
0106:  BCF    08.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0107:  BCF    08.3
....................    output_drive(LCD_DATA5); 
0108:  BCF    08.4
....................    output_drive(LCD_DATA6); 
0109:  BCF    08.5
....................    output_drive(LCD_DATA7); 
010A:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
010B:  BCF    08.2
....................    lcd_rs_tris(); 
010C:  BCF    08.0
....................    lcd_rw_tris(); 
010D:  BCF    08.1
....................  #endif 
....................      
....................    delay_ms(15); 
010E:  MOVLW  0F
010F:  BCF    03.5
0110:  MOVWF  4C
0111:  CALL   027
....................    for(i=1;i<=3;++i) 
0112:  MOVLW  01
0113:  MOVWF  47
0114:  MOVF   47,W
0115:  SUBLW  03
0116:  BTFSS  03.0
0117:  GOTO   120
....................    { 
....................        lcd_send_nibble(3); 
0118:  MOVLW  03
0119:  MOVWF  52
011A:  CALL   03B
....................        delay_ms(5); 
011B:  MOVLW  05
011C:  MOVWF  4C
011D:  CALL   027
011E:  INCF   47,F
011F:  GOTO   114
....................    } 
....................     
....................    lcd_send_nibble(2); 
0120:  MOVLW  02
0121:  MOVWF  52
0122:  CALL   03B
....................    delay_ms(5); 
0123:  MOVLW  05
0124:  MOVWF  4C
0125:  CALL   027
....................    for(i=0;i<=3;++i) 
0126:  CLRF   47
0127:  MOVF   47,W
0128:  SUBLW  03
0129:  BTFSS  03.0
012A:  GOTO   137
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012B:  MOVLW  48
012C:  ADDWF  47,W
012D:  MOVWF  04
012E:  BCF    03.7
012F:  MOVF   00,W
0130:  MOVWF  4C
0131:  CLRF   4F
0132:  MOVF   4C,W
0133:  MOVWF  50
0134:  CALL   098
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0135:  INCF   47,F
0136:  GOTO   127
0137:  BCF    0A.3
0138:  BCF    0A.4
0139:  GOTO   36E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
013A:  DECFSZ 4C,W
013B:  GOTO   13D
013C:  GOTO   140
....................       address=LCD_LINE_TWO; 
013D:  MOVLW  40
013E:  MOVWF  4D
013F:  GOTO   141
....................    else 
....................       address=0; 
0140:  CLRF   4D
....................       
....................    address+=x-1; 
0141:  MOVLW  01
0142:  SUBWF  4B,W
0143:  ADDWF  4D,F
....................    lcd_send_byte(0,0x80|address); 
0144:  MOVF   4D,W
0145:  IORLW  80
0146:  MOVWF  4E
0147:  CLRF   4F
0148:  MOVF   4E,W
0149:  MOVWF  50
014A:  CALL   098
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
014B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
014C:  MOVF   4A,W
014D:  XORLW  07
014E:  BTFSC  03.2
014F:  GOTO   15A
0150:  XORLW  0B
0151:  BTFSC  03.2
0152:  GOTO   15F
0153:  XORLW  06
0154:  BTFSC  03.2
0155:  GOTO   167
0156:  XORLW  02
0157:  BTFSC  03.2
0158:  GOTO   16D
0159:  GOTO   172
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
015A:  MOVLW  01
015B:  MOVWF  4B
015C:  MOVWF  4C
015D:  CALL   13A
015E:  GOTO   177
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
015F:  CLRF   4F
0160:  MOVLW  01
0161:  MOVWF  50
0162:  CALL   098
....................                      delay_ms(2); 
0163:  MOVLW  02
0164:  MOVWF  4C
0165:  CALL   027
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0166:  GOTO   177
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0167:  MOVLW  01
0168:  MOVWF  4B
0169:  MOVLW  02
016A:  MOVWF  4C
016B:  CALL   13A
016C:  GOTO   177
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
016D:  CLRF   4F
016E:  MOVLW  10
016F:  MOVWF  50
0170:  CALL   098
0171:  GOTO   177
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0172:  MOVLW  01
0173:  MOVWF  4F
0174:  MOVF   4A,W
0175:  MOVWF  50
0176:  CALL   098
....................      #endif 
....................    } 
0177:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use fast_io(b) 
.................... #define DHT11_PIN PIN_A0   // connection pin between DHT11 and mcu 
.................... #byte intcon=0x000B 
.................... #bit RBIF=intcon.0  // dinh nghia ngat rb 
.................... #bit RBIE=intcon.3 //dinh nghia bit cho phep ngat RB 
.................... #define btn1  PIN_B4 
.................... #define btn2 PIN_B5 
.................... #define btn3 PIN_B6 
.................... #define btn4 PIN_B7 
.................... int led = 0;  
....................  
.................... // chuong trinh ngat  
.................... void ngatRb(){ 
.................... if(RBIF&&RBIE){ 
.................... //kiem tra btn1  
.................... if(btn1==0){ 
.................... led = 0b00000001; 
.................... } 
....................  
.................... } 
.................... } 
....................  
....................   
.................... char message1[] = "Temp = 00.0 C  "; 
*
0329:  MOVLW  54
032A:  BCF    03.5
032B:  MOVWF  21
032C:  MOVLW  65
032D:  MOVWF  22
032E:  MOVLW  6D
032F:  MOVWF  23
0330:  MOVLW  70
0331:  MOVWF  24
0332:  MOVLW  20
0333:  MOVWF  25
0334:  MOVLW  3D
0335:  MOVWF  26
0336:  MOVLW  20
0337:  MOVWF  27
0338:  MOVLW  30
0339:  MOVWF  28
033A:  MOVWF  29
033B:  MOVLW  2E
033C:  MOVWF  2A
033D:  MOVLW  30
033E:  MOVWF  2B
033F:  MOVLW  20
0340:  MOVWF  2C
0341:  MOVLW  43
0342:  MOVWF  2D
0343:  MOVLW  20
0344:  MOVWF  2E
0345:  MOVWF  2F
0346:  CLRF   30
.................... char message2[] = "RH   = 00.0 %  "; 
0347:  MOVLW  52
0348:  MOVWF  31
0349:  MOVLW  48
034A:  MOVWF  32
034B:  MOVLW  20
034C:  MOVWF  33
034D:  MOVWF  34
034E:  MOVWF  35
034F:  MOVLW  3D
0350:  MOVWF  36
0351:  MOVLW  20
0352:  MOVWF  37
0353:  MOVLW  30
0354:  MOVWF  38
0355:  MOVWF  39
0356:  MOVLW  2E
0357:  MOVWF  3A
0358:  MOVLW  30
0359:  MOVWF  3B
035A:  MOVLW  20
035B:  MOVWF  3C
035C:  MOVLW  25
035D:  MOVWF  3D
035E:  MOVLW  20
035F:  MOVWF  3E
0360:  MOVWF  3F
0361:  CLRF   40
.................... short Time_out; 
.................... unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum ; 
.................... void writeDth11(); 
.................... void start_signal(){ 
....................   output_drive(DHT11_PIN);    // configure connection pin as output 
*
01CE:  BSF    03.5
01CF:  BCF    05.0
....................   output_low(DHT11_PIN);      // connection pin output low 
01D0:  BCF    05.0
01D1:  BCF    03.5
01D2:  BCF    05.0
....................   delay_ms(25); 
01D3:  MOVLW  19
01D4:  MOVWF  4C
01D5:  CALL   027
....................   output_high(DHT11_PIN);     // connection pin output high 
01D6:  BSF    03.5
01D7:  BCF    05.0
01D8:  BCF    03.5
01D9:  BSF    05.0
....................   delay_us(30); 
01DA:  MOVLW  13
01DB:  MOVWF  77
01DC:  DECFSZ 77,F
01DD:  GOTO   1DC
01DE:  GOTO   1DF
....................   output_float(DHT11_PIN);    // configure connection pin as input 
01DF:  BSF    03.5
01E0:  BSF    05.0
01E1:  BCF    03.5
01E2:  BCF    0A.3
01E3:  BCF    0A.4
01E4:  GOTO   387 (RETURN)
.................... } 
.................... short check_response(){ 
....................   delay_us(40); 
*
0264:  MOVLW  1A
0265:  MOVWF  77
0266:  DECFSZ 77,F
0267:  GOTO   266
0268:  NOP
....................   if(!input(DHT11_PIN)){      // read and test if connection pin is low 
0269:  BSF    03.5
026A:  BSF    05.0
026B:  BCF    03.5
026C:  BTFSC  05.0
026D:  GOTO   281
....................     delay_us(80); 
026E:  MOVLW  34
026F:  MOVWF  77
0270:  DECFSZ 77,F
0271:  GOTO   270
0272:  GOTO   273
0273:  NOP
....................     if(input(DHT11_PIN)){     // read and test if connection pin is high 
0274:  BSF    03.5
0275:  BSF    05.0
0276:  BCF    03.5
0277:  BTFSS  05.0
0278:  GOTO   281
....................       delay_us(50); 
0279:  MOVLW  20
027A:  MOVWF  77
027B:  DECFSZ 77,F
027C:  GOTO   27B
027D:  GOTO   27E
027E:  NOP
....................       return 1; 
027F:  MOVLW  01
0280:  MOVWF  78
....................     } 
....................   } 
.................... } 
.................... unsigned int8 Read_Data(){ 
*
01E5:  CLRF   49
....................   unsigned int8 i, k, _data = 0;        // k is used to count 1 bit reading duration 
....................   if(Time_out) 
01E6:  BTFSS  41.0
01E7:  GOTO   1E8
....................     break; 
....................   for(i = 0; i < 8; i++){ 
01E8:  CLRF   47
01E9:  MOVF   47,W
01EA:  SUBLW  07
01EB:  BTFSS  03.0
01EC:  GOTO   236
....................     k = 0; 
01ED:  CLRF   48
....................     while(!input(DHT11_PIN)){           // Wait until DHT11 pin get raised 
01EE:  BSF    03.5
01EF:  BSF    05.0
01F0:  BCF    03.5
01F1:  BTFSC  05.0
01F2:  GOTO   1FC
....................       k++; 
01F3:  INCF   48,F
....................       if(k > 100){ 
01F4:  MOVF   48,W
01F5:  SUBLW  64
01F6:  BTFSC  03.0
01F7:  GOTO   1FA
....................         Time_out = 1; 
01F8:  BSF    41.0
....................         break; 
01F9:  GOTO   1FC
....................       } 
....................       delay_us(1); 
01FA:  GOTO   1FB
01FB:  GOTO   1EE
....................     } 
....................     delay_us(30); 
01FC:  MOVLW  13
01FD:  MOVWF  77
01FE:  DECFSZ 77,F
01FF:  GOTO   1FE
0200:  GOTO   201
....................     if(!input(DHT11_PIN)) 
0201:  BSF    03.5
0202:  BSF    05.0
0203:  BCF    03.5
0204:  BTFSC  05.0
0205:  GOTO   217
....................       bit_clear(_data, (7 - i));        // Clear bit (7 - i) 
0206:  MOVF   47,W
0207:  SUBLW  07
0208:  MOVWF  4A
0209:  MOVLW  01
020A:  MOVWF  77
020B:  MOVF   4A,W
020C:  MOVWF  78
020D:  BTFSC  03.2
020E:  GOTO   213
020F:  BCF    03.0
0210:  RLF    77,F
0211:  DECFSZ 78,F
0212:  GOTO   20F
0213:  MOVF   77,W
0214:  XORLW  FF
0215:  ANDWF  49,F
0216:  GOTO   234
....................     else{ 
....................       bit_set(_data, (7 - i));          // Set bit (7 - i) 
0217:  MOVF   47,W
0218:  SUBLW  07
0219:  MOVWF  4A
021A:  MOVLW  01
021B:  MOVWF  77
021C:  MOVF   4A,W
021D:  MOVWF  78
021E:  BTFSC  03.2
021F:  GOTO   224
0220:  BCF    03.0
0221:  RLF    77,F
0222:  DECFSZ 78,F
0223:  GOTO   220
0224:  MOVF   77,W
0225:  IORWF  49,F
....................       while(input(DHT11_PIN)){          // Wait until DHT11 pin goes low 
0226:  BSF    03.5
0227:  BSF    05.0
0228:  BCF    03.5
0229:  BTFSS  05.0
022A:  GOTO   234
....................         k++; 
022B:  INCF   48,F
....................         if(k > 100){ 
022C:  MOVF   48,W
022D:  SUBLW  64
022E:  BTFSC  03.0
022F:  GOTO   232
....................         Time_out = 1; 
0230:  BSF    41.0
....................         break; 
0231:  GOTO   234
....................       } 
....................       delay_us(1);} 
0232:  GOTO   233
0233:  GOTO   226
....................     } 
0234:  INCF   47,F
0235:  GOTO   1E9
....................   } 
....................   return _data; 
0236:  MOVF   49,W
0237:  MOVWF  78
0238:  RETURN
.................... } 
.................... void main(){ 
*
031D:  MOVF   03,W
031E:  ANDLW  1F
031F:  MOVWF  03
0320:  CLRF   20
0321:  BSF    03.5
0322:  BSF    1F.0
0323:  BSF    1F.1
0324:  BSF    1F.2
0325:  BCF    1F.3
0326:  MOVLW  07
0327:  MOVWF  1C
0328:  BCF    03.7
.................... enable_interrupts(global); 
*
0362:  MOVLW  C0
0363:  IORWF  0B,F
.................... enable_interrupts(int_RB); 
0364:  BSF    0B.3
.................... set_tris_b(0b00001111); 
0365:  MOVLW  0F
0366:  BSF    03.5
0367:  MOVWF  06
.................... output_b(0b00001111); 
0368:  BCF    03.5
0369:  MOVWF  06
.................... ext_int_edge(H_to_L); 
036A:  BSF    03.5
036B:  BCF    01.6
....................   lcd_init();                                 // Initialize LCD module 
036C:  BCF    03.5
036D:  GOTO   0F4
....................   lcd_putc('\f');      // LCD clear 
036E:  MOVLW  0C
036F:  MOVWF  4A
0370:  CALL   14C
....................   lcd_gotoxy(1, 1);                     // Go to column 5 row 1 
0371:  MOVLW  01
0372:  MOVWF  4B
0373:  MOVWF  4C
0374:  CALL   13A
....................   lcd_putc("HE THONG NHUNG"); 
0375:  MOVLW  04
0376:  BSF    03.6
0377:  MOVWF  0D
0378:  MOVLW  00
0379:  MOVWF  0F
037A:  BCF    03.6
037B:  CALL   178
....................     
....................   delay_ms(1000); 
037C:  MOVLW  04
037D:  MOVWF  47
037E:  MOVLW  FA
037F:  MOVWF  4C
0380:  CALL   027
0381:  DECFSZ 47,F
0382:  GOTO   37E
....................   while(TRUE){ 
....................   output_b(led); 
0383:  MOVF   20,W
0384:  MOVWF  06
....................   //output_b(0); 
....................     Time_out = 0; 
0385:  BCF    41.0
....................     Start_signal(); 
0386:  GOTO   1CE
....................     writeDth11(); 
0387:  GOTO   264
....................   delay_ms(1000); 
0388:  MOVLW  04
0389:  MOVWF  47
038A:  MOVLW  FA
038B:  MOVWF  4C
038C:  CALL   027
038D:  DECFSZ 47,F
038E:  GOTO   38A
038F:  GOTO   383
....................   } 
.................... } 
.................... void writeDth11(){ 
0390:  SLEEP
....................  if(check_response()){                     // If there is a response from sensor 
*
0281:  MOVF   78,F
0282:  BTFSC  03.2
0283:  GOTO   2FF
....................       RH_byte1 = Read_Data();                 // read RH byte1 
0284:  CALL   1E5
0285:  MOVF   78,W
0286:  MOVWF  44
....................       RH_byte2 = Read_Data();                 // read RH byte2 
0287:  CALL   1E5
0288:  MOVF   78,W
0289:  MOVWF  45
....................       T_byte1 = Read_Data();                  // read T byte1 
028A:  CALL   1E5
028B:  MOVF   78,W
028C:  MOVWF  42
....................       T_byte2 = Read_Data();                  // read T byte2 
028D:  CALL   1E5
028E:  MOVF   78,W
028F:  MOVWF  43
....................       Checksum = Read_Data();                 // read checksum 
0290:  CALL   1E5
0291:  MOVF   78,W
0292:  MOVWF  46
....................       if(Time_out){                           // If reading takes long time 
0293:  BTFSS  41.0
0294:  GOTO   2A5
....................         lcd_putc('\f');                       // LCD clear 
0295:  MOVLW  0C
0296:  MOVWF  4A
0297:  CALL   14C
....................         lcd_gotoxy(5, 1);                     // Go to column 5 row 1 
0298:  MOVLW  05
0299:  MOVWF  4B
029A:  MOVLW  01
029B:  MOVWF  4C
029C:  CALL   13A
....................         lcd_putc("Time out!"); 
029D:  MOVLW  0C
029E:  BSF    03.6
029F:  MOVWF  0D
02A0:  MOVLW  00
02A1:  MOVWF  0F
02A2:  BCF    03.6
02A3:  CALL   178
....................       } 
02A4:  GOTO   2FE
....................       else{ 
....................        if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF)){ 
02A5:  MOVF   45,W
02A6:  ADDWF  44,W
02A7:  ADDWF  42,W
02A8:  ADDWF  43,W
02A9:  SUBWF  46,W
02AA:  BTFSS  03.2
02AB:  GOTO   2F0
....................          message1[7]  = T_Byte1/10  + 48; 
02AC:  MOVF   42,W
02AD:  MOVWF  47
02AE:  MOVLW  0A
02AF:  MOVWF  48
02B0:  CALL   239
02B1:  MOVLW  30
02B2:  ADDWF  78,W
02B3:  MOVWF  28
....................          message1[8]  = T_Byte1%10  + 48; 
02B4:  MOVF   42,W
02B5:  MOVWF  47
02B6:  MOVLW  0A
02B7:  MOVWF  48
02B8:  CALL   239
02B9:  MOVLW  30
02BA:  ADDWF  77,W
02BB:  MOVWF  29
....................          message1[10] = T_Byte2/10  + 48; 
02BC:  MOVF   43,W
02BD:  MOVWF  47
02BE:  MOVLW  0A
02BF:  MOVWF  48
02C0:  CALL   239
02C1:  MOVLW  30
02C2:  ADDWF  78,W
02C3:  MOVWF  2B
....................          message2[7]  = RH_Byte1/10 + 48; 
02C4:  MOVF   44,W
02C5:  MOVWF  47
02C6:  MOVLW  0A
02C7:  MOVWF  48
02C8:  CALL   239
02C9:  MOVLW  30
02CA:  ADDWF  78,W
02CB:  MOVWF  38
....................          message2[8]  = RH_Byte1%10 + 48; 
02CC:  MOVF   44,W
02CD:  MOVWF  47
02CE:  MOVLW  0A
02CF:  MOVWF  48
02D0:  CALL   239
02D1:  MOVLW  30
02D2:  ADDWF  77,W
02D3:  MOVWF  39
....................          message2[10] = RH_Byte2/10 + 48; 
02D4:  MOVF   45,W
02D5:  MOVWF  47
02D6:  MOVLW  0A
02D7:  MOVWF  48
02D8:  CALL   239
02D9:  MOVLW  30
02DA:  ADDWF  78,W
02DB:  MOVWF  3B
....................          message1[11] = 223;                   // Degree symbol 
02DC:  MOVLW  DF
02DD:  MOVWF  2C
....................          lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
02DE:  MOVLW  01
02DF:  MOVWF  4B
02E0:  MOVWF  4C
02E1:  CALL   13A
....................          printf(lcd_putc, message1);           // Display message1 
02E2:  MOVLW  21
02E3:  MOVWF  04
02E4:  BCF    03.7
02E5:  CALL   24E
....................          lcd_gotoxy(1, 2);                     // Go to column 1 row 2 
02E6:  MOVLW  01
02E7:  MOVWF  4B
02E8:  MOVLW  02
02E9:  MOVWF  4C
02EA:  CALL   13A
....................          printf(lcd_putc, message2);           // Display message2 
02EB:  MOVLW  31
02EC:  MOVWF  04
02ED:  BCF    03.7
02EE:  CALL   24E
....................        } 
02EF:  GOTO   2FE
....................        else{ 
....................          lcd_putc('\f');                       // LCD clear 
02F0:  MOVLW  0C
02F1:  MOVWF  4A
02F2:  CALL   14C
....................          lcd_gotoxy(1, 1);                     // Go to column 1 row 1 
02F3:  MOVLW  01
02F4:  MOVWF  4B
02F5:  MOVWF  4C
02F6:  CALL   13A
....................          lcd_putc("Checksum Error!"); 
02F7:  MOVLW  11
02F8:  BSF    03.6
02F9:  MOVWF  0D
02FA:  MOVLW  00
02FB:  MOVWF  0F
02FC:  BCF    03.6
02FD:  CALL   178
....................        } 
....................       } 
....................     } 
02FE:  GOTO   31A
....................     else { 
....................       lcd_putc('\f');                          // LCD clear 
02FF:  MOVLW  0C
0300:  MOVWF  4A
0301:  CALL   14C
....................       lcd_gotoxy(3, 1);                        // Go to column 3 row 1 
0302:  MOVLW  03
0303:  MOVWF  4B
0304:  MOVLW  01
0305:  MOVWF  4C
0306:  CALL   13A
....................       lcd_putc("No response"); 
0307:  MOVLW  19
0308:  BSF    03.6
0309:  MOVWF  0D
030A:  MOVLW  00
030B:  MOVWF  0F
030C:  BCF    03.6
030D:  CALL   178
....................       lcd_gotoxy(1, 2);                        // Go to column 1 row 2 
030E:  MOVLW  01
030F:  MOVWF  4B
0310:  MOVLW  02
0311:  MOVWF  4C
0312:  CALL   13A
....................       lcd_putc("from the sensor"); 
0313:  MOVLW  1F
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  MOVLW  00
0317:  MOVWF  0F
0318:  BCF    03.6
0319:  CALL   178
....................     } 
031A:  BCF    0A.3
031B:  BCF    0A.4
031C:  GOTO   388 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
