CCS PCM C Compiler, Version 5.015, 5967               09-Thg3-21 17:01

               Filename:   E:\PIC16F877A\CCS\ngat\main.lst

               ROM used:   96 words (1%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           15 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   044
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... //Ng?t 1s trên Timer0 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
....................  
.................... #fuses NOWDT,PUT,XT,NOPROTECT 
.................... #use delay(clock=4000000) 
.................... #use fast_io(c) 
.................... #byte portd=0x08 
.................... int16 count; 
.................... int8 a; 
.................... #int_timer0 //Chuong trinh ngat TMR0 
.................... void timer0() 
.................... {set_timer0(56); // T = 2*(256 - 56)*1us = 400us 
002F:  MOVLW  38
0030:  MOVWF  01
.................... //(n?u dùng th?ch anh 20M thi thay 1us thành 0,2us) 
.................... ++count; 
0031:  INCF   27,F
0032:  BTFSC  03.2
0033:  INCF   28,F
.................... if(count == 2500) 
0034:  MOVF   27,W
0035:  SUBLW  C4
0036:  BTFSS  03.2
0037:  GOTO   040
0038:  MOVF   28,W
0039:  SUBLW  09
003A:  BTFSS  03.2
003B:  GOTO   040
.................... // 2500*400us = 1000000us = 1s 
.................... {count=0; 
003C:  CLRF   28
003D:  CLRF   27
.................... rotate_left(&a,1); 
003E:  RLF    29,W
003F:  RLF    29,F
.................... } 
0040:  BCF    0B.2
0041:  BCF    0A.3
0042:  BCF    0A.4
0043:  GOTO   01B
.................... } 
....................  
.................... //Chuong trinh dich led 
.................... void main() 
0044:  MOVF   03,W
0045:  ANDLW  1F
0046:  MOVWF  03
0047:  BSF    03.5
0048:  BSF    1F.0
0049:  BSF    1F.1
004A:  BSF    1F.2
004B:  BCF    1F.3
004C:  MOVLW  07
004D:  MOVWF  1C
004E:  BCF    03.7
.................... { set_tris_d(0); 
004F:  MOVLW  00
0050:  MOVWF  08
.................... enable_interrupts(int_timer0); 
0051:  BCF    03.5
0052:  BSF    0B.5
.................... setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2); 
0053:  BSF    03.5
0054:  MOVF   01,W
0055:  ANDLW  C0
0056:  MOVWF  01
.................... enable_interrupts(global); 
0057:  MOVLW  C0
0058:  BCF    03.5
0059:  IORWF  0B,F
.................... a = 0x01; 
005A:  MOVLW  01
005B:  MOVWF  29
.................... while(true) 
.................... { 
.................... portd = a; 
005C:  MOVF   29,W
005D:  MOVWF  08
005E:  GOTO   05C
.................... } 
.................... } 
....................  
005F:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
